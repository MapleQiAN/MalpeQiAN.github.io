<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ContactME</title>
    <url>/2023/03/12/ContactME/</url>
    <content><![CDATA[<p>Email: <a class="link" href="mailto:&#115;&#101;&#114;&#x65;&#110;&#x64;&#x79;&#108;&#x69;&#x6e;&#64;&#x6f;&#117;&#116;&#108;&#111;&#111;&#107;&#x2e;&#x63;&#111;&#109;">&#115;&#101;&#114;&#x65;&#110;&#x64;&#x79;&#108;&#x69;&#x6e;&#64;&#x6f;&#117;&#116;&#108;&#111;&#111;&#107;&#x2e;&#x63;&#111;&#109; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>QQ: 15993469631 (备注博客)</p>
]]></content>
  </entry>
  <entry>
    <title>LALALAND</title>
    <url>/2023/06/24/LALALAND/</url>
    <content><![CDATA[<p>​	端午第二天，看完了爱乐之城，这部片子相当有名以至于我一直以为它是老片子，结果一看才发现原来是2017年的片，其实一点都不老，甚至算得上新了，平时真的不咋看电影所以算是我孤陋寡闻了。但是确实真的非常非常棒的一部片子。电影中间有很多音乐剧的元素，穿插在整个电影的行进流程中，并且这些音乐剧基本都是长镜头一镜到底，拍摄难度还是相当大的，但是整体看下来真的是很舒服很厉害的一部电影。</p>
<p>​    但是其实是很现实的一个问题，相爱之人为了自己的梦想以及生活的忙碌终究无法在一起，影片中也看到了男主女主都为了对方在妥协自己的梦想，有点刀。但是结尾男女主都实现了自己的梦想，男主追求到了纯粹的jazz，女主也成功地成为了一名女演员，或许这也是一种圆满吧。或许人总是要在梦想和生活之间选择一个吧，影片中男女主分别选择了自己的梦想，也十分尊重对方的梦想，或许这也是…圆满。但是结尾女主在男主的酒吧里遇到男主，而且男主还用之前女主给他起的名字来命名，最后男主还在台上弹了他们第一次相遇时男主自己弹的钢琴曲，中间插的一段音乐剧是男主幻想和女主的美好爱情生活，但是终究是幻想，最后还是用略显悲伤的钢琴来作为这段没有结果的爱情的收场了。</p>
<p>​    虽然中间并没有说他们是如何离开的，为何最终没有走到一块，但是感觉电影中其实已经给出答案了，就是男女主不能接受对方为了对方而放弃自己的梦想，所以最后虽然男女主没有在一起，但是他们都实现了自己的梦想，所以也算是他们两个的另一种完美结局吧。</p>
<p>​    女主回到老家之后本不愿意继续试镜，因为她曾经失败过太多次了，她不想再一次失败了。看到这里真的感同身受了，失败过太多次真的会怀疑自己的吧。</p>
]]></content>
      <categories>
        <category>Movie</category>
      </categories>
      <tags>
        <tag>影评</tag>
      </tags>
  </entry>
  <entry>
    <title>MD5加密算法逆向</title>
    <url>/2023/04/21/MD5%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<h2 id="基本的IDA-Pro-Slides"><a href="#基本的IDA-Pro-Slides" class="headerlink" title="基本的IDA Pro(Slides)"></a>基本的IDA Pro(Slides)</h2><h4 id="MD5加密原理"><a href="#MD5加密原理" class="headerlink" title="MD5加密原理"></a>MD5加密原理</h4><p>首先你得会基本的MD5加密算法原理，给一个传送门</p>
<a class="button  center large" href="https://en.wikipedia.org/wiki/MD5" title="MD5哈希函数加密算法原理"><i class="fa-regular fa-circle-info"></i> MD5哈希函数加密算法原理</a> 

<p>也可以看PPT P59-P65</p>
<h4 id="什么方法可以快速确定是MD5"><a href="#什么方法可以快速确定是MD5" class="headerlink" title="什么方法可以快速确定是MD5"></a>什么方法可以快速确定是MD5</h4><p>看提示–&gt;找字符串–&gt;找判断</p>
<h4 id="如何真正确定是MD5"><a href="#如何真正确定是MD5" class="headerlink" title="如何真正确定是MD5"></a>如何真正确定是MD5</h4><p>需要对比较程序的函数功能进行解读，对加密函数的每个子函数的功能都分析清楚，最终确定是MD5哈希加密算法</p>
<p>BTW：MD5只能使用碰撞解密，所以判断出是MD5了之后我们就需要进行碰撞脚本的编写了</p>
<h4 id="逆向的基本思路"><a href="#逆向的基本思路" class="headerlink" title="逆向的基本思路"></a>逆向的基本思路</h4><p><strong>找目标散列值–&gt;找到原文和长度–&gt;找到原文的字典集合（–&gt;破解的速度）–&gt;写碰撞程序</strong>(Python)</p>
<p>然后这个题目有一个比较坑的点就是他的<strong>字符串长度是4字节+而不是4字节</strong></p>
<h4 id="逆向步骤分析"><a href="#逆向步骤分析" class="headerlink" title="逆向步骤分析"></a>逆向步骤分析</h4><p>见PPT第7-9讲 P68-77</p>
<h4 id="最终完成的碰撞程序"><a href="#最终完成的碰撞程序" class="headerlink" title="最终完成的碰撞程序"></a>最终完成的碰撞程序</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits, ascii_letters, ascii_lowercase, ascii_uppercase, punctuation, whitespace, printable</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations, product</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decipher_md5</span>(<span class="params">md5_value: <span class="built_in">str</span>, plaintext_len: <span class="built_in">int</span> = <span class="number">4</span>, \</span></span><br><span class="line"><span class="params">                 plaintext_letter_dict: <span class="built_in">str</span> = ascii_letters+punctuation, dup: <span class="built_in">bool</span> =<span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">    md5_value = md5_value.lower()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(md5_value) != <span class="number">32</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'\n不是有效的md5散列!'</span>)</span><br><span class="line">        sys.exit(-<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> dup: <span class="comment"># 全排列，可重复</span></span><br><span class="line">            plaintext_set = [<span class="string">''</span>.join(p) <span class="keyword">for</span> p <span class="keyword">in</span> product(punctuation, repeat=plaintext_len)]</span><br><span class="line">        <span class="keyword">else</span>:   <span class="comment"># 全排列，不可重复</span></span><br><span class="line">            plaintext_set = permutations(plaintext_letter_dict, plaintext_len)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> plaintext_set: </span><br><span class="line">            item=<span class="string">''</span>.join(item)</span><br><span class="line">            <span class="comment"># print(item)</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> md5(item.encode()).hexdigest() == md5_value:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'\n成功解出明文: '</span> + md5_value + <span class="string">' ==&gt; '</span> + item)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> md5(item.encode()).hexdigest() != md5_value: </span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> SystemExit:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'\n解析失败，请检查下给定的明文长度（默认 plaintext_len: int = 4）!!!'</span>)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    decipher_md5(md5_value = <span class="string">'b5a5d6911aa48b50139c7122ef05ca9a'</span>, plaintext_letter_dict = punctuation, dup=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># test()</span></span><br><span class="line">    decipher_md5(md5_value = <span class="string">'23d4a52c56357cb705137656744dc055'</span>, plaintext_letter_dict = ascii_letters)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></div>



<h2 id="加密函数复用（DLL注入）——动态分析"><a href="#加密函数复用（DLL注入）——动态分析" class="headerlink" title="加密函数复用（DLL注入）——动态分析"></a>加密函数复用（DLL注入）——动态分析</h2><h4 id="①MD5计算-复用MD5加密程序"><a href="#①MD5计算-复用MD5加密程序" class="headerlink" title="①MD5计算 复用MD5加密程序"></a>①MD5计算 复用MD5加密程序</h4><p>动态调试，复用MD5程序</p>
<p>找到计算MD5函数（操作复杂）</p>
<h4 id="②怎么复用？"><a href="#②怎么复用？" class="headerlink" title="②怎么复用？"></a>②怎么复用？</h4><h4 id="③直接ASM太复杂"><a href="#③直接ASM太复杂" class="headerlink" title="③直接ASM太复杂"></a>③直接ASM太复杂</h4><h4 id="④DLL注入"><a href="#④DLL注入" class="headerlink" title="④DLL注入"></a>④DLL注入</h4><p>找到散列+MD5函数指针 </p>
<p>传3个指针：<strong>散列值 原文长度 MD5函数指针</strong></p>
<h5 id="注入程序"><a href="#注入程序" class="headerlink" title="注入程序"></a>注入程序</h5><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"main.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> DLL_EXPORT <span class="title function_">randomCHR</span><span class="params">(<span class="type">int</span> flag_len)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> temp = cnt_no;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;flag_len; i++)</span><br><span class="line">      flag[i] = letters[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; temp != <span class="number">0</span>; i++) {</span><br><span class="line">        j = temp % <span class="built_in">strlen</span>(letters);</span><br><span class="line">        temp = temp / <span class="built_in">strlen</span>(letters);</span><br><span class="line"></span><br><span class="line">        flag[i] = letters[j];</span><br><span class="line">    }</span><br><span class="line">    flag[flag_len] = <span class="string">'\0'</span>;  <span class="comment">// 强制截断</span></span><br><span class="line"></span><br><span class="line">    cnt_no ++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> DLL_EXPORT <span class="title function_">crack</span><span class="params">(<span class="type">char</span> * target_hash, <span class="type">int</span> flag_len, <span class="type">void</span>(*hash_func)(<span class="type">char</span> *, <span class="type">char</span> *, <span class="type">unsigned</span> <span class="type">int</span>))</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> temp;</span><br><span class="line">    <span class="type">char</span> out[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(cnt_no=<span class="number">0</span>; cnt_no&lt;<span class="built_in">pow</span>(<span class="number">26</span>, flag_len); cnt_no++) {</span><br><span class="line">        temp = cnt_no;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;flag_len; i++)</span><br><span class="line">            flag[i] = letters[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; temp != <span class="number">0</span>; i++)</span><br><span class="line">    	{</span><br><span class="line">    		j = temp % <span class="built_in">strlen</span>(letters);</span><br><span class="line">    		temp = temp / <span class="built_in">strlen</span>(letters);</span><br><span class="line"></span><br><span class="line">    		flag[i] = letters[j];</span><br><span class="line">    	}</span><br><span class="line">        flag[flag_len] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">        hash_func(out, flag, flag_len);</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(out, target_hash, <span class="built_in">strlen</span>(target_hash)) )</span><br><span class="line">            MessageBoxA(<span class="number">0</span>, flag, <span class="string">"已成功匹配"</span>, MB_OK | MB_ICONINFORMATION);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> DLL_EXPORT BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">switch</span> (fdwReason)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">            <span class="comment">// attach to process</span></span><br><span class="line">            <span class="comment">// return FALSE to fail DLL load</span></span><br><span class="line">            <span class="type">char</span> addr_info[<span class="number">100</span>];</span><br><span class="line">            <span class="built_in">sprintf</span>(addr_info, <span class="string">"randomCHR: \t0x%p,\tcrack: \t0x%p\n&amp;cnt_no: \t0x%p,\tflag: \t0x%p"</span>, randomCHR, crack, &amp;cnt_no, flag);</span><br><span class="line"></span><br><span class="line">            MessageBoxA(<span class="number">0</span>, addr_info, <span class="string">"地址信息"</span>, MB_OK | MB_ICONINFORMATION);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">            <span class="comment">// detach from process</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">            <span class="comment">// attach to thread</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">            <span class="comment">// detach from thread</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> TRUE; <span class="comment">// succesful</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h4 id="⑤调用Crack进行破解"><a href="#⑤调用Crack进行破解" class="headerlink" title="⑤调用Crack进行破解"></a>⑤调用Crack进行破解</h4><h4 id="⑥进行二进制编辑"><a href="#⑥进行二进制编辑" class="headerlink" title="⑥进行二进制编辑"></a>⑥进行二进制编辑</h4><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>IDA Pro找到MD5地址：401719（也就是说还是得分析出MD5函数）</p>
<img lazyload src="/images/loading.svg" data-src="/2023/04/21/MD5%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20230421171035913.png" class title="image-20230421171035913">

<p>在x32dbg中ctrl+G定位到地址401719</p>
<p>按下空格看到MD5函数的地址，并记录</p>
<img lazyload src="/images/loading.svg" data-src="/2023/04/21/MD5%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20230421171009798.png" class title="image-20230421171009798">

<p>在401716处下断点，运行至此处，准备开始二进制编辑</p>
<p>加载注入程序，使用ScyllaHide插件，Inject DLL</p>
<p>注入成功之后插件会提示函数注入地址：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/04/21/MD5%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20230421171708829.png" class title="image-20230421171708829">

<p>读出crack函数入口地址（每次加载时都不太一样）：6a1556</p>
<p>按下空格修改汇编指令：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/04/21/MD5%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20230421172651143.png" class title="image-20230421172651143">

<p>将[esp]改为[esp+0x08]，输入0x4016a1，传入第三个参数：散列值</p>
<p>将[esp]改为[esp+0x04]，输入0x04，传入第二个参数：原文长度</p>
<p>在[esp]处，根据x32dbg提示的地址，输入0x0040508c，传入第三个参数：MD5函数指针</p>
<p>将下一步的call的地址改成注入函数入口地址（0x006a1556）</p>
<p>（点击右侧的EIP可以直接返回）</p>
<p>下两个断点：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/04/21/MD5%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20230421173532953.png" class title="image-20230421173532953">

<p>然后就可以解出明文：<strong>BUPT</strong></p>
<p>Plus:如何编写DLL文件</p>
<p>使用Codeblocks，在创建项目中选择Dynamic Link Library</p>
<img lazyload src="/images/loading.svg" data-src="/2023/04/21/MD5%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20230425203026675.png" class title="image-20230425203026675">

<h3 id="问题解释"><a href="#问题解释" class="headerlink" title="问题解释"></a>问题解释</h3><p>在进行DLL注入的时候如果在断点注入可能会出现卡死的现象，此时注入就失败了</p>
<p>解决方案：不应该在401716处进行注入，应该在程序的Entrypoint处进行注入，并且要在程序已经出现了提示信息“Please input your flag:”之后再进行注入，否则也会卡死</p>
<img lazyload src="/images/loading.svg" data-src="/2023/04/21/MD5%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/image-20230502124024557-16830024324881.png" class title="image-20230502124024557">

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>汇编逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>Minecraft服务器的创建和配置</title>
    <url>/2024/06/14/Minecraft%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>本文暂不考虑插件服务器，因为都是自己人玩，插件服麻烦</p>
<h2 id="服务器搭建（Windows）"><a href="#服务器搭建（Windows）" class="headerlink" title="服务器搭建（Windows）"></a>服务器搭建（Windows）</h2><h3 id="原版服务端"><a href="#原版服务端" class="headerlink" title="原版服务端"></a>原版服务端</h3><p><a class="link" href="https://www.bilibili.com/read/cv33236294/?spm_id_from=333.999.collection.opus.click">Java Edition原版服务端核心 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>到这里找到对应版本的核心服务端，然后按照<a class="link" href="https://www.minecraft.net/zh-hans/download/server">官网教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>做好启动脚本，就可以成功搭建一个原版服务端了。</p>
<p>注意：请注意自己的Java版本和游戏所支持的Java版本的对应，否则会出现无法加载主类的报错。</p>
<h3 id="Forge服务端"><a href="#Forge服务端" class="headerlink" title="Forge服务端"></a>Forge服务端</h3><p>在PCL上手动安装部分下载对应版本的Forge，选择Install for Server，然后再选择服务器所需要安装的路径就可以安装成功了。</p>
<img lazyload src="/images/loading.svg" data-src="/2024/06/14/Minecraft%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE/image-20240614151247436.png" class title="image-20240614151247436">

<h3 id="Fabric服务端"><a href="#Fabric服务端" class="headerlink" title="Fabric服务端"></a>Fabric服务端</h3><p>和Forge服务端操作类似，很简单就可以安装。</p>
<p>注：有的版本Fabric端可以进Forge服务器而有的版本不行</p>
<h3 id="Bedrock-Edition服务端"><a href="#Bedrock-Edition服务端" class="headerlink" title="Bedrock Edition服务端"></a>Bedrock Edition服务端</h3><p>到<a class="link" href="https://www.minecraft.net/zh-hans/download/server/bedrock">官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>下载服务端，解压即用</p>
<h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><p>server.properties各字段作用</p>
<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Minecraft server properties</span></span><br><span class="line"><span class="comment">#Fri Jun 14 17:21:18 CST 2024</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否启用JMX监控</span></span><br><span class="line"><span class="attr">enable-jmx-monitoring</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># RCON（远程控制台）端口</span></span><br><span class="line"><span class="attr">rcon.port</span>=<span class="string">25575</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 世界生成种子</span></span><br><span class="line"><span class="attr">level-seed</span>=<span class="string">-8723366411114572095</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 游戏模式（生存模式）</span></span><br><span class="line"><span class="attr">gamemode</span>=<span class="string">survival</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否启用命令方块</span></span><br><span class="line"><span class="attr">enable-command-block</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否启用查询</span></span><br><span class="line"><span class="attr">enable-query</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 自定义世界生成设置</span></span><br><span class="line"><span class="attr">generator-settings</span>=<span class="string">{}</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否强制使用安全配置文件</span></span><br><span class="line"><span class="attr">enforce-secure-profile</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 世界名称</span></span><br><span class="line"><span class="attr">level-name</span>=<span class="string">world</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># MOTD（消息通知）内容</span></span><br><span class="line"><span class="attr">motd</span>=<span class="string">养老生存服务器</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 查询端口</span></span><br><span class="line"><span class="attr">query.port</span>=<span class="string">25565</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否开启PVP</span></span><br><span class="line"><span class="attr">pvp</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否生成结构</span></span><br><span class="line"><span class="attr">generate-structures</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 最大链式邻居更新次数</span></span><br><span class="line"><span class="attr">max-chained-neighbor-updates</span>=<span class="string">1000000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 游戏难度（困难）</span></span><br><span class="line"><span class="attr">difficulty</span>=<span class="string">hard</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 网络压缩阈值</span></span><br><span class="line"><span class="attr">network-compression-threshold</span>=<span class="string">256</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 最大每tick时间（毫秒）</span></span><br><span class="line"><span class="attr">max-tick-time</span>=<span class="string">60000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否要求使用资源包</span></span><br><span class="line"><span class="attr">require-resource-pack</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否使用原生传输</span></span><br><span class="line"><span class="attr">use-native-transport</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 最大玩家数量</span></span><br><span class="line"><span class="attr">max-players</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否在线模式</span></span><br><span class="line"><span class="attr">online-mode</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否启用服务器状态查询</span></span><br><span class="line"><span class="attr">enable-status</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否允许飞行</span></span><br><span class="line"><span class="attr">allow-flight</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 初始禁用包</span></span><br><span class="line"><span class="attr">initial-disabled-packs</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否向管理员广播RCON消息</span></span><br><span class="line"><span class="attr">broadcast-rcon-to-ops</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 视距</span></span><br><span class="line"><span class="attr">view-distance</span>=<span class="string">16</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 服务器IP地址</span></span><br><span class="line"><span class="attr">server-ip</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 资源包提示</span></span><br><span class="line"><span class="attr">resource-pack-prompt</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否允许进入下界</span></span><br><span class="line"><span class="attr">allow-nether</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 服务器端口</span></span><br><span class="line"><span class="attr">server-port</span>=<span class="string">25565</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否启用RCON</span></span><br><span class="line"><span class="attr">enable-rcon</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否同步区块写入</span></span><br><span class="line"><span class="attr">sync-chunk-writes</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 管理员权限等级</span></span><br><span class="line"><span class="attr">op-permission-level</span>=<span class="string">4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否阻止代理连接</span></span><br><span class="line"><span class="attr">prevent-proxy-connections</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否隐藏在线玩家</span></span><br><span class="line"><span class="attr">hide-online-players</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 资源包URL</span></span><br><span class="line"><span class="attr">resource-pack</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 实体广播范围百分比</span></span><br><span class="line"><span class="attr">entity-broadcast-range-percentage</span>=<span class="string">100</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 模拟距离</span></span><br><span class="line"><span class="attr">simulation-distance</span>=<span class="string">12</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># RCON密码</span></span><br><span class="line"><span class="attr">rcon.password</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 玩家空闲超时时间（分钟）</span></span><br><span class="line"><span class="attr">player-idle-timeout</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否强制游戏模式</span></span><br><span class="line"><span class="attr">force-gamemode</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 速率限制</span></span><br><span class="line"><span class="attr">rate-limit</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否为极限模式</span></span><br><span class="line"><span class="attr">hardcore</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否启用白名单</span></span><br><span class="line"><span class="attr">white-list</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否向管理员广播控制台消息</span></span><br><span class="line"><span class="attr">broadcast-console-to-ops</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否生成NPC</span></span><br><span class="line"><span class="attr">spawn-npcs</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否生成动物</span></span><br><span class="line"><span class="attr">spawn-animals</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 功能权限等级</span></span><br><span class="line"><span class="attr">function-permission-level</span>=<span class="string">2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 初始启用包</span></span><br><span class="line"><span class="attr">initial-enabled-packs</span>=<span class="string">vanilla</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 世界类型</span></span><br><span class="line"><span class="attr">level-type</span>=<span class="string">minecraft\:normal</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 文本过滤配置</span></span><br><span class="line"><span class="attr">text-filtering-config</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否生成怪物</span></span><br><span class="line"><span class="attr">spawn-monsters</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否强制白名单</span></span><br><span class="line"><span class="attr">enforce-whitelist</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 出生保护区块半径</span></span><br><span class="line"><span class="attr">spawn-protection</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 资源包SHA1校验码</span></span><br><span class="line"><span class="attr">resource-pack-sha1</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 最大世界大小</span></span><br><span class="line"><span class="attr">max-world-size</span>=<span class="string">29999984</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>《也许你该找个人聊聊》书评</title>
    <url>/2023/12/06/%E3%80%8A%E4%B9%9F%E8%AE%B8%E4%BD%A0%E8%AF%A5%E6%89%BE%E4%B8%AA%E4%BA%BA%E8%81%8A%E8%81%8A%E3%80%8B%E4%B9%A6%E8%AF%84/</url>
    <content><![CDATA[<h2 id="书评"><a href="#书评" class="headerlink" title="书评"></a>书评</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1842713263&auto=1&height=66"></iframe>

<p>这本书是从一个心理治疗师的第一视角写的，她所接触的个案也是十分具有典型性的，我觉得看着她和她的来访者是如何一点点变好的是很治愈的一件事。我感觉这些文字就像是一个温柔的大姐姐在慢慢地向你讲述她自己的亲身故事，并且在这个过程中给你传输一些些道理，让我们也能变得更好。</p>
<p>整本书选取了四个案例，一个是年轻却将要面对死亡的朱莉，一个是年过古稀却仍想走出之前的人生阴影的瑞塔，还有一个是面对生活的各种压力的职场人约翰，以及刚经历分手和未知病症的治疗师自己。我觉得这几个案例选择的都十分典型且具有代表性，还原了生活中大部分我们要面临的问题：我们如何和过去的自己和解，我们如何原谅自己和身边的其他人，经历过冲击（指分手）我们如何重新回到正常的生活节奏；甚至是一些终极问题：我们如何面对死亡——哪怕是在年轻的时候就要被迫面对。</p>
<p>在解决问题的过程中，这本书很好的贯彻了心理治疗师的原则，他们不会帮我们做决定，他们是引导我们自己去做决定，就像书里说的：“很多时候人们不是想要一个建议，因为无论你给他们什么建议他们都不会觉得满意。”所以我们也能够以一个心理治疗师的视角去看到，如何让自己能够成长，是应该不断反思和发现最真实的自己，并且去尝试面对真实的自己。心理治疗是一个痛苦的过程，因为它要求我们去面对自己的弱点，去提出我们曾经不愿提起的事情，这本身就是对我们的巨大挑战，所以她也说：“治疗成功最重要的还是来访者自己的努力。”或许这也是让我们学会自我成长的一个重要过程：我们要尝试去面对最真实的自己，哪怕有些事情我们自己有时候都没有意识到，但是却在潜移默化影响着我们的。只有面对最真实的自己，才能够让自己获得重生。（这个观点也是摘录的第一句）</p>
<p>当然，阅读这本书，学习到一些安慰人的方法也是很好的哈哈哈，虽然我们没有心理治疗师的专业程度，但是我们可以以心理治疗师的耐心与博爱去关怀身边的朋友们，成为他们港湾。</p>
<p>Plus：读书摘录是很好的，可以一下子就重新得到一本书的精华，当然一本书足够好的时候，阅读第二遍也是相当值得的。</p>
<p>这本书的书评我选择了Rainbow In The Sky这首歌，是一首很欢乐很美好的歌，希望我们都能面对最真实的自己，让自己在自爱的过程中越变越好，最终触摸到自己的彩虹~</p>
<p>——————2023.12.19———————-</p>
<p>还有一点，读书的时候深刻地感受到美国人真是自由啊，四五十岁甚至六七十岁了都可以为了自己的爱好或梦想去改变职业，去读研究生，去谈恋爱，去参加各种活动，反观…</p>
<h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><ol>
<li><p>“你会看到最核心，也是最有效的办法，始终是一条常识：你没法逃避痛苦，只能承认。”</p>
</li>
<li><p>“不要心存幻想。这个世界没有奇迹。你无法逃避你所遇到的痛苦，心理学也不能提供任何幻想，但不要忘了，世界上也有这样的地方，有这样一些人，可以直面这个无处可逃的、困惑的、痛苦的你。你们坐在一起，随便谈谈。你可以言说真实的你，而这就是心理咨询的奇迹所在。”</p>
</li>
<li><p>“我知道痛苦总是和丧失紧密相连”</p>
</li>
<li><p>“变化也常常伴随着失去。无所失则不得变，正因如此，人们常常说着要去改变，却依然驻足原地”</p>
</li>
<li><p>“虽然我明白，和一个绝症患者相比，自己的痛苦无足轻重，但我还是能感受到（尽管还未能意识到），我的痛苦并不是微不足道的。在我的内心，一场灾难正在酝酿成形。”</p>
</li>
<li><p>“他们会描述理想的情景，并固执地认为只有百分之百地实现那个理想的情景，才能得到快乐。”</p>
</li>
<li><p>“人们绝不愿意去想象的是，即使自己把所有该做的都做对了，还是有可能抽到一支下下签。但如果最坏的情况真的发生了，你唯一能做的就是以自己的方式面对厄运，而不是听从别人的意见。”</p>
</li>
<li><p>“我并没有意识到这在无意间证明了，是我在回避自己深知男友遇事会选择回避这一事实。”</p>
</li>
<li><p>“对来访者来说更重要的是能得到聆听和理解，而不是获得领悟或作出改变。”</p>
</li>
<li><p>“温德尔说，是我故意假装看不到男友的某些过去、他的某些意见和肢体语言。如果我曾关注这些潜在的预警，它们可能会发出警报，但是我自己把它们静音了。”</p>
</li>
<li><p>“他一直要求我去看清我俩是如何躲在浪漫的爱情、戏谑和对将来的计划背后，以此来回避面对对方”</p>
</li>
<li><p>“而我们也会在生命的某个节点意识到，必须放弃虚构关于美好过往的幻想”</p>
</li>
<li><p>“如果我们不能接受历史无法重来这个概念，比如想要父母、兄弟或伴侣去重新理顺许多年前的事，那我们就会被困在过去。”</p>
</li>
<li><p>“但我们却很少谈及与未来的关系同样也会影响当下的情况”</p>
</li>
<li><p>“我其实不只是在当下失去了一段感情，也失去了在未来的感情”</p>
</li>
<li><p>“我只是觉得电视剧的情节永远无法再现现实中急诊室故事的真实、伟大和深刻意义，而我的这个爱好填补了这些空白——爱好不就是起到这个作用吗？”</p>
</li>
<li><p>“而这种痛苦永远永远永远永远都不会消失……因为失去梦想是一种非常非常重大的损失。”</p>
</li>
<li><p>“世上总有让你羡慕的好命之人，也总有人比你运气更糟。”</p>
</li>
<li><p>“有很大一部分人只维持了短暂的觉醒，探索一下自己的灵魂，又在清单上多加了几条愿望——然后就不想着要去付诸实践了。人们往往想得多做得少，死亡也只是存在于假想中的课题。”</p>
</li>
<li><p>“他们并不在意最后是到了意大利还是荷兰，或是别的什么地方。重要的是他们决定登上飞机，看看会降落在哪里。”</p>
</li>
<li><p>“我在治疗中遇到的夫妇和情侣们，常常抱怨的不是“你不爱我”，而是“你不理解我”。”</p>
</li>
<li><p>“但与神经外科医生不同的是，我们就是奔着敏感区域去的，小心翼翼地施以压力，哪怕这样会让来访者感到不适。”</p>
</li>
<li><p>“但对于大多数人来说，我们最大的问题在于不知道自己有什么问题。我们总是踏进同一个坑里。为什么我不断重复地做着那件一定会让自己不开心的事呢？”</p>
</li>
<li><p>“人们在关系尚浅的时候总是更容易保持融洽的相处。”</p>
</li>
<li><p>“我们不会直接把来访者引导至问题的核心，而是推动他们自己走向目的地，因为只有靠一己之力一点一点发现的真理，才是最有力的真理，是人们会认真地去面对的真理。”</p>
</li>
<li><p>“因为想要治疗过程有效，就免不了会有不适。”</p>
</li>
<li><p>“大多数值得做的事情都不简单。”</p>
</li>
<li><p>“要承认自己的恐惧，尤其是向自己承认自己的恐惧，有时还需假以时日。</p>
</li>
<li><p>“他被两边的自我拉扯着，就像我一样，这一半的我想要供养家人，另一半的我想做自己觉得有意义的事——一些触动我灵魂的事，也希望能借此触及更多人的灵魂。</p>
</li>
<li><p>“太多父母费尽心思想要让孩子过得轻松点，到头来却让孩子们过得更辛苦了。”</p>
</li>
<li><p>“除了我们听到的和看到的，有些听不见、看不到的东西也同样重要，那就是屋子里流动的能量，是两个人共处时气场的对流。当两个人不处在同一个物理空间时，也就失去了那个无法言喻的维度。”</p>
</li>
<li><p>“但要了解自己就必须先抛开对自己的固有认知——抛开那些你塑造出来限制自己的人设，这样你才不会裹足不前，才能活出真实的自己，而不是活在自己给自己描述的故事里。”</p>
</li>
<li><p>“为什么我们总是把收音机调在杂音的频率上呢——总是在收听“别人的生活都比我好”的电台，或是“我无法信任他人”的调频，还有“我啥也干不成”FM？我们就不能把调频的指针往上或往下拨一拨，换一换台，看看栏杆的两边吗？阻挠我们这么做的，除了我们自己还能有谁呢？”</p>
</li>
<li><p>“即使你拥有世上所有的真知灼见，但如果你在治疗之外的现实生活中不去作出改变，那再多的洞察，甚至治疗本身，都将毫无价值。”</p>
</li>
<li><p>“直到他对我说我上网搜索男友的行踪是因为我对不复存在的未来还放不开手。当我在偷窥男友的未来是如何展开的时候，我却被锁在了过去。”</p>
</li>
<li><p>“你听上去就像我十岁大的小孩，是什么让你觉得生活就该是公平的呢？”</p>
</li>
<li><p>“每当夏洛特遇到一个可能会好好爱她的人，她就会在下意识里拒绝他，把他的稳重看作“无趣”。她还是无法将被爱与“平和”或“喜悦”画等号，被爱对她来说就应该等于焦虑。”</p>
</li>
<li><p>“时刻提醒自己要把夏洛特看作一个独立的个体，而不是一个年轻版的自己，不是要回到过去拯救自己。”</p>
</li>
<li><p>“投射作用是指来访者将自己的想法强加到他人的身上，而投射性认同是指来访者通过诱导，将想法导入别人的内心。”</p>
</li>
<li><p>“投射性认同就像是把一只烫手的山芋扔给另一个人。当愤怒被转移到妻子身上之后，那个丈夫就不会再感到愤怒了。”</p>
</li>
<li><p>“要真正听到一个人的故事还需要假以时日，需要给那个人一些时间慢慢讲述。而且在你能整理出清晰的故事脉络之前，大多数故事都只是一些凌乱四散的片段，我自己的故事也同样如此。”</p>
</li>
<li><p>“给出了建议，他们却不会释怀，而是感到怨恨。而且即使后续发展一切顺利，也无法避免人们心中的怨恨，因为人们最终还是希望在自己的生活中掌控话语权。”</p>
</li>
<li><p>“他们以为现在的忙碌是为了以后能有机会享受生活，但往往，后来就没有“后来”了。”</p>
</li>
<li><p>“不论你是和朋友坐着喝咖啡，还是在公司开会，或是在学校吃午餐，在超市收银台前，又或是在家里的餐桌上，大家不是在发短信、浏览各种社交平台，就是在网上购物，有时还会装着和别人有眼神交流，有时甚至连装都懒得去装。”</p>
</li>
<li><p>“回避几乎总是和恐惧有关。回避看到种种能说明我和男友之间有不可调和之分歧的蛛丝马迹；回避动笔去写那本“幸福之书”；回避任何与这本书有关的话题；回避正视我儿子在一天天长大这个事实；回避那些说不清的病。我想起了在实习时学到的一句话：“回避就是以不面对的方式来面对问题。”</p>
</li>
<li><p>“随着年龄的增长，人们不得不面对更多的限制。转换职业会变得更难，移居到另一个城市会变得更难，要另找一个结婚对象也会更难。年纪越大，生活就越固化，有时人们会渴望年轻时的自由。”</p>
</li>
<li><p>“我要做的是想办法最大限度地活出自己的精彩，不管有没有生病，不管有没有另一半，也不管时间如何无情地流过。”</p>
</li>
<li><p>“因为当人们不知道改变会带来什么的时候，往往不愿意放弃现有的东西。这个阶段的痛点是改变意味着失去，而新情况又叫人不安。”</p>
</li>
<li><p>“而事实上，只有当她能作出一些改变的时候，她和父母的关系才会发生改变”</p>
</li>
<li><p>“有时候你希望另一个人改变，但这并不在那个人的计划之内——即使他们嘴上跟你说会改，也未必真的会改。”</p>
</li>
<li><p>“但事实上，我得到的是一个父亲的分身。</p>
</li>
<li><p>因为我父亲也总是能把我看清，看透。”</p>
</li>
<li><p>“弗兰克尔书中这样一句话：“在刺激和回应之间还留有一些空间，这个空间允许我们以自己的意志去选择我们的回应方式。我们所作出的回应包含了我们的成长和自由。”</p>
</li>
<li><p>“每个阶段都前后相连，而且每个阶段都有需要面对的冲突和危机，只有度过前一阶段的危机，才能进入人生的下一个阶段。这八个阶段分别是：</p>
</li>
</ol>
<p>•  婴儿期（希望）——信任/不信任</p>
<p>•  幼儿期（意志）——自主独立/羞怯怀疑</p>
<p>•  学龄前（目的）——主动/内疚</p>
<p>•  学童期（能力）——勤奋/自卑</p>
<p>•  青少年（忠诚）——同一性/角色混乱</p>
<p>•  青年成人（爱）——亲密/孤独</p>
<p>•  中年成人（关怀）——再生力/停滞</p>
<ol start="57">
<li><p>“你觉得什么样的量刑对你所犯的罪行来说才是公正的判决呢？”</p>
</li>
<li><p>瑞塔想了一下，她说：“终身监禁。”</p>
</li>
<li><p>“好吧，”我说，“你是这样执行的。但如果陪审团里有麦伦和那个‘亲人家庭’的话，他们是否会同意这个判决？”</p>
</li>
<li><p>“但那些我最在乎的人——我的孩子们，是永远都不会原谅我的。”</p>
</li>
<li><p>我点点头。“我们不知道他们会怎么做，但你深陷不幸的泥沼对他们来说也是毫无帮助的。你的痛苦并不能改变他们的处境，你把这个心结装在心里也并不能减轻他们的痛苦。这不是办法。就算事到如今，你也有很多方法可以成为更称职的母亲，但给自己判个终身监禁并不是什么好办法。”</p>
</li>
<li><p>“为什么家长会做出这样的行为呢？其实他们常常都会羡慕自己的孩子——羡慕他们拥有的机会，父母为他们提供的稳定的经济和情感环境，羡慕孩子们还有无限的未来，而这对家长们来说都是无法重来的过去。他们小时候得不到的东西，现在竭尽全力让自己的孩子们能拥有，但却常常在不知不觉中因为孩子们拥有的幸福而为自己感到愤愤不平。”</p>
</li>
<li><p>“有时原谅是很微妙的，就像道歉一样。你向别人道歉，究竟是为了让你自己好过一些，还是为了让对方好过一些？你是真的为自己所做的事感到抱歉，还是其实觉得自己做的事完全在理，只不过是想通过道歉安抚那个认为你应该觉得抱歉的人？道歉究竟是为了谁？”</p>
</li>
<li><p>“有时我们渴望别人原谅，只是为了自我满足；我们祈求别人的原谅，只是为了避免要自己原谅自己，因为自我原谅更难做到。”</p>
</li>
<li><p>“但人们常常迫于压力去原谅别人，到头来如果做不到还会认为是自己身上出了问题，认为自己不够开明，不够坚强，或缺乏慈悲之心。”</p>
</li>
<li><p>“我们之中有许多人会为自己犯过的错误折磨自己几十年，哪怕已经真心尝试去作出弥补。这样的量刑又是否合理呢？”</p>
</li>
<li><p>“痛苦可以起到保护作用，持续的抑郁也可以是一种逃避。她躲在痛苦砌成的屏障里可以很安全，不需要面对任何事情，也不需要和外面的世界有任何互动，这样她就能避免受到新的伤害。”</p>
</li>
<li><p>“要真心相信来访者在一个充满鼓励和接纳的环境中有能力获得成长”</p>
</li>
<li><p>“但同时，这些话也是一种防御措施，保护说话的人，不让别人的悲惨处境触发自己不安的情绪。像这样的客套话能让说这些话的人更容易应付眼前可怕的场面，却会让亲历逆境的人感到愤怒和被孤立。”</p>
</li>
<li><p>“他们可以说‘我为你感到难过。’也可以说‘有什么我可以帮忙的吗？’或是‘我感觉自己什么都帮不上，但还是很关心你。’”</p>
</li>
<li><p>“她发现，当人们自欺欺人地以为还拥有大把的时间，他们只会变得懒惰。”</p>
</li>
<li><p>“一开始她还会想，我为什么要浪费生命中宝贵的十分钟来刷推特呢？但转念又一想，为什么不呢，这是我喜欢做的事呀！”</p>
</li>
<li><p>“迈特的第一反应不是“我们会战胜病魔的！”也不是“噢，活见鬼！”而是“朱莉，我真的非常爱你。”这正是她最需要听到的。”</p>
</li>
<li><p>“人们真诚的、不做作的反应就是最好的反应。”</p>
</li>
<li><p>“不是寻求一个诊断，而是帮助我面对无法确诊的情况。”</p>
</li>
<li><p>“直觉告诉我两件事：我不再想要和他在一起了；然而，那些过往的记忆依然让我感到刺痛。不管他想说的是什么，我可能还是会感到不安，但我现在不希望被这些事打扰。我必须完成手头这本书，这样我才能有机会去写自己真正在乎的东西。”</p>
</li>
<li><p>“但如果事实并不是这样的呢？说不定事实并不像我的经纪人说的——我必须要写这本书，不然的话我就会万劫不复呢？从种种层面来看，我怀疑自己心中其实早已经有了答案。”</p>
</li>
<li><p>“这次是要给出版社的编辑写一封邮件：我想取消合约。”</p>
</li>
<li><p>78Note：已经写完3/4了还是放弃了 好有决心啊 是真的认识到自己想要什么了</p>
</li>
<li><p>“我并不想回到从前，但我乐意保存着这份记忆。”</p>
</li>
<li><p>“有的人期待心理治疗能帮助他们找到一种方法，让那些以前错待他们的人能听到他们的心声，然后那些人——大多是他们的爱人或亲戚——就会像接收到什么讯号一样，突然变成他们想要的样子。但事实上这种情况发生的机会微乎其微。在某一个时刻，做一个合格的成年人就意味着要对自己的人生负责，并且意识到需要自己为自己做决定了。你必须挪到前面的驾驶座来”</p>
</li>
<li><p>“你是在假装自己是个很酷的女孩，”我说，“仿佛没有渴望，没有感觉，随波逐流——但其实，你是有感觉的。”</p>
</li>
<li><p>“痛苦并没有高低等级之分——这也是我在心理治疗师的专业培训中学到的最重要的道理之一。”</p>
</li>
<li><p>“夫妻之间常常会遗忘这一点，而这往往会使他们更痛苦——你或许听过夫妻间这样的对话：“我已经照顾孩子们一天了。”“我的工作比你的工作要辛苦。”“但我比你孤独。”——在这场痛苦的较量中，究竟谁赢了、谁输了呢？”</p>
</li>
<li><p>“轻视问题是不会帮助你解决问题的，唯一的方法只有接受痛苦，并想办法解决它。你无法改变你否认或轻视的东西，而且，那些看起来微不足道的烦恼，背后必然藏着一些更深层的烦恼。”</p>
</li>
<li><p>“她花了一些时间才明白，她的幸福并不会削弱她对丈夫的爱，而是一种肯定。”</p>
</li>
<li><p>“再说，爱与丧失，怎么可能有一个终点呢？即使有，我们会愿意走到那一步吗？深爱的代价就是会更深刻地感受到悲伤和痛苦——但这也是一种恩赐，是鲜活的生命才能拥有的恩赐。如果我们不能再体会任何情感，那我们就该为自己的将死而悲伤了。”</p>
</li>
<li><p>“但他们最终会发现，你要把一种情绪调到静音状态，就必须把其他情绪也调到静音状态。你想要把痛苦调成静音？那你就不得不把快乐也调成静音。”</p>
</li>
<li><p>“无论是遇到毁灭性的灾难（比如自己变成残疾人，或是失去所爱的人），还是一些生活中的难题（离婚，或是生病）——都比自己预想中的要表现得好。人们以为自己不会再笑了，但他们还是会的。人们以为自己不会再爱了，但他们也还是会的。”</p>
</li>
<li><p>“无常。当人们处于痛苦之中的时候，他们常常会以为这种痛苦将永远持续下去。但实际上我们的感觉就像天气一样风云变幻，你在当下这一秒、这个小时、这一天里感到难过，并不意味着你在十分钟之后、在当天午后，或是下个星期里还会是那个心情。你所感受到的所有情绪——焦躁不安也好，兴高采烈也好，悲痛万分也好——变幻都在瞬息间。”</p>
</li>
<li><p>“约翰能在他的生活中正视盖比的真实存在，也就更能正视别人的真实存在。”</p>
</li>
<li><p>“我想得到同情，但如果你向我表示同情，我却会感到愤怒和无助，因为同情不能解决我最现实的问题，对我来说何用之有呢？”</p>
</li>
<li><p>“隐私是每个人在一段健康的感情中都会需要的心理空间；而秘密则源自羞愧，常常会腐蚀一段关系。”</p>
</li>
<li><p>“我们所有人都在以同样的速度穿越到未来——每小时六十分钟。</p>
</li>
<li><p>“那我猜我俩是时光穿梭中的同伴啦。”朱莉说。</p>
</li>
<li><p>“但当你耗费了大量时间，好不容易渡过生活中的一个难关，比起一句简单的“好啦，再次感谢你，后会有期”，一个正式的终结过程能让你有更多收获。”</p>
</li>
<li><p>“人们倾向于根据事情的结局来记住自己经历了什么，所以说终结过程对心理治疗至关重要。来访者原本可能一辈子都要面对消极的情绪、悬而未决的问题或是空虚的结局，但终结的过程能让他们拥有一个积极的结论。”</p>
</li>
<li><p>“就在这时，我突然想起那天早上接到过我母亲的来电，谈话内容令我非常沮丧。我这才意识到自己不是在对扎克生气，而是在对母亲生气。真是典型的情绪置换。”</p>
</li>
<li><p>“我们都会利用心理防御机制来对抗焦虑、挫折，或是某些我们无法接受的冲击，但最惊人的是，我们在运用这些防御机制的当下通常是无意识的。生活中有很多常见的例子，比如一个烟民感到胸闷气短，他会坚信这是因为天气太炎热，而不是由于吸烟——其实他是在运用“否认”这一防御机制。有的人也会用“合理化”的防御机制来给自己找借口，让自己接受一些丢脸的事情，例如在应聘失败之后，他会说自己一开始就没有很想要那份工作。有时也会出现“反向形成”的情况，对于无法接受的情感或冲击会采取完全相反的途径来释放：比如一个人明明不喜欢她的邻居，却特意要去和她交朋友；或是当一个虔诚的基督徒发现自己喜欢同性的时候，偏要去发表诋毁同性恋的言论。”</p>
</li>
<li><p>“一些防御机制被认为是原始的，而另一些防御机制则是成熟的。“升华”就是一种成熟的防御机制，可以帮助人们把潜在的有害冲动转化成不那么有害的表现，比如一个有暴力冲动的人选择去练拳击。或者甚至可以把不好的冲动转化成有建设性的结果，例如一个想要动刀伤人的人最后成了一名救死扶伤的外科主刀医生。”</p>
</li>
<li><p>“而“置换”——将情绪转移到一个较为安全的对象身上——则是一种神经性的防御机制，它并不是原始的，也不是积极成熟的。一个人即使被老板骂了也不敢吼老板，因为怕被炒鱿鱼，于是他回家可能就会对着自己的狗大吼大叫。同理，如果有人和母亲在电话里聊得不开心，或许就会将对母亲的怨气转嫁到儿子头上。”</p>
</li>
<li><p>“生活的本质是变化，而人类的本性是抗拒变化。”</p>
</li>
<li><p>“她甚至都没有对朱莉说“我早就跟你说过”。当朱莉打电话给母亲哭诉时，她母亲只是在电话那头静静地陪伴和倾听。”</p>
</li>
<li><p>“即使是在现实世界最完美的亲密关系中，你也难免会受到伤害，而且无论你有多么爱一个人，有时也还是难免会伤害到那个人，这并不是因为你想要伤害谁，而是因为我们都是人。”</p>
</li>
<li><p>“我们的生活中存在许多未知，即使不知道未来会带来什么，我还是要去面对它，处理好自己的担忧，把生活的重点放在当下。”</p>
</li>
<li><p>“充满爱意的亲密关系之所以伟大，就在于它有被修复的空间。治疗师们把这个过程称为“决裂和修复”。”</p>
</li>
<li><p>“你童年时遇到的感情裂痕没有得到爱的修补，那你日后就需要通过一些磨炼才能宽容地面对情感裂痕，让自己不再相信每一次破裂都预示着一段关系的终结，而是开始相信即使一段关系无法继续走下去了，裂痕还是可以愈合的。”</p>
</li>
<li><p>“有多少人不去尝试他们生命中真正想要的东西，就是因为如果离达成目标只差一点，会比一开始就不去尝试更令人痛苦。”</p>
</li>
<li><p>“如何用“有时”这个词来让自己获得心理平衡，让自己安于中庸，坚持活下去，不至于在一个极端和另一个极端之间来回摇摆。“有时”也帮助我们逃脱非黑即白的独断思维。”</p>
</li>
<li><p>“我们大多数人的心中都会有个“他们”，即使并没有谁在观察我们的生活，我们总以为他们在看。而真正关注我们的人——那些真的能看透我们的人——他们根本不在乎我们伪装的自己、那个我们表演出来的自己。”</p>
</li>
<li><p>“对很多人来说，探索自己思想和情绪的深处就像是要走入一条暗巷——他们不想独自前往。人们来做心理治疗就是为了能有人陪他们一起走这条路”</p>
</li>
<li><p>“有时我们明明拥有一把钥匙，能打开更好的未来，但就是需要有人提醒我们一下，钥匙被我们遗忘在哪儿了。”</p>
</li>
<li><p>“我们都是在和别人的关系中成长的。每个人都需要听到另一个人的声音对他说“我相信你。我能在你身上看到连你自己都没看到的可能性。我能预见到一些变化即将发生。”在心理治疗中我们会说：“让我们来重新编写你的故事吧。”</p>
</li>
<li><p>“我们是在人与人的关系中成长的。”</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Literature</category>
      </categories>
      <tags>
        <tag>书评</tag>
      </tags>
  </entry>
  <entry>
    <title>《亲密关系》读书笔记</title>
    <url>/2024/03/16/%E3%80%8A%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-人际关系的构成"><a href="#1-人际关系的构成" class="headerlink" title="1 人际关系的构成"></a>1 人际关系的构成</h2><ol>
<li><p>   表1.1　巴塞洛缪提出的四种依恋类型</p>
</li>
<li><p>   不再简单地把人们分为安全、痴迷、恐惧或疏离四种类型，而是给出人们在忧虑和回避两个维度中的相对位置。 图1.5　依恋的双维度图</p>
</li>
<li><p>   表1.3　伴侣怎么看我</p>
</li>
<li><p>   亲密关系和泛泛之交至少在六个方面存在程度差异：了解（knowledge）、关心（care）、相互依赖性（interdependence）、相互一致性（mutuality）、信任（trust）以及承诺（commitment）。</p>
</li>
<li><p>   首先，亲密的伴侣彼此间有着广泛而私密的了解。他们熟知彼此的经历、爱好、情感和心愿，而且一般不会把这些信息透露给其他人。亲密的伴侣关心对方，彼此能从对方身上感受到更多的关爱。如果人们认为自己的伴侣了解、理解并欣赏自己，其亲密程度就会增加</p>
</li>
<li><p>   亲密伴侣的生活也是交织在一起的：一方的行为会影响另一方的行为目标和行动能力</p>
</li>
<li><p>   亲密伴侣的相互依赖性是指他们彼此需要的程度和影响对方的程度，这种相互依赖是频繁的（经常影响彼此）、强烈的（彼此都有显著的影响）、多样的（以多种不同的方式影响彼此）和持久的（彼此影响的时间很长）</p>
</li>
<li><p>   使得亲密关系易于保持的另一个特点是信任，期望对方会善待和尊重自己</p>
</li>
<li><p>   最后，亲密伴侣通常会承诺他们的亲密关系，希望他们的关系能持续到地老天荒，并为此不惜投入大量的时间、人力和物力</p>
</li>
<li><p>   一般而言，最令人满意和最有意义的亲密关系应当包括亲密关系的所有六个特征（Fletcher et al.，2000a）。但亲密关系如果只有部分特征，亲密程度就会减弱</p>
</li>
<li><p>   我们需要记住人际关系最简单、最基本的特点是：种类多样，规格不齐。这种多样性使人际关系非常复杂，也使人际关系魅力无穷。</p>
</li>
<li><p>   个体需要的亲密关系无需太多，几个便可。归属需要得到满足后，我们建立人际关系的内驱力就会降低（因而人际关系的质量比数量更重要）</p>
</li>
<li><p>   归属需要也和我们伴侣是谁并无太大的关系，只要他们能给予我们持续的关爱和包容，我们的归属需要就能得到满足。因而，即使一段重要的亲密关系终结，我们也往往能找到替代伴侣（尽管新人和旧人有很大的差别），而且能满足我们的归属需要</p>
</li>
<li><p>   如果我们的生命缺乏亲密感情，我们就很容易迷失人生方向，患上身心疾病</p>
</li>
<li><p>   文化标准是人们建立人际关系的基石（Acitelli et al.，2011），它影响着人们对人际关系的期望，限定了正常的人际关系模式</p>
</li>
<li><p>   首先，同居情侣彼此的承诺一般不如已婚夫妻，毕竟同居情侣还有选择的机会（Wiik et al.，2009）。所以同居情侣比已婚夫妻经常面临更多的问题和不确定性（Hsueh et al.，2009）。他们往往会遭遇更多的冲突（Stanley et al.，2010）、嫉妒（Gatzeva &amp; Paik，2011）、出轨（Thornton et al.，2007）和身体攻击（Rhoades et al.，2009a），所以同居与婚姻相比，往往充满变数，前景难料。故而，人们同居的时间越长，对婚姻的热情越低，越容易离婚</p>
</li>
<li><p>   情侣如果已经订婚，准备结婚，这些有害的同居效应相对轻微，但即使伴侣已经订婚，未婚同居也有一定的危害性（Jose et al.，2003）。故而，尽管同居很流行，人们普遍把同居当成“试婚”，但这是越来越少的人结婚，越来越少的婚姻能持续（与1960年代相比）的原因之一</p>
</li>
<li><p>   社会工业化程度越高、越富足，就越能接纳单身、包容离婚和支持晚婚（South et al.，2001），而全世界的社会经济发展水平都提高了。教育和财政资源的充裕，足以让人们变得更为独立，与过去相比，女性尤其更可能不结婚（Dooley，2010）。而最近全球经济的衰退也有明显的影响。随着更多的情侣为节省金钱生活在一起，同居人数明显增加（Yen，2010c），但结婚率在赤贫人群中却在下降，没有稳定的收入人们并不愿意结婚（Yen，2010b）。</p>
</li>
<li><p>   近年来，西方文化的主要特征——个人主义（支持自我表现，重视个人成就）也变得愈发突出（Twenge &amp; Campbell，2010）。（比如，美国人现在更可能给自己的孩子取不常见的名字以引人注目[Twenge et al.，2010]。）可以想见，这种对自我实现的重视会让我们期望从亲密关系中获取比上一辈更多的东西——更多的快乐和享受，更少的麻烦和付出</p>
</li>
<li><p>   东方文化更倡导集体主义的自我感，人们与家庭和社会团体的联系更为紧密。集体文化国家（如日本）的离婚率比美国低得多（Cherlin，2009）。</p>
</li>
<li><p>   安全型的人在与他人亲密接触的过程中非常安心，不会担心别人会苛刻对待自己；因而能积极快乐地寻求亲密、相互依赖的人际关系。相形之下，其他三种类型的人充满焦虑和不安，在亲密关系中如坐针毡。痴迷型的人渴望亲密接触但害怕被拒绝。疏离型的人并不担心被拒绝，但却不喜欢亲密接触。至于恐惧型的人则两者兼而有之，在亲密关系中坐立不安又担心亲密关系不能长久（见图1.5）</p>
</li>
<li><p>   依恋类型看似是人们对人际关系的适应行为，这种适应大部分是从与他人交往的经验中习得的。我们带入新的人际关系的癖好和观点，部分来自于与以前伴侣的交往经历，这是人际关系适应行为最好的例证。</p>
</li>
<li><p>   依恋类型受到个体与生俱来的特质影响，基因塑造了我们的依恋类型（Picardi et al.，2011）。</p>
</li>
<li><p>   然而，我们的经验在塑造之后的依恋关系上甚至起着更大的作用</p>
</li>
<li><p>   然而，我们并不会被动地受童年经验的束缚，因为依恋类型不断地受到我们成人后经历的影响（Zhang，2009）。依恋类型既然是习得的，就可能发生变化。随着时间的推移，依恋类型的确会发生新的改变</p>
</li>
<li><p>   在两年之内，足有三分之一的依恋类型可以发生实质性变化</p>
</li>
<li><p>   尽管依恋能改变，但它们一旦确立后，既稳定又持久，并影响人们新建立的人际关系，加强已有的行为倾向</p>
</li>
<li><p>   如果没有大起大落的新经历，人们的依恋类型可以持续数十年</p>
</li>
<li><p>   所以，我们对紧密关系性质和价值的总看法，看来是由我们体验到的亲密关系的经验所决定的。我们幼时对人际交往价值和他人是否可信的观念，起源于我们与照料者的交往，由于运气的好坏，我们就此走向了信任或恐惧的亲密关系之路。这段历程永远不会停止，同行者随后给予的阻碍或帮助会改变我们亲密关系的方向和进程。视乎人际交往经验的不同，我们习得的依恋类型既可随时间发生变化，也可永久保持稳定</p>
</li>
<li><p>   要阐明个体差异如何影响亲密伴侣的行为。我们将重点考察四种不同类型个体差异：性别差异、性认同差异、人格差异和自尊差异</p>
</li>
<li><p>   由于两性之间的共性如此之多，所以在人际关系科学研究的许多维度和方面，其相似性远大于差异性</p>
</li>
<li><p>   亲密关系中的性别差异并不像一般人认为的那般重要和有影响</p>
</li>
<li><p>   个体差异才是影响人际交往的更重要的力量。无论男女，人们在很多方面彼此各异（例如依恋类型），这些差异一般都比性别差异更能影响人际关系。</p>
</li>
<li><p>   在双性化、跨类型和未分化各类型内的男女比例大体相当，所以就性别差异而言，把两性视为具有不同特质的完全不同的两类人，既简单化又不准确（Bem，1993）。</p>
</li>
<li><p>   剽悍大丈夫和温柔小女人因为在处事风格和才干能力上差别很大，他们往往并不如那些不太传统、不太符合性别刻板印象的夫妇幸福快乐</p>
</li>
<li><p>   表达性低的人（不怎么热情、温柔、敏感）不太容易表现出热情和温柔；也不怎么充满深情</p>
</li>
<li><p>   因此，屈从于传统的性别角色对男人是一种伤害，剥夺了他们本可成为更好丈夫的技能。</p>
</li>
<li><p>   低工具性的人（缺乏自信和个人魄力的人）往往不如那些高工具性的人（任务导向的技能高的人）自尊程度高和适应能力强</p>
</li>
<li><p>   人格影响人际关系的程度远大于人际关系影响人格的程度（Asendorpf &amp; Wilpers，1998）。例如，人们是否会结婚，似乎有部分是由基因决定的</p>
</li>
<li><p>   人际关系对我们即将考察的最后一个个体差异的影响可能更大，这就是：人际交往中的自我评价</p>
</li>
<li><p>   对自我的评价构成了自尊（selfesteem）。如果对自己的能力和特质持正面评价，自尊水平就高；如果怀疑自己，自尊水平就低</p>
</li>
<li><p>   如果他人喜欢我们，我们就喜欢自己；如果他人积极地对待我们并看重与我们的关系，自尊水平就高。然而，如果我们不能吸引别人的关注——如果别人似乎并不在意我们是否会介入他们的生活——自尊水平就低。根据社会测量理论，自尊就是以这种方式运作的，因为自尊是满足我们归属需要演化而来的机制</p>
</li>
<li><p>   自尊就成为心理测量器，提醒个体警惕他人拒绝接纳自己，他人的厌恶和冷漠会逐渐使个体讨厌自己</p>
</li>
<li><p>   我们从他人那里感受到的尊重明显地影响到随后的自我评价</p>
</li>
<li><p>   进一步的证据是，我们人类是高度社会化的动物：如果他人不喜欢我们，我们要喜欢自己非常困难（的确，这样做很不现实）。大多数情况下，如果不能从他人那里获得足够的接纳和欣赏，长期处在低自尊的人就会形成负面的自我评价</p>
</li>
<li><p>   一系列令人信服的研究发现，低自尊的人有时低估伴侣对他们的爱，以致损害亲密关系</p>
</li>
<li><p>   低自尊者“即使处在亲密关系之中也往往（毫无根据地）认为伴侣对自己的感情非常不可靠”</p>
</li>
<li><p>   当亲密关系出现挫折时，自我评价高的人却能拉近和伴侣的距离，努力修复亲密关系，低自尊的人则防御性地把自己隔离起来，生闷气，乱搞一通（Murray，Bellavia et al.，2003），还觉得自己更加糟糕</p>
</li>
<li><p>   高自尊的人因为对伴侣给自己的爱恋和关心充满信心，即使亲密关系出现困难也能和伴侣拉近距离。相反，低自尊的人则持续地怀疑伴侣对自己的关心和信赖，所以一旦关系变糟就从伴侣身边离去，以保护自己免受伤害</p>
</li>
<li><p>   我们都需要在与他人的联系和自我保护间保持平衡，但低自尊的人总把他们脆弱的自尊心置于亲密关系之上。</p>
</li>
<li><p>   可以这样说，我们对自己的认识来自于与他人的人际关系，并影响着人际关系的后续发展</p>
</li>
<li><p>   人际关系常常大于它各部分相加的总和。人际关系由每一个参与者的经历和才能组合而成（Robins et al.，2000），这些总和也许比构成它们的个体简单相加要大得多</p>
</li>
<li><p>   互动的结果或许令人沮丧，或许令人满意。但这种可能的互动结果总是让人着迷，这就是人际关系的构成。</p>
</li>
</ol>
<h2 id="2-吸引力"><a href="#2-吸引力" class="headerlink" title="2 吸引力"></a>2 吸引力</h2><ol start="54">
<li><p>   根据伯纳德·默斯坦（Bernard Murstein）的刺激—价值观—角色（stimulus-value-role）理论（Murstein，1987），我们会从伴侣那里获得三种不同的信息，它们会影响亲密关系的发展。当伴侣第一次相遇，彼此的吸引力主要建立在“刺激”信息基础上，包括年龄、性别、长相等明显的外部特征。随后就进入“价值观”阶段，吸引力取决于彼此态度和信念的相像程度，人们开始了解彼此是否喜欢同样的比萨、电影和度假方式（见图3.8）。再往后，“角色”的相容性才变得更重要，此时伴侣们最终发现他们在养育方式、事业、居家等基本的生活要务上是否一致。问题是伴侣们对彼此的政治观点、娱乐格调可以十分满意，但可能根本意识不到对于定居在什么地方、是否生养子女、生养几个存在根本的分歧。有时候重大的差异只有在婚后才凸现出来；尽管存在这些差异，夫妻仍可能生活在一起，但这并不是因为相异而相吸。</p>
</li>
<li><p>   如果可以选择，大多数人都期望伴侣有以下的特点： ● 热情和忠诚，值得信赖、亲切友善、给予支持、善解人意； ● 吸引力和活力，长相俊美、性感、外向； ● 社会地位和资源，经济宽裕、生活安心。</p>
</li>
<li><p>   但吸引力还受到很多不易觉察的因素影响，这些因素只与人们外在的友善、俊美的长相或怡人的个性有间接的关联</p>
</li>
<li><p>   正如我们所看到的，人们常常被那些能为将来的后代提供生存优势的人所吸引，即使他们根本还没想过养育孩子的问题</p>
</li>
<li><p>   当人们面对面地交往时（在身体上，而且在心理上都更接近），这样的人际关系奖赏价值更高</p>
</li>
<li><p>   多数情况下，友谊和爱情都源自与身边人的交往。</p>
</li>
<li><p>   空间上的临近和人际吸引之间有着显而易见的联系，一米左右的距离就会造成很大的差别</p>
</li>
<li><p>   住处较近的人比房间相隔较远的人更有可能成为朋友</p>
</li>
<li><p>   显然，即使很小的距离对我们的人际关系也有着重大的影响，对此我们常常认识不足。一旦我们确定了居住、工作或上学的准确地点，我们大体上也就决定了哪些人将会成为我们生命中最重要的人</p>
</li>
<li><p>   在文字或声音中表达出的爱意远不如脸颊上真实的一吻那样打动人。因而，分居两地的亲密关系一般不如朝夕相伴的亲密关系令人满意</p>
</li>
<li><p>   重复地接触他人（甚至只要看到他人照片）通常能增加我们对他们的喜欢程度，而不会导致厌烦，此即曝光效应（mere exposure effect） [1] （Zajonc，2001）。即使我们从来没有与陌生人说过话，我们仍倾向于喜欢见过很多次的面孔，而非不熟悉的面孔</p>
</li>
<li><p>   熟识能增加吸引力，但过度接触则未必</p>
</li>
<li><p>   当然，俊美之人给陌生人的总体印象毫无疑问好过长相一般的人，这一点在世界各国应该都是一样的</p>
</li>
<li><p>   在职场中，貌美之人比一般长相的人工资更高、晋升更快。平均而言，与中等相貌之人相比，貌美的雇员多赚5%，而丑陋的家伙少挣9%</p>
</li>
<li><p>   不过，并不见得总是情人眼里出西施，世界各地的人对于美丑的判断标准还是有相当的一致性</p>
</li>
<li><p>   外貌吸引力或许是影响男女之间最初喜欢彼此的最重要因素</p>
</li>
<li><p>   长相平庸的男人与英俊潇洒的男人相比，与女性任何形式的交往都更少。准此而论，长相吸引力对男人社交活动的影响要甚于女人</p>
</li>
<li><p>   长相的吸引力甚至还能解释影响人们一生适应能力和幸福生活变量的10%</p>
</li>
<li><p>   在可以选择的恋爱对象很多时，长相吸引力可能更为重要。由于有选择余地，人们理所当然会更偏爱有吸引力的对象。然而，在挑选机会不多的地方，长相则不太重要</p>
</li>
<li><p>   人们或许都想找到俊美的伴侣，但最终结果通常是与自己容貌相当的人配成对（Hitsch et al.，2010）。已确定爱情关系的伴侣，他们的长相吸引力往往是类似的；即他们的容貌是相匹配的。这种现象称为匹配</p>
</li>
<li><p>   这表明，即使每个人都希望自己的伴侣长相俊美，但只有那些容貌也俊美的人才能得偿所愿。长相确实俊美的人并不愿意和容貌平庸的家伙成为伴侣，同样我们普通人也不会愿意和长相“差于我们”的伴侣长相厮守</p>
</li>
<li><p>   礼尚往来：喜欢那些喜欢我们的人</p>
</li>
<li><p>   对未来伴侣的期望值=伴侣的外表吸引力×伴侣接纳自己的可能性</p>
</li>
<li><p>   最吸引人的伴侣是长相还过得去，也很有可能接纳我们的人（之所以愿意接纳我们或许是因为他们也不太俊美）</p>
</li>
<li><p>   高适配价值的人，有很多热烈的追求者，因此他们能够坚持自己对伴侣的高要求。他们的确能实现</p>
</li>
<li><p>   于是她们可能重新调整自己的适配价值，并对他人接纳自己的可能性重新做出估计</p>
</li>
<li><p>   急于要与遇见到的每个人都约会的人较之那些更有分辨力、更挑剔的人，配对成功的次数也更少；对每个人都说“yes”的人，人们回馈的“yes”却没几个</p>
</li>
<li><p>   一味故作清高没有什么作用。真正有用的是选择性地故作清高——也就是说，除了你想吸引的人之外，任何人想要得到你都是可望而不可即的</p>
</li>
<li><p>   不过，当其他条件相同时，不喜欢那些欣赏我们的人也难</p>
</li>
<li><p>   相似性：喜欢与我们相像的人</p>
</li>
<li><p>   遇上喜欢我们的人具有奖赏意义。如果能遇上和我们恰好相像的人，与我们有同样的背景、兴趣和品位，也令人感到愉悦快乐</p>
</li>
<li><p>   伴侣间态度相同的程度和彼此的吸引力有着简单直接的关联：共同点越多，彼此越喜欢</p>
</li>
<li><p>   注意曲线的走势，即使相像达到一定程度之后，吸引力并不会下降，所以“共同点太多”并没有什么危险</p>
</li>
<li><p>   因为这样的伴侣实际上在更广泛的意义上进行了匹配，用长相换金钱，反之亦然。他们或许有着不同的优势，但在人际市场上都在寻找与自己身价整体相当的伴侣。人们往往和有着类似适配价值的人结合（Brase &amp; Guy，2004），虽然他们彼此能给予对方的特定奖赏或许存在很大的差异。</p>
</li>
<li><p>   也许看上去不太浪漫，但名望、财富、健康、才能和长相等等都像商品一样，能用来吸引心仪的伴侣。如果我们把匹配视为广泛的过程，不仅涉及长相吸引力，而且包括各种其他长处和特质，那么很显然，人们总是会与旗鼓相当的人配成一对，同性相吸（相类似的人彼此吸引对方）就发生了</p>
</li>
<li><p>   而且，女性对伴侣年龄的偏爱不会随着年龄增加而发生变化；女人终其一生都喜欢嫁给比自己略大几岁的男人</p>
</li>
<li><p>   如果“相异”看起来相互吸引，也许人们是在用一种优势交换伴侣的另一种优势，以便得到伴侣类似的社会地位，所以正是他们类似的适配价值，而非任何外在的“相异”，使得他们彼此相吸</p>
</li>
<li><p>   然而随着时间的推移，学生之间实际的相像在友谊发展的过程中起着越来越大的作用。当他们有了充分了解后，参与者显然喜欢那些真正与他们相像的人，尽管在一开始并不是这样</p>
</li>
<li><p>   令人厌烦的特征并非隐而不显的秘密，只不过人们领悟不到自己的判断会随着时间发生改变</p>
</li>
<li><p>   这种把伴侣构造成美满形象的倾向有利于维持亲密关系</p>
</li>
<li><p>   知觉到的相像的确能把人们聚在一起，至少能维持一段时间，即使他们之间的差异在旁观者眼里非常明显</p>
</li>
<li><p>   相像起作用的另一微妙之处在于，那些我们渴望成为的人对我们有吸引力</p>
</li>
<li><p>   最有吸引力的伴侣仍然是那些在很多方面和我们相像，但又拥有我们通过努力就能实现的理想特征的人（Figueredo et al.，2006）。这样的人根本不是与我们相左的“异性”。但是只要差距不是过大，或许我们更喜欢自己想要成为的那种理想式的人物，而不是与我们目前非常相像的人</p>
</li>
<li><p>   差异可能随着时间而减少</p>
</li>
<li><p>   而且，亲密关系还能使人发生改变（Ruvolo &amp; Ruvolo，2000）。随着时间的推移，夫妻双方在面临各种事件时体验到的态度和情绪反应会越来越相似</p>
</li>
<li><p>   夫妻如果因其他原因待在一起，某些差异会逐渐消退。并且久而久之，新发现的相像有助于伴侣们聚在一起，即使他们最初共同点并不多</p>
</li>
<li><p>   如果伴侣在一些重要的议题上能和我们保持一致，将特别具有奖赏价值</p>
</li>
<li><p>   因而，相异并不相吸，而且如果伴侣双方都不太看重这种差异的话，相异或许一点影响都没有</p>
</li>
<li><p>   即互补性（complementarity），它能弥补我们的不足，因此具有吸引力。大多数互补行为其实是相似的：比如热情随和的人在得到热情幽默的回报时最为快乐。不过，互补性更确切的形式涉及伴侣双方的不同行为：支配与顺从（Markey et al.，2010）</p>
</li>
<li><p>   感到最多爱意和最少冲突的伴侣是那些在热情上相似而支配欲上不同的伴侣（Markey &amp; Markey，2007）。如果伴侣一方要在亲密关系起带头作用，当另一方愿意顺从时才最快乐</p>
</li>
<li><p>   我们不应过分强调这种互补性</p>
</li>
<li><p>   人们会更加喜欢性格相似的人，而非性格不同的人，即使支配欲很强的人也更喜欢有主见的家伙，而非长期服从的懦夫</p>
</li>
<li><p>   但事实上我们的确是物以类聚、人以群分的。相像具有奖赏意义，而相异则没有。</p>
</li>
<li><p>   所有这些特点都是值得拥有的，但它们并非同等重要，其优先性取决于我们追求的是较随便、短期的露水恋情还是忠诚持久的浪漫爱情。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Literature</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>加密算法逆向总结</title>
    <url>/2023/05/10/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="用于逆向的加密算法"><a href="#用于逆向的加密算法" class="headerlink" title="用于逆向的加密算法"></a>用于逆向的加密算法</h2><ol>
<li><strong>简单加密算法逆向分析</strong><br>异或加密<br>仿射加密</li>
<li><strong>对称加密算法逆向分析</strong><br>RC4流加密<br>DES对称加密</li>
<li><strong>单向散列算法逆向分析</strong><br>MD5哈希函数<br>SHA哈希函数</li>
</ol>
<p><strong>首先要对这些算法的加密原理十分了解</strong>——参考现代密码学笔记</p>
<h2 id="逆向方法"><a href="#逆向方法" class="headerlink" title="逆向方法"></a>逆向方法</h2><h3 id="可以直接复用源程序进行动态调试获得flag的"><a href="#可以直接复用源程序进行动态调试获得flag的" class="headerlink" title="可以直接复用源程序进行动态调试获得flag的"></a>可以直接复用源程序进行动态调试获得flag的</h3><p>加解密算法完全相同的是可以复用的</p>
<p>包括：<strong>异或加密 仿射加密 RC4流加密</strong></p>
<h3 id="其余的算法加解密不相同则只能使用静态调试写脚本解出flag"><a href="#其余的算法加解密不相同则只能使用静态调试写脚本解出flag" class="headerlink" title="其余的算法加解密不相同则只能使用静态调试写脚本解出flag"></a>其余的算法加解密不相同则只能使用静态调试写脚本解出flag</h3><p>包括 <strong>DES AES MD5 SHA256</strong></p>
<h2 id="基本逆向思路——静态调试"><a href="#基本逆向思路——静态调试" class="headerlink" title="基本逆向思路——静态调试"></a>基本逆向思路——静态调试</h2><p>首先先打开程序，查看程序提示的字符串，以及输入随意值之后的程序提示</p>
<p>根据程序的字符串提示，在IDA Pro中用shift+F12找到字符串，再通过X查看到交叉引用，再在这个字符串的上文定位到比较函数</p>
<p>先看main函数，分析main函数的执行过程，然后找到加密函数，根据加密函数分析出对应的加密算法<br>（F5查看反汇编或者直接看汇编）</p>
<p>然后再在函数中找到找到所需要的关键信息如<strong>密钥 密文等</strong></p>
<p>最后再根据加密算法的原理写出<strong>加密算法的解密脚本</strong>或者是利用动态调试修改输入的字符串直接获得flag</p>
<h4 id="PS：使用动态调试直接复用加密函数解密"><a href="#PS：使用动态调试直接复用加密函数解密" class="headerlink" title="PS：使用动态调试直接复用加密函数解密"></a>PS：使用动态调试直接复用加密函数解密</h4><p><strong>首先得确保加密算法的加解密过程是一致的才可以使用！！！</strong></p>
<p>首先先用静态调试找到密文和加密函数的地址</p>
<p>在x32dbg中定位到加密函数，找到输入的字符串地址，使用二进制编辑修改输入的字符串为密文，即可得到flag</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>汇编逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>加密算法逆向实践</title>
    <url>/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><strong>问题-1</strong>：找到开头“This program cannot be run …” 这个字符串的内存起始地址（即字符串的指针），并准确计算该字符串的长度；</p>
<p><strong>问题-2</strong>：需要结合具体的加密操作逻辑，说明所发现的加密算法。</p>
<p>输入正确 flag 后的运行截图如下：</p>
<img lazyload src="/images/loading.svg" data-src="https://fileucloud.bupt.edu.cn/bupt/upload/20230422/6b6a1856b38e98db2bb0f0d80a5fe12b.png" alt="img" style="zoom:50%;">

<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p>首先找到——FOR FUN—–的位置，使用IDA Pro</p>
<p>Shift+F12进行字符串定位</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230428111417280.png" class title="image-20230428111417280">

<p>追入</p>
<p>发现有一个%s夹在两行———-中间，可以判断这个输入的%s就是“This program cannot be run …”</p>
<p>查看main函数</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230428111553144.png" class title="image-20230428111553144">

<p>发现在调用<code>printf</code>函数时输入了一个参数，其地址为<code>40004Eh</code></p>
<p>==因此我们就找到了字符串“This program cannot be run …”的起始地址<code>40004Eh</code>==</p>
<p>接下来找字符串长度，此时使用x32dbg进行动态调试</p>
<p>因为我们已经知道了该字符串的起始地址，因此我们可以在程序运行到Entrypoint时直接定位到该字符串：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230511132011451.png" class title="image-20230511132011451">

<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230511132055593.png" class title="image-20230511132055593">

<p>==数一数字符串长度 可知该字符串长度是43个字节==</p>
<h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>首先发现exe文件在输入错误的flag之后直接结束或者退出了，因此我们只能直接看汇编代码对该程序进行研究</p>
<p>首先看提示的字符串” ———FOR FUN———-“以及”Please input your flag below:”，可以从这两个提示字符串入手研究该程序</p>
<p>先看main函数的整体结构：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230503144347708.png" class title="image-20230503144347708">

<p>首先调用了函数<code>sub_402320</code>，随后输出提示信息————–FOR FUN——————，接着连续调用了三个函数，因此可以从一个一个函数入手研究这个程序</p>
<h4 id="第1个函数"><a href="#第1个函数" class="headerlink" title="第1个函数"></a>第1个函数</h4><p>发现在调用<code>printf</code>函数输出——-FOR FUN——–之前调用了一个函数<code>sub_402320</code></p>
<p>追入该函数查看，利用IDA Pro的反汇编功能研究该函数：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230501231323379.png" class title="image-20230501231323379">

<p>解读这段反汇编代码：这段代码的功能是执行一个函数表中的一系列函数，并在程序退出时再次执行一个特定函数。它的基本思路是：如果全局变量dword_407080的值为0，则将其设为1，然后执行一个函数表中的一系列函数，最后调用sub_4014C0函数，该函数的参数是sub_402290函数的地址。如果dword_407080的值不是0，则直接返回它（result）。</p>
<p>具体来说，下面是每个步骤的解释：</p>
<ol>
<li><p>result = dword_407080;<br>将dword_407080的值赋给result变量。</p>
</li>
<li><p>if (!dword_407080)<br>如果dword_407080的值为0，执行以下代码块，否则跳过该代码块。</p>
</li>
<li><p>dword_407080 = 1;<br>将dword_407080的值设为1。</p>
</li>
<li><p>for (i = 0; dword_4033E0[i + 1]; ++i)<br>查找函数表dword_4033E0中最后一个函数的索引。该函数表是一个由地址组成的数组，最后一个地址为0，以便循环能够停止。</p>
</li>
<li><p>for (; i; –i)<br>执行函数表dword_4033E0中的函数，从最后一个函数开始一直到第一个函数。</p>
</li>
<li><p>((void (*)(void))dword_4033E0[i])();<br>将函数表dword_4033E0中第i个元素的地址强制转换为void (*)(void)类型的函数指针，然后执行该函数。</p>
</li>
<li><p>return sub_4014C0((_onexit_t)sub_402290);<br>调用sub_4014C0函数，并将sub_402290函数的地址转换为_onexit_t类型的函数指针作为参数。_onexit_t是一个函数指针类型，它指向一个函数，该函数在程序退出时执行。</p>
</li>
<li><p>return result;<br>如果dword_407080的值不为0，则直接返回该值。</p>
</li>
</ol>
<p><u><strong>这段函数的功能是调用函数表</strong></u></p>
<h4 id="第2个函数"><a href="#第2个函数" class="headerlink" title="第2个函数"></a>第2个函数</h4><p>追入<code>sub_4015C0</code>这个函数</p>
<p>查看其汇编代码，这个函数的功能上，首先输出了提示信息：“Please input your flag below:”</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230503143435814.png" class title="image-20230503143435814">

<p>接下来函数调用了scanf函数接收我们输入的flag：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230503143727587.png" class title="image-20230503143727587">

<p>可以看到这个scanf函数是用于接收一个长度不小于9个字符的字符串输入，**<code>byte_407444</code>就是输入的字符串**</p>
<p>接下来，该函数计算了输入的字符串长度，并将其与存储在内存地址 <code>byte_4040E4</code> 处的值进行比较：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230503145208387.png" class title="image-20230503145208387">

<p>可以看到，如果输入的字符串长度不相等，则跳转到loc_40160F处，loc_40160F的功能是恢复函数栈寄存器并退出程序；如果相等则返回</p>
<p>因此我们需要知道byte_4040E4的值，追入查看byte_4040E4</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230503145115142.png" class title="image-20230503145115142">

<p>可以看到<code>4040E4</code>的值是9，也就是说，输入的字符串长度应当是<strong>9</strong></p>
<p>因此，<strong>第二个函数的功能是输出提示信息，接收输入的字符串并将输入字符串的长度与预设的长度值9进行比较</strong>，如果长度不相等则退出程序</p>
<h4 id="第3个函数"><a href="#第3个函数" class="headerlink" title="第3个函数"></a>第3个函数</h4><p>回到main函数，继续研究下一个函数<code>sub_401770</code></p>
<p>查看其反汇编函数：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230503150657627.png" class title="image-20230503150657627">

<p>可以看到，本段代码的功能是对字符串进行合法性判断</p>
<p>以下是代码注释：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; (<span class="type">unsigned</span> __int8)byte_4040E4 != i; ++i) <span class="comment">// 对每个字符，循环直到字符为0x00</span></span><br><span class="line">{</span><br><span class="line">  v1 = (<span class="type">unsigned</span> __int8)byte_407444[i]; <span class="comment">// 取出当前字符</span></span><br><span class="line">  v2 = <span class="number">48</span>; <span class="comment">// v2 为 ASCII 码 48，即字符 '0'</span></span><br><span class="line">  <span class="keyword">while</span> (v1 != v2 &amp;&amp; byte_407444[i] != <span class="number">95</span>) <span class="comment">// 如果当前字符不是 '0' 且不是下划线 '_'</span></span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> (++v2 == <span class="number">58</span>) <span class="comment">// 如果 v2 递增后等于 ASCII 码 58，即字符 '9'+1，说明当前字符为大写字母</span></span><br><span class="line">    {</span><br><span class="line">      v3 = <span class="number">65</span>; <span class="comment">// v3 为 ASCII 码 65，即字符 'A'</span></span><br><span class="line">      <span class="keyword">while</span> (v1 != v3) <span class="comment">// 如果当前字符不是大写字母</span></span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span> (++v3 == <span class="number">91</span>) <span class="comment">// 如果 v3 递增后等于 ASCII 码 91，即字符 'Z'+1，说明当前字符不合法</span></span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">100876</span>); <span class="comment">// 结束程序并返回错误码 100876</span></span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ((<span class="type">unsigned</span> __int8)byte_4040E4 - <span class="number">1</span> == i) <span class="comment">// 如果遍历完字符串后还未结束循环，则结束循环</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> sub_401700(); <span class="comment">// 调用 sub_401700() 函数并返回结果</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>因此，<strong>这个函数的目的是遍历一个字符串，并检查字符串中的每个字符是否是数字、大写字母或下划线，如果不是，则结束程序并返回错误码。</strong></p>
<h4 id="第3个函数调用的函数"><a href="#第3个函数调用的函数" class="headerlink" title="第3个函数调用的函数"></a>第3个函数调用的函数</h4><p>如果字符串合法，则会跳转到<code>sub_401700</code>我们追入这个函数查看</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230503151526462.png" class title="image-20230503151526462">

<p>查看其反汇编代码，发现这个函数就是<strong>关键的进行字符串比较的函数</strong></p>
<p>这个函数的功能是将输入的字符串<code>byte_407444</code>与 <code>a1234567890Abcd</code> 字符串数组进行比较，如果相等，则将 <code>dword_4040C0</code> 数组中对应的元素设置为 <code>v3</code>并返回</p>
<p>此时我们发现，关键的数组出现了，就是这个<code>a1234567890Abcd</code></p>
<p>追入查看：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230503152011515.png" class title="image-20230503152011515">

<p>它的值是：<code>1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ</code></p>
<h4 id="第4个函数"><a href="#第4个函数" class="headerlink" title="第4个函数"></a>第4个函数</h4><p>回到main函数，继续查看第四个函数：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230503152426933.png" class title="image-20230503152426933">

<p>看到：<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230503153124833.png" class title="image-20230503153124833"></p>
<p>发现这里对字符串进行了<strong>仿射加密</strong>：对输入的明文字符串利用<code>a1234567890Abcd</code>的字符集<code>1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ</code>进行仿射加密</p>
<p>其中仿射加密的密钥<code>a=v6=9, b=v1=3</code></p>
<h4 id="第4个函数调用的函数"><a href="#第4个函数调用的函数" class="headerlink" title="第4个函数调用的函数"></a>第4个函数调用的函数</h4><p>随后调用了一个函数<code>sub_40210C</code>，追入查看，并定位到关键代码段：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230503153420750.png" class title="image-20230503153420750">

<p>这段代码中：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230503153741551.png" class title="image-20230503153741551">

<p>将字符串合并为了一个长度为32字符长度的定长字符串，因此我们可以判断这个函数是一个<strong>哈希算法</strong>，用以输出定长的256位散列值</p>
<p>随后定位到前面的关键函数<code>sub_401A14</code>，推测这个函数就是用来进行哈希的函数，追入查看：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230503154219688.png" class title="image-20230503154219688">

<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230503154238457.png" class title="image-20230503154238457">

<p><strong>可以判断这是一个MD5加密算法！！</strong></p>
<p>因此函数<code>sub_40210C</code>的功能是将<code>Block</code> 变量分成多个32 字节的块，然后每个块都通过 <code>sub_401A14</code> 函数计算出其哈希值。最后，将所有块的哈希值合并成一个 128 位的哈希值，并将其转换为字符串格式写入 <code>Buffer</code> 变量中。</p>
<p>回到函数<code>sub_40161C</code>，接下来函数进行了一个字符串比较：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230503154525848.png" class title="image-20230503154525848">

<p>Str1是<code>sub_40120C</code>加密过后得到的散列值，因此判断<strong>Str2就是所比较的密文（散列值）</strong>，追入查看：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230503154746972.png" class title="image-20230503154746972">

<p>Str2的值是：<code>f8728f24e01c1aaf54e23f7f0d591384</code></p>
<p>如果比较成功，即输入的值加密后和预设的密文散列值相同，进入下一个比较，如果<code>byte_407449</code>的值为<code>32Z2</code>，则比较成功，跳出成功得到flag的消息框</p>
<p>我们发现<code>byte_407449</code>和输入字符串的<code>byte_407444</code>相差5，因此v4的strcmp**<code>407449</code>所比较的字符串就是输入字符串的后4个字节，因此我们可以知道flag的后四个字节是<code>32Z2</code>**</p>
<h4 id="解密思路"><a href="#解密思路" class="headerlink" title="解密思路"></a>解密思路</h4><p>在网上找了个MD5解密轮子（Link:<a class="link" href="https://www.somd5.com/%EF%BC%89%EF%BC%8C%E8%A7%A3%E5%AF%86MD5%E5%BE%97%E5%88%B0%E6%98%8E%E6%96%87%EF%BC%9A%60K502G%60">https://www.somd5.com/），解密MD5得到明文：`K502G` <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>然后我们就可以奖字符串进行拼接进行仿射解密了：<code>K502G32Z2</code></p>
<p>仿射解密脚本如下（Python）：</p>
<p>其中注意，由于解密是逆变换，所以密钥<code>a=3, b=9 </code></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    c = <span class="built_in">input</span>(<span class="string">'输入密文：'</span>)</span><br><span class="line">    a = <span class="number">3</span> <span class="comment">#根据逆向结果得到的密钥</span></span><br><span class="line">    b = <span class="number">9</span></span><br><span class="line"></span><br><span class="line">    p = affine_decrypt(c, a, b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"解密结果："</span> + p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">affine_decrypt</span>(<span class="params">ciphertext, a, b</span>):</span><br><span class="line">    plaintext = <span class="string">""</span></span><br><span class="line">    m = <span class="built_in">len</span>(<span class="string">"1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>)</span><br><span class="line">    a_inv = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 计算 a 的逆元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m):</span><br><span class="line">        <span class="keyword">if</span> (i * a) % m == <span class="number">1</span>:</span><br><span class="line">            a_inv = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 对密文进行解密</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> ciphertext:</span><br><span class="line">        <span class="keyword">if</span> char == <span class="string">'_'</span>:</span><br><span class="line">            char = <span class="string">' '</span></span><br><span class="line">        <span class="keyword">elif</span> char == <span class="string">'-'</span>:</span><br><span class="line">            char = <span class="string">'.'</span></span><br><span class="line">        <span class="comment"># 将字符映射到数字</span></span><br><span class="line">        num = <span class="string">"1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>.index(char)</span><br><span class="line">        <span class="comment"># 计算解密后的数字</span></span><br><span class="line">        num = (a_inv * (num - b)) % m</span><br><span class="line">        <span class="comment"># 将数字映射回字符</span></span><br><span class="line">        plaintext += <span class="string">"1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>[num]</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>

<p>然后把这个字符串拼接起来得到flag：<code>5M1LE_LOL</code></p>
<p>输入这个flag，得到成功的提示:</p>
<img lazyload src="/images/loading.svg" data-src="/2023/05/02/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/image-20230511124146592.png" class title="image-20230511124146592">

<h5 id="第一次尝试："><a href="#第一次尝试：" class="headerlink" title="第一次尝试："></a>第一次尝试：</h5><p>因此可以得到flag：<code>3WC9H32Z2</code>–&gt;它不对…. o(TヘTo)</p>
<p>难道是md5解错了？还是仿射回去的时候错了?</p>
<p>笑死 原来是仿射解密的密钥搞反了 解密是逆变换 密钥要反过来</p>
<p>而且32Z2也要一起丢进去仿射解密</p>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>汇编逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>博客优化和更新</title>
    <url>/2023/07/18/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E5%92%8C%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<p>最近正好在不断优化和更新自己的博客，我就想着可不可以试试给自己的博客多选几个主题，之后可以随时更换（看心情），然后就挑了下面几个主题：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/07/18/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E5%92%8C%E6%9B%B4%E6%96%B0/image-20230718111427675.png" class title="image-20230718111427675">

<p>结果发现我还是最爱我的Redefine主题，甚至有两个主题还用不了…</p>
<p>不过其它主题我也挺喜欢的。有简洁的主题，也有很诗意的主题，感觉还是挺全面的，之后可以没事多刷刷我的博客，说不定就换主题了呢哈哈哈哈</p>
]]></content>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>奥本海默</title>
    <url>/2023/08/30/%E5%A5%A5%E6%9C%AC%E6%B5%B7%E9%BB%98/</url>
    <content><![CDATA[<p><strong>“当人们折磨够你之后，就会颁奖给你，好像在原谅你的样子，但其实这些举动都只是为了他们自己。”</strong></p>
<p>当奥本海默看到原子弹爆炸的那一刻，他的眼中出现了恐惧，之后他的脑海里多次闪回巨响、彻夜地失眠、清晰地记得受害者人数、在演讲时看见诺兰女儿被核武器摧毁…</p>
<p>他也是一名普通人，他渴望和平，他只是想快速结束第二次世界大战，但是完成任务后，他不想继续让人类继续毁灭自己而反对氢弹，却遭到麦卡锡主义者的排挤（以至于在去年的12月才得以平反），作为一名科学家的他只能身处矛盾的暴风眼中心却无能为力，受尽打击。</p>
<p>他是原子弹的创造者，也是原子弹的受害者，他比谁都更想看到世界和平，却已经没有办法控制贪婪的政治家们，反倒成为了杜鲁门口中的傻子。无论是原子弹还是核污水排放也只是为了政治家们自己的利益，在他们的眼中，普通人的生命？笑话罢了。</p>
<p>电影最后平行时空里的大气层烧毁，或许是诺兰留给我们的思考吧。</p>
<p>确实很震撼，但是别睡着…</p>
]]></content>
      <categories>
        <category>Movie</category>
      </categories>
      <tags>
        <tag>影评</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的大素数判断算法和Miller-Rabin素判断算法的原理实现</title>
    <url>/2023/05/17/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%A4%A7%E7%B4%A0%E6%95%B0%E5%88%A4%E6%96%AD%E7%AE%97%E6%B3%95%E5%92%8CMiller-Rabin%E7%B4%A0%E5%88%A4%E6%96%AD%E7%AE%97%E6%B3%95%E7%9A%84%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="一、摘要"><a href="#一、摘要" class="headerlink" title="一、摘要"></a>一、摘要</h2><p>大数素性检测一直是数论界和密码学界等领域经久不衰的研究方向。随着时间的推移，实现大数素性检测的算法也在不断改进和优化。目前已经出现了许多大数素性检测算法，其中 Miller-Rabin 算法尤其引人注目。本文将对常见的大素数判定算法进行调研，并详细介绍 Miller-Rabin 大素数判定算法的原理。接着，结合相关的数论知识，以生成一个 1024 位的大素数为例，编写程序实现了该算法的判定过程。</p>
<h2 id="二、引言"><a href="#二、引言" class="headerlink" title="二、引言"></a>二、引言</h2><h3 id="1-研究的问题及其背景"><a href="#1-研究的问题及其背景" class="headerlink" title="1 研究的问题及其背景"></a>1 研究的问题及其背景</h3><p>随着计算机技术的不断发展，我们能够处理的数字规模也越来越大，这也体现了人们对大数素性检测算法的研究变得越来越重要。在密码学中，我们需要使用大质数来生成公钥和私钥，以保证信息的安全性。如果生成的大质数不是素数，那么加密算法将变得非常容易被攻破。因此，如何高效、准确地判断一个给定的大数是否为素数，一直是密码学、计算机科学和数学领域中一个重要的研究方向。</p>
<p>在过去的几十年里，人们提出了许多不同的大数素性检测算法，其中一些算法能够高效地处理非常大的数，而另一些算法则更适用于较小的数。例如，最早的质数测试算法是试除法，但这种算法效率低下，只适用于小规模的数。随后，费马小定理和 Miller-Rabin 算法等算法被开发出来，它们在处理较大的数时具有更高的效率和可靠性。</p>
<h3 id="2-研究的目的及意义"><a href="#2-研究的目的及意义" class="headerlink" title="2 研究的目的及意义"></a>2 研究的目的及意义</h3><p>大素数判定算法是为了判断一个数是否为素数而研究出来的一种算法。在实际应用中，我们经常需要使用大素数来保证密码学、通信和安全领域的安全性。例如，在RSA加密算法中，我们需要使用两个大质数来生成一个公钥和一个私钥，这两个大质数必须是素数才能保证加密的安全性。因此，判断一个大数是否为素数是非常关键的。</p>
<p>然而，对于大数而言，判断它是否为素数变得异常困难，传统的素性检测算法已经无法胜任。因此，研究大素数判定算法就显得非常必要。这些算法可以高效地判断一个大数是否为素数，从而保证了密码学、通信和安全领域的安全性。此外，大素数判定算法也在其他领域有着广泛的应用，例如质因数分解和离散对数问题等。因此，研究大素数判定算法具有重要的理论和实际意义。</p>
<h2 id="三、研究方法"><a href="#三、研究方法" class="headerlink" title="三、研究方法"></a>三、研究方法</h2><p>本次研究主要使用了文献研究法、经验总结法和实验研究法。首先阅读大数素性判断相关领域的文献，对大数素性判断的问题背景和常见方法有基本了解。同时，从文献中汲取前人研究智慧，总结前人研究经验，在前人研究的基础之上让自己的研究更加具有科学性和严谨性。最后，根据之前阅读的文献和总结的经验，编写代码实现Miller-Rabin算法，并不断调试和优化，最终得到实现Miller-Rabin大素数判定的程序。</p>
<p>以下是研究内容和过程：</p>
<h3 id="1-常见的大素数判定算法"><a href="#1-常见的大素数判定算法" class="headerlink" title="1 常见的大素数判定算法"></a><strong>1</strong> 常见的大素数判定算法</h3><p>本次研究调研了四种大数素性判断算法，分别为费马素性测试算法、AKS 素性测试算法、Solovay-Strassen 素性测试算法、Miller-Rabin 素性测试算法，其中AKS属于确定性素性检测算法，其余三种属于概率型素性检测算法。在实际应用中，Miller-Rabin 素性测试算法是最常用的素数测试算法之一，它不仅判断速度较快，而且误判率也比较低。</p>
<h4 id="1）-Solovay-Strassen-素性测试算法"><a href="#1）-Solovay-Strassen-素性测试算法" class="headerlink" title="1）  Solovay-Strassen 素性测试算法"></a>1）  Solovay-Strassen 素性测试算法</h4><p>Solovay-Strassen 素性测试算法也是一种概率型算法，可以在多项式时间内判断一个数是否为素数。</p>
<p>Solovay-Strassen 素性测试算法的步骤如下：</p>
<blockquote>
<p>1 随机选择一个整数 a，使得 1 &lt; a &lt; n。</p>
<p>2 计算 Jacobi 符号 J(a,n)。</p>
<p>3 根据欧拉判别准则，如果<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="22.68ex" height="2.777ex" role="img" focusable="false" viewbox="0 -977.4 10024.7 1227.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/></g><g data-mml-node="mrow" transform="translate(799.7,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(918,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1362.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1962.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mo" transform="translate(3429.1,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"/></g><g data-mml-node="mtext" transform="translate(4484.9,0)"><path data-c="A0" d=""/></g><g data-mml-node="msup" transform="translate(4734.9,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mfrac" transform="translate(562,363) scale(0.707)"><g data-mml-node="mrow" transform="translate(220,398) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mn" transform="translate(707.2,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><rect width="1527.9" height="60" x="120" y="220"/></g></g><g data-mml-node="mrow" transform="translate(6763.7,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1267,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(1752,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(2272,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2872,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></g></svg></mjx-container>，则 n 可能是素数；否则，n 不是素数。</p>
</blockquote>
<p>其中，Jacobi 符号是数论中的一种函数，定义为 J(a,n) = (a/n)，其中 a 是整数，n 是正奇数。欧拉判别准则是指，对于一个正奇数 n 和整数 a，如果 a 是模 n 的二次剩余，则 Jacobi 符号等于<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="4.213ex" height="2.234ex" role="img" focusable="false" viewbox="0 -977.4 1862.1 987.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mfrac" transform="translate(562,363) scale(0.707)"><g data-mml-node="mrow" transform="translate(220,398) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mn" transform="translate(707.2,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><rect width="1527.9" height="60" x="120" y="220"/></g></g></g></g></svg></mjx-container>模 n 的平方根的正负性；如果 a 不是模 n 的二次剩余，则 Jacobi 符号等于 -1。该算法的时间复杂度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.791ex;" xmlns="http://www.w3.org/2000/svg" width="11.345ex" height="2.807ex" role="img" focusable="false" viewbox="0 -891.3 5014.6 1240.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mrow" transform="translate(929.7,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M152 251Q152 646 388 850H416Q422 844 422 841Q422 837 403 816T357 753T302 649T255 482T236 250Q236 124 255 19T301 -147T356 -251T403 -315T422 -340Q422 -343 416 -349H388Q359 -325 332 -296T271 -213T212 -97T170 56T152 251Z"/></g><g data-mml-node="mi" transform="translate(458,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="msup" transform="translate(1145.7,0)"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"/><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"/></g><g data-mml-node="mn" transform="translate(1311,421.1) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(2860.2,0)"><path data-c="2061" d=""/></g><g data-mml-node="mi" transform="translate(3026.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3626.9,0) translate(0 -0.5)"><path data-c="29" d="M305 251Q305 -145 69 -349H56Q43 -349 39 -347T35 -338Q37 -333 60 -307T108 -239T160 -136T204 27T221 250T204 473T160 636T108 740T60 807T35 839Q35 850 50 850H56H69Q197 743 256 566Q305 425 305 251Z"/></g></g></g></g></svg></mjx-container>，其中 k 是测试的次数。</p>
<p>Solovay-Strassen 素性测试算法的优点在于其判定错误率极低，然而，相对于 Miller-Rabin 素性测试算法，Solovay-Strassen 素性测试算法在实现上稍微困难一些，并且在大数判定时相对于 Miller-Rabin 素性测试算法速度较慢。</p>
<h4 id="2-AKS-素性测试算法"><a href="#2-AKS-素性测试算法" class="headerlink" title="2)   AKS 素性测试算法"></a>2)   AKS 素性测试算法</h4><p>AKS 素性测试算法是一种确定性算法，可以在多项式时间内判断一个数是否为素数。</p>
<p>AKS 素数测试主要是基于以下定理：</p>
<blockquote>
<p>整数n(≥ 2)是素数，当且仅当<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="27.855ex" height="2.352ex" role="img" focusable="false" viewbox="0 -789.6 12312 1039.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(1183.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(2183.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(2712.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mi" transform="translate(3134.4,477.1) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(3886.5,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"/></g><g data-mml-node="mo" transform="translate(4942.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(5331.3,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(605,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(6632.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(7633,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(8162,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mtext" transform="translate(8551,0)"><path data-c="A0" d=""/></g><g data-mml-node="mo" transform="translate(8801,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(9190,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(10068,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(10553,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mtext" transform="translate(11073,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(11323,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(11923,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>这个同余多项式对所有与n互素的整数a均成立。</p>
</blockquote>
<p>这个定理是费马小定理的一般化，但是为了减少计算复杂度，实际AKS算法使用的是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="34.962ex" height="2.352ex" role="img" focusable="false" viewbox="0 -789.6 15453 1039.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(1183.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(2183.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(2712.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mi" transform="translate(3134.4,477.1) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(3886.5,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"/></g><g data-mml-node="mo" transform="translate(4942.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(5331.3,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(605,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(6632.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(7633,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(8162,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mtext" transform="translate(8551,0)"><path data-c="A0" d=""/></g><g data-mml-node="mo" transform="translate(8801,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(9190,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(10068,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(10553,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mtext" transform="translate(11073,0)"><path data-c="A0" d=""/></g><g data-mml-node="msup" transform="translate(11323,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(605,363) scale(0.707)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(12519.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(13519.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(14019.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(14464,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(15064,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>这个同余多项式。</p>
<p>AKS素性测试的步骤如下：</p>
<blockquote>
<ol>
<li>​	对于一个正整数 n，选择一个较小的质数 r，计算 r 的阶 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.68ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3394.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z"/></g><g data-mml-node="mi" transform="translate(892,0)"><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"/></g></g><g data-mml-node="mi" transform="translate(1481,-150) scale(0.707)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mrow" transform="translate(2016.6,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(989,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></g></svg></mjx-container>，即最小的 k 使得<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.58ex" height="2.497ex" role="img" focusable="false" viewbox="0 -853.7 6886.3 1103.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(633,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g><g data-mml-node="mo" transform="translate(1329.2,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"/></g><g data-mml-node="mn" transform="translate(2385,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(2885,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/></g><g data-mml-node="mo" transform="translate(3329.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3718.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(4596.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(5081.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mo" transform="translate(5601.6,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/></g><g data-mml-node="mi" transform="translate(6046.3,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(6497.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>。</li>
<li>​	如果 n 是平方数，或者<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.445ex" height="2.117ex" role="img" focusable="false" viewbox="0 -853.7 2848.9 935.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msup" transform="translate(1933.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(562,363) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g></g></g></g></svg></mjx-container>，其中 a 和 b 都是大于 1 的整数，则 n 不是素数。</li>
<li>如果对于所有小于 r 的质数 a，都有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.563ex;" xmlns="http://www.w3.org/2000/svg" width="4.44ex" height="2.26ex" role="img" focusable="false" viewbox="0 -750 1962.6 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(1362.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>，则 n 不是素数。</li>
<li>​	如果 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.059ex" height="2.71ex" role="img" focusable="false" viewbox="0 -948 8423.9 1198"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z"/></g><g data-mml-node="mi" transform="translate(892,0)"><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"/></g></g><g data-mml-node="mi" transform="translate(1481,-150) scale(0.707)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mrow" transform="translate(2016.6,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(989,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mo" transform="translate(3672.3,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="msub" transform="translate(4728.1,0)"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"/><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"/></g><g data-mml-node="mn" transform="translate(1311,-241.4) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(6442.7,0)"><path data-c="2061" d=""/></g><g data-mml-node="msup" transform="translate(6609.3,0)"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(989,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mn" transform="translate(1411,477.1) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></g></svg></mjx-container>，则 n 是素数；否则，进入下一步。</li>
<li>利用多项式算法计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="24.661ex" height="2.352ex" role="img" focusable="false" viewbox="0 -789.6 10900.1 1039.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(1183.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(2183.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(2712.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mi" transform="translate(3134.4,477.1) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(3608.7,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/></g><g data-mml-node="mo" transform="translate(4053.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4442.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(5320.4,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(5805.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mo" transform="translate(6325.4,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/></g><g data-mml-node="msup" transform="translate(6770,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(605,363) scale(0.707)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(7966.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(8966.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(9466.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(9911.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(10511.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>，其中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.639ex;" xmlns="http://www.w3.org/2000/svg" width="18.368ex" height="2.851ex" role="img" focusable="false" viewbox="0 -977.5 8118.7 1260"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(2640.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="msqrt" transform="translate(3696.1,0)"><g transform="translate(1020,0)"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="msub" transform="translate(936,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mrow" transform="translate(2024.6,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(989,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g><g data-mml-node="mo" transform="translate(0,67.5)"><path data-c="221A" d="M263 249Q264 249 315 130T417 -108T470 -228L725 302Q981 837 982 839Q989 850 1001 850Q1008 850 1013 844T1020 832V826L741 243Q645 43 540 -176Q479 -303 469 -324T453 -348Q449 -350 436 -350L424 -349L315 -96Q206 156 205 156L171 130Q138 104 137 104L111 130L263 249Z"/></g><rect width="3402.6" height="60" x="1020" y="857.5"/></g></g></g></svg></mjx-container>，如果存在一个整数 a，使得上式不等于<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="24.661ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 10900.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(605,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(1690.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(2690.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(3219.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mo" transform="translate(3608.7,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/></g><g data-mml-node="mo" transform="translate(4053.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4442.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(5320.4,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(5805.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mo" transform="translate(6325.4,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/></g><g data-mml-node="msup" transform="translate(6770,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(605,363) scale(0.707)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(7966.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(8966.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(9466.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(9911.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(10511.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>，则 n 不是素数；否则，n 是素数。</li>
</ol>
</blockquote>
<p>该算法的时间复杂度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.791ex;" xmlns="http://www.w3.org/2000/svg" width="9.789ex" height="2.809ex" role="img" focusable="false" viewbox="0 -892 4326.9 1241.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mrow" transform="translate(929.7,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M152 251Q152 646 388 850H416Q422 844 422 841Q422 837 403 816T357 753T302 649T255 482T236 250Q236 124 255 19T301 -147T356 -251T403 -315T422 -340Q422 -343 416 -349H388Q359 -325 332 -296T271 -213T212 -97T170 56T152 251Z"/></g><g data-mml-node="msup" transform="translate(458,0)"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"/><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"/></g><g data-mml-node="mn" transform="translate(1311,421.1) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/></g></g><g data-mml-node="mo" transform="translate(2172.6,0)"><path data-c="2061" d=""/></g><g data-mml-node="mi" transform="translate(2339.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2939.2,0) translate(0 -0.5)"><path data-c="29" d="M305 251Q305 -145 69 -349H56Q43 -349 39 -347T35 -338Q37 -333 60 -307T108 -239T160 -136T204 27T221 250T204 473T160 636T108 740T60 807T35 839Q35 850 50 850H56H69Q197 743 256 566Q305 425 305 251Z"/></g></g></g></g></svg></mjx-container>，比以往的素性检验算法都要快，而且可以对任意大小的数进行素性检验。然而，该算法在实际应用中并不常用，因为其常数项较大，实际运行速度较慢。</p>
<h4 id="3-费马素性测试算法"><a href="#3-费马素性测试算法" class="headerlink" title="3)   费马素性测试算法"></a>3)   费马素性测试算法</h4><p>费马素性测试算法是一种概率型算法，可以在多项式时间内判断一个数是否为素数。</p>
<p>首先，我们知道，有费马小定理：</p>
<blockquote>
<p>如果 p是一个素数，且整数 a不是 p的倍数，那么 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="20.717ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 9156.9 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(503,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1281,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mo" transform="translate(2149.1,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"/></g><g data-mml-node="mn" transform="translate(3204.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mrow" transform="translate(3871.6,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1267,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(1752,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mtext" transform="translate(2272,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(2522,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(3025,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="msup" transform="translate(7285.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(503,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1281,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></g></svg></mjx-container></p>
</blockquote>
<p>因此，如果对于一个给定的整数 n，我们能够找到一个整数 a，使得 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.102ex" height="2.587ex" role="img" focusable="false" viewbox="0 -893.3 8001.3 1143.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(989,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1767,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(2267,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></g><g data-mml-node="mo" transform="translate(2767.9,0)"><g data-c="2262"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"/><path data-c="338" d="M-612 -215T-619 -215T-631 -212T-637 -204T-639 -197Q-639 -190 -634 -183Q-621 -157 -400 274T-176 707Q-173 716 -160 716Q-153 716 -148 712T-142 703T-140 696Q-140 691 -372 241T-608 -212Q-612 -215 -619 -215Z" transform="translate(778,0)"/></g></g><g data-mml-node="mn" transform="translate(3823.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mrow" transform="translate(4490.3,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1267,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(1752,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mtext" transform="translate(2272,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(2522,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3122,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></g></svg></mjx-container>，那么 n 一定不是质数。</p>
<p>费马素性检验的步骤如下：</p>
<blockquote>
<ol>
<li>随机选择一个整数 a，使得 1 &lt; a &lt; n。</li>
<li>计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="11.817ex" height="2.046ex" role="img" focusable="false" viewbox="0 -893.3 5223.1 904.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(989,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1767,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(2267,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></g><g data-mml-node="mi" transform="translate(2490.1,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(3368.1,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(3853.1,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mtext" transform="translate(4373.1,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(4623.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>。</li>
<li>如果结果不等于 1，则 n 不是素数；如果等于 1，则需要重新选择另一个 a 进行判断</li>
</ol>
</blockquote>
<p>重复进行这个过程，直到满足一定的检验次数或者判断出 n 不是质数为止。该算法的时间复杂度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.25ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4088.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mrow" transform="translate(929.7,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mi" transform="translate(910,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(1208,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(1693,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(2170,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2770,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></g></svg></mjx-container>，其中 k 是测试的次数。</p>
<p>虽然费马素性检验算法比较简单，但其正确性不是完全保证的，存在一定的概率错误。特别地，存在一些合数 ，使得算法无法正确判断其为合数，这些数被称为卡迈克尔数（Carmichael number）。因此，在实际应用中，通常需要结合其他的素性检验算法来进行判断。</p>
<p>尽管费马素性检验的精确性有限，但其优势在于简单和高效。它适用于快速筛选大数的素性，尤其适合于生成随机的大质数，例如生成安全的密钥。</p>
<h4 id="4）Miller-Rabin-素性测试算法的详细介绍"><a href="#4）Miller-Rabin-素性测试算法的详细介绍" class="headerlink" title="4）Miller-Rabin 素性测试算法的详细介绍"></a>4）Miller-Rabin 素性测试算法的详细介绍</h4><p>Miller-Rabin 素性测试算法是一种概率型算法，可以在多项式时间内判断一个数是否为素数。</p>
<p>Miller-Rabin 素性测试算法基于费马小定理和二次探测定理。</p>
<p>费马小定理指出，如果 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g></g></svg></mjx-container> 是一个质数，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewbox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></svg></mjx-container> 是不被 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g></g></svg></mjx-container> 整除的整数，那么 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="17.689ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 7818.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(503,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1281,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mo" transform="translate(2149.1,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"/></g><g data-mml-node="mn" transform="translate(3204.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mspace" transform="translate(3704.9,0)"/><g data-mml-node="mo" transform="translate(4148.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4537.9,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="mspace" transform="translate(6426.9,0)"/><g data-mml-node="mi" transform="translate(6926.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(7429.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>。因此，如果我们对于一个不被 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g></g></svg></mjx-container> 整除的随机整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewbox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></svg></mjx-container>，计算 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="10.903ex" height="2.326ex" role="img" focusable="false" viewbox="0 -833.9 4818.9 1027.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(503,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1281,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mo" transform="translate(2149.1,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="mi" transform="translate(4315.9,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g></g></svg></mjx-container> 的结果为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewbox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>，那么 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g></g></svg></mjx-container> 可能是素数。</p>
<p>二次探测定理指出，如果 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g></g></svg></mjx-container> 是一个奇素数，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewbox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></svg></mjx-container> 是不被 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g></g></svg></mjx-container> 整除的整数，那么 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.64ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 6912.8 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mn" transform="translate(562,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1243.3,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"/></g><g data-mml-node="mn" transform="translate(2299.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mspace" transform="translate(2799.1,0)"/><g data-mml-node="mo" transform="translate(3243.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3632.1,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="mspace" transform="translate(5521.1,0)"/><g data-mml-node="mi" transform="translate(6020.8,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(6523.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> 的充要条件是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="5.345ex" height="1.529ex" role="img" focusable="false" viewbox="0 -666 2362.6 676"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"/></g><g data-mml-node="mn" transform="translate(1862.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container> 或者 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="16.412ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 7254.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"/></g><g data-mml-node="mo" transform="translate(1862.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2640.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mspace" transform="translate(3140.6,0)"/><g data-mml-node="mo" transform="translate(3584.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3973.6,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="mspace" transform="translate(5862.6,0)"/><g data-mml-node="mi" transform="translate(6362.2,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(6865.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>。因此，如果我们对于一个不被 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g></g></svg></mjx-container> 整除的随机整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewbox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></svg></mjx-container>，计算 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="8.853ex" height="2.326ex" role="img" focusable="false" viewbox="0 -833.9 3913.1 1027.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mn" transform="translate(562,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1243.3,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="mi" transform="translate(3410.1,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g></g></svg></mjx-container> 的结果为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewbox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>，那么 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g></g></svg></mjx-container> 可能是合数。如果结果不为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewbox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container> 但是为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="5.035ex" height="1.946ex" role="img" focusable="false" viewbox="0 -666 2225.4 860"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(725.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1725.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>，那么 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g></g></svg></mjx-container> 可能是素数。</p>
<p>Miller-Rabin 素性测试算法的步骤如下：</p>
<blockquote>
<ol>
<li>对于一个奇数 n，可以将它表示为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="13.152ex" height="1.756ex" role="img" focusable="false" viewbox="0 -694 5813.1 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1822.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(2600.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msup" transform="translate(3656,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g></g><g data-mml-node="mo" transform="translate(4792.9,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="mi" transform="translate(5293.1,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g></g></g></svg></mjx-container> 的形式，其中 s 和 d 都是正整数，d 是一个奇数。</li>
<li>​	选择随机整数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="17.076ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 7547.6 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(529,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mn" transform="translate(1529,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(2306.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mi" transform="translate(3362.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(4169.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"/></g><g data-mml-node="mi" transform="translate(5225.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(6047.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(7047.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>。</li>
<li>计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="13.834ex" height="2.37ex" role="img" focusable="false" viewbox="0 -853.7 6114.6 1047.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mo" transform="translate(706.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msup" transform="translate(1762.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(562,363) scale(0.707)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g></g><g data-mml-node="mo" transform="translate(2742.3,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/></g><g data-mml-node="mi" transform="translate(3186.9,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(4064.9,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(4549.9,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mo" transform="translate(5069.9,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/></g><g data-mml-node="mi" transform="translate(5514.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>，如果<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.685ex" height="1.756ex" role="img" focusable="false" viewbox="0 -694 2512.6 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mo" transform="translate(706.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mtext" transform="translate(1762.6,0)"><path data-c="A0" d=""/></g><g data-mml-node="mn" transform="translate(2012.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container> 或者 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.254ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2322.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1822.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>，则 n 是素数，进入下一轮测试；否则，进入步骤 4。</li>
<li>​	For <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.929ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2178.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(622.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1678.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></svg></mjx-container> to <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.958ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2191.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(691.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1691.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>:<br>计算 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="13.834ex" height="2.502ex" role="img" focusable="false" viewbox="0 -911.8 6114.6 1105.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mo" transform="translate(706.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(1762.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g><g data-mml-node="mi" transform="translate(2324.6,421.1) scale(0.707)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g></g><g data-mml-node="mo" transform="translate(2742.3,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/></g><g data-mml-node="mi" transform="translate(3186.9,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(4064.9,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(4549.9,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mo" transform="translate(5069.9,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/></g><g data-mml-node="mi" transform="translate(5514.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>，如果<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="9.242ex" height="1.756ex" role="img" focusable="false" viewbox="0 -694 4085 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mo" transform="translate(706.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(1762.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2584.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(3585,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>，则 n 是素数，进入下一轮测试；否则，令<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.889ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 6139.1 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mo" transform="translate(706.8,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"/></g><g data-mml-node="msup" transform="translate(1762.6,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mn" transform="translate(462,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2628.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3017.1,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(3895.1,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(4380.1,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mtext" transform="translate(4900.1,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(5150.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(5750.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></li>
<li>n不是素数，结束</li>
</ol>
</blockquote>
<p>该算法的时间复杂度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.791ex;" xmlns="http://www.w3.org/2000/svg" width="11.345ex" height="2.807ex" role="img" focusable="false" viewbox="0 -891.3 5014.6 1240.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mrow" transform="translate(929.7,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M152 251Q152 646 388 850H416Q422 844 422 841Q422 837 403 816T357 753T302 649T255 482T236 250Q236 124 255 19T301 -147T356 -251T403 -315T422 -340Q422 -343 416 -349H388Q359 -325 332 -296T271 -213T212 -97T170 56T152 251Z"/></g><g data-mml-node="mi" transform="translate(458,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="msup" transform="translate(1145.7,0)"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"/><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"/></g><g data-mml-node="mn" transform="translate(1311,421.1) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(2860.2,0)"><path data-c="2061" d=""/></g><g data-mml-node="mi" transform="translate(3026.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3626.9,0) translate(0 -0.5)"><path data-c="29" d="M305 251Q305 -145 69 -349H56Q43 -349 39 -347T35 -338Q37 -333 60 -307T108 -239T160 -136T204 27T221 250T204 473T160 636T108 740T60 807T35 839Q35 850 50 850H56H69Q197 743 256 566Q305 425 305 251Z"/></g></g></g></g></svg></mjx-container>，其中 k 是测试的次数。Miller-Rabin测试的特点是错误素数的数量比应用费马和Solovay-Strasen测试的情况要少。该算法被广泛应用于实际中的素数测试。</p>
<p>举一个例子：</p>
<blockquote>
<p>假设我们要测试数字 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.637ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2933.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"/></g></g></g></svg></mjx-container> 是否为素数，我们选择 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.345ex" height="1.69ex" role="img" focusable="false" viewbox="0 -665 2362.6 747"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1862.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g></g></svg></mjx-container> 进行测试：</p>
<p>首先，我们计算 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="11.277ex" height="1.912ex" role="img" focusable="false" viewbox="0 -833.9 4984.5 844.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mo" transform="translate(2217.7,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="mi" transform="translate(4384.5,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>，即 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="10.712ex" height="1.937ex" role="img" focusable="false" viewbox="0 -833.9 4734.7 855.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/></g></g></g><g data-mml-node="mo" transform="translate(1567.9,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="mn" transform="translate(3734.7,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"/></g></g></g></svg></mjx-container>，使用快速幂算法可以得到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="14.86ex" height="2.072ex" role="img" focusable="false" viewbox="0 -833.9 6568.2 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/></g></g></g><g data-mml-node="mo" transform="translate(1567.9,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="mn" transform="translate(3734.7,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(5012.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(6068.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>。</p>
<p>然后，我们计算 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="14.122ex" height="2.046ex" role="img" focusable="false" viewbox="0 -893.3 6241.7 904.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(989,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1767,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(2267,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2656,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mn" transform="translate(3156,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g><g data-mml-node="mo" transform="translate(3475,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="mi" transform="translate(5641.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>，即 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="10.712ex" height="1.937ex" role="img" focusable="false" viewbox="0 -833.9 4734.7 855.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"/></g></g></g><g data-mml-node="mo" transform="translate(1567.9,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="mn" transform="translate(3734.7,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"/></g></g></g></svg></mjx-container>，使用快速幂算法可以得到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="15.991ex" height="2.072ex" role="img" focusable="false" viewbox="0 -833.9 7068.2 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"/></g></g></g><g data-mml-node="mo" transform="translate(1567.9,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="mn" transform="translate(3734.7,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(5012.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(6068.2,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/></g></g></g></svg></mjx-container>。</p>
<p>因为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex;" xmlns="http://www.w3.org/2000/svg" width="6.411ex" height="2.106ex" role="img" focusable="false" viewbox="0 -716 2833.6 931"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(1277.8,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"/></g><g data-mml-node="mn" transform="translate(2333.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container> 且 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex;" xmlns="http://www.w3.org/2000/svg" width="15.813ex" height="2.106ex" role="img" focusable="false" viewbox="0 -716 6989.6 931"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(1277.8,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"/></g><g data-mml-node="mi" transform="translate(2333.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3155.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(4156,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(4933.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(5989.6,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/></g></g></g></svg></mjx-container>，所以 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.637ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2933.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"/></g></g></g></svg></mjx-container> 不是素数。</p>
<p>接下来，我们可以选择另一个 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewbox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></svg></mjx-container> 值进行测试，例如 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.345ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2362.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1862.6,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/></g></g></g></svg></mjx-container>。计算 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="14.86ex" height="2.072ex" role="img" focusable="false" viewbox="0 -833.9 6568.2 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/></g></g></g><g data-mml-node="mo" transform="translate(1567.9,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="mn" transform="translate(3734.7,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(5012.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(6068.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="14.86ex" height="2.072ex" role="img" focusable="false" viewbox="0 -833.9 6568.2 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"/></g></g></g><g data-mml-node="mo" transform="translate(1567.9,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="mn" transform="translate(3734.7,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(5012.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(6068.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>，因此我们可以认为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.637ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2933.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"/></g></g></g></svg></mjx-container> 是素数。</p>
</blockquote>
<p>使用随机数一次判定其为素数并不能确定该数就是一个素数，此时我们将这个随机数称为“强伪证”。</p>
<p>下面是一个Miller-Rabin判定合数的例子，其中选取的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.337ex" role="img" focusable="false" viewbox="0 -441 965.6 591"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></svg></mjx-container>就是一个“强伪证”：</p>
<blockquote>
<p>假设221是我们需要检验的数，则</p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="43.796ex" height="2.009ex" role="img" focusable="false" viewbox="0 -694 19357.7 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"/></g><g data-mml-node="mo" transform="translate(3433.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(3878.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(4700.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(5700.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(6478.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(7534.2,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"/></g><g data-mml-node="mo" transform="translate(9312,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(10367.8,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(11590,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mn" transform="translate(12312.2,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(13312.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(13756.9,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(14503.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(15559.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(16059.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(16504.1,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mo" transform="translate(17301.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(18357.7,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"/></g></g></g></svg></mjx-container></p>
<p>随机选取一个 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.185ex" height="1.337ex" role="img" focusable="false" viewbox="0 -441 965.6 591"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></svg></mjx-container> ，使其满足 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="12.744ex" height="1.846ex" role="img" focusable="false" viewbox="0 -666 5632.7 816"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"/></g><g data-mml-node="msub" transform="translate(1833.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(3076.9,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"/></g><g data-mml-node="mn" transform="translate(4132.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"/></g></g></g></svg></mjx-container>，此处选择<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="8.595ex" height="1.871ex" role="img" focusable="false" viewbox="0 -677 3799.1 827"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1243.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(2299.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"/><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"/></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.559ex;" xmlns="http://www.w3.org/2000/svg" width="42.582ex" height="2.827ex" role="img" focusable="false" viewbox="0 -1002.7 18821.2 1249.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g><g data-mml-node="mn" transform="translate(562,-247) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1552,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3718.8,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(4596.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msup" transform="translate(5652.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"/><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"/></g></g></g><g data-mml-node="mo" transform="translate(8220.2,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(10387,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"/></g></g><g data-mml-node="mo" transform="translate(12164.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(13220.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(14498.4,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"/></g><g data-mml-node="mn" transform="translate(15554.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(16054.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(16498.8,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(17321,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(18321.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.559ex;" xmlns="http://www.w3.org/2000/svg" width="42.376ex" height="2.827ex" role="img" focusable="false" viewbox="0 -1002.7 18730.1 1249.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mn" transform="translate(562,-247) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1552,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3718.8,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(4596.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msup" transform="translate(5652.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"/><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"/></g></g></g><g data-mml-node="mo" transform="translate(8573.8,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(10740.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"/></g></g><g data-mml-node="mo" transform="translate(12518.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(13574.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"/></g><g data-mml-node="mo" transform="translate(15351.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(16407.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(17229.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(18230.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></p>
<p>因为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="16.19ex" height="1.756ex" role="img" focusable="false" viewbox="0 -694 7156.1 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"/></g><g data-mml-node="mo" transform="translate(1777.8,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"/></g><g data-mml-node="mo" transform="translate(2833.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(3611.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(4389.3,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6556.1,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>, 所以要么<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="7.768ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 3433.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"/></g></g></g></svg></mjx-container>确实是一个素数，要么<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="8.595ex" height="1.871ex" role="img" focusable="false" viewbox="0 -677 3799.1 827"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1243.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(2299.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"/><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"/></g></g></g></svg></mjx-container>是一个“强伪证”。</p>
<p>我们再选取l另一个随机数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="8.595ex" height="1.869ex" role="img" focusable="false" viewbox="0 -676 3799.1 826"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1243.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(2299.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1000,0)"/></g></g></g></svg></mjx-container>，于是有：</p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.651ex;" xmlns="http://www.w3.org/2000/svg" width="43.713ex" height="2.807ex" role="img" focusable="false" viewbox="0 -952.7 19321.2 1240.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g><g data-mml-node="mn" transform="translate(562,-287.9) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1552,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3718.8,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(4596.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msup" transform="translate(5652.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1000,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1533,403.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"/></g></g></g><g data-mml-node="mo" transform="translate(8220.2,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(10387,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"/></g></g><g data-mml-node="mo" transform="translate(12164.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(13220.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"/><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1000,0)"/></g><g data-mml-node="mo" transform="translate(14998.4,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"/></g><g data-mml-node="mn" transform="translate(16054.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(16554.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(16998.8,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(17821,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(18821.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.651ex;" xmlns="http://www.w3.org/2000/svg" width="40.013ex" height="2.807ex" role="img" focusable="false" viewbox="0 -952.7 17685.7 1240.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mn" transform="translate(562,-287.9) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1552,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3718.8,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(4596.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msup" transform="translate(5652.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1000,0)"/></g><g data-mml-node="TeXAtom" transform="translate(1533,403.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"/></g></g></g><g data-mml-node="mo" transform="translate(8573.8,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"/><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(10740.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"/></g></g><g data-mml-node="mo" transform="translate(12518.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(13574.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"/></g><g data-mml-node="mo" transform="translate(15351.9,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"/></g><g data-mml-node="mo" transform="translate(16407.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(17185.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></p>
<p>即<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="7.608ex" height="1.715ex" role="img" focusable="false" viewbox="0 -676 3362.6 758"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1862.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1000,0)"/></g></g></g></svg></mjx-container>是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="7.768ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 3433.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"/></g></g></g></svg></mjx-container>为合数的一个凭证，而<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="7.608ex" height="1.717ex" role="img" focusable="false" viewbox="0 -677 3362.6 759"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1862.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"/><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"/></g></g></g></svg></mjx-container>是一个“强伪证”。</p>
<p>即221是一个合数</p>
</blockquote>
<h3 id="2-Miller-Rabin大素数判定的程序实现"><a href="#2-Miller-Rabin大素数判定的程序实现" class="headerlink" title="2 Miller-Rabin大素数判定的程序实现"></a>2 Miller-Rabin大素数判定的程序实现</h3><p>使用Java及其自带库编写一个Miller-Rabin大素数判定程序：该程序接收一个输入数字，可以为大整数，将其进行50轮Miller-Rabin大素数判定测试，最终输出结果是素数prime或者合数composite</p>
<p>源码见附录，此处展示程序截图：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../AppData/Roaming/Typora/typora-user-images/image-20230516154405180.png" alt="image-20230516154405180"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../AppData/Roaming/Typora/typora-user-images/image-20230516154422012.png" alt="image-20230516154422012"></p>
<p>对于该算法，首先对小数进行测试：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../AppData/Roaming/Typora/typora-user-images/image-20230516131203109.png" alt="image-20230516131203109"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../AppData/Roaming/Typora/typora-user-images/image-20230516131206659.png" alt="image-20230516131206659"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../AppData/Roaming/Typora/typora-user-images/image-20230516131209846.png" alt="image-20230516131209846"></p>
<p>可以看到，该Miller-Rabin素数判断程序对上述输入的数字进行判断的结果都是正确的。</p>
<p>接下来我们输入一个1024bits的大素数进行测试。</p>
<p>首先我们需要生成一个大素数，使用Java自带的SecureRandom类进行实现：指定生成大素数位数为1024bits</p>
<p>源码见附录，此处展示程序截图：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../AppData/Roaming/Typora/typora-user-images/image-20230516154211083.png" alt="image-20230516154211083"></p>
<p>生成一个1024bits的大素数：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../AppData/Roaming/Typora/typora-user-images/image-20230516131405367.png" alt="image-20230516131405367"></p>
<p>将这个大素数输入上面的Miller-Rabin素性检测程序：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../AppData/Roaming/Typora/typora-user-images/image-20230516131505668.png" alt="image-20230516131505668"></p>
<p>程序成功判定这是一个大素数</p>
<h4 id="程序性能分析"><a href="#程序性能分析" class="headerlink" title="程序性能分析"></a>程序性能分析</h4><p>代码使用Java构建，Java支持大整数 BigIntegar类型，方便输入1024bits的大整数。同时，利用Java自带的随机数生成方法，可以很轻松的生成测试需要的随机整数。设置测试轮数k=50，可以实现准确性与性能的综合平衡。</p>
<h2 id="四、研究结果及其分析"><a href="#四、研究结果及其分析" class="headerlink" title="四、研究结果及其分析"></a>四、研究结果及其分析</h2><p>根据上面的研究，我们可以知道，Miller-Rabin 素性测试算法是一种快速可靠的素性测试算法，它可以用来判断一个大数是否是素数。相较于其它的几种素性测试方法，Miller-Rabin 素性测试算法具有更高的效率和更强的可靠性。它的理论基础是由Fermat定理引申而来，因此它具备了Fermat检测算法的优势，同时进一步降低了判断的错误率。因此，Miller-Rabin 素性测试算法被广泛应用于加密算法、密码学和数论等领域。</p>
<p>同时，在调研和测试过程中也获知了 Miller-Rabin 素性测试算法的一些优缺点：</p>
<p>优点：</p>
<ul>
<li>时间复杂度比较低，仅为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.656ex" height="2.582ex" role="img" focusable="false" viewbox="0 -891.3 4709.9 1141.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="msup" transform="translate(1839.7,0)"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"/><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"/></g><g data-mml-node="mn" transform="translate(1311,421.1) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(3554.2,0)"><path data-c="2061" d=""/></g><g data-mml-node="mi" transform="translate(3720.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(4320.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>，其中 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></svg></mjx-container> 为测试精度，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container> 为待测试的数。</li>
<li>可以通过控制测试精度来平衡算法的速度和准确性，使得算法可以在可接受的时间内得到可靠的结果。</li>
<li>在实际应用中，Miller-Rabin 素性测试算法的错误概率非常小，可以满足大多数实际需求。</li>
</ul>
<p>缺点：</p>
<ul>
<li>在极少数情况下，Miller-Rabin 素性测试算法可能会出现误判，即将一个合数误认为素数。不过这种情况的概率非常小，可以通过增加测试精度来进一步降低误判率。</li>
</ul>
<p>在使用Java程序进行Miller-Rabin 素性测试时速度很快。同时，Java自带的随机素数生成类也使用了Miller-Rabin素性测试，使用Java自带的随机数生成类生成随机数时速度较快，即使是1024bits如此大的素数都可以在1秒内得到，这体现了Miller-Rabin素性测试的优越性和应用的广泛性。</p>
<p>当然，本次研究还有需要改进的地方，本次研究中使用的编程语言是Java，使用了Java中的大整数BigIntegar类，但是作为优化，使用整数范围没有最大值限制的Python语言可以使程序更加精简和易读，调用更少，处理速度更快，因此程序还可以使用Python编辑进行性能改进，改进的代码已附在附件中。</p>
<h2 id="五、结论"><a href="#五、结论" class="headerlink" title="五、结论"></a>五、结论</h2><p>研究结果表明，Miller-Rabin 素性测试算法是一种非常实用和有效的素性测试算法，尤其适用于对大数进行素性测试的场景，其速度快、正确率高。在实际应用中，我们需要根据具体需求来选择测试精度和算法参数，以平衡算法的准确性和速度。</p>
<p>本次研究解决的问题：本次研究基本完成任务，完成了题目的要求。本次研究中调查了常见的大素数判断算法，了解到了常见素数判定算法的基本原理和性能，以及各种算法的优劣。仔细调研了Miller-Rabin素判定原理并实际操作编程实现了Miller-Rabin的功能，深刻了解和认识了Miller-Rabin素判定原理。</p>
<p>本次研究说明的问题：设计程序时选择使用合适的编程语言可以大大提高解决问题的效率，未来笔者将在编写其它程序前将仔细思考此类问题，以提高自身的编程效率和程序的运行效率。</p>
<p>要进一步研究的问题：Miller-Rabin算法仍存在极少数情况无法正确判定的情况，未来笔者将学习更多的相关知识，寻求解决此办法的方案。</p>
<h2 id="六、参考文献"><a href="#六、参考文献" class="headerlink" title="六、参考文献"></a>六、参考文献</h2><p>[1]Goran Dordevic; Milan Markovic.”On Optimization of Miller-Rabin Primality Test on TI TMS320C54x Signal Processors”[R].International Conference on Systems, Signals and Image Processing, IWSSIP,27-30 June 2007</p>
<p>[2]M. O. Rabin.“Probabilistic algorithm for testing primality” [J]. Number Theory 12 (1980), 128–138.</p>
<p>[3]谢日敏.素数判定设计与实现[J].福建商业高等专科学校学报. 2007(02)</p>
<p>[4]许斌,张艳硕,吕正宏.常见素性检验算法的比较分析[J]北京电子科技学院学报. 2021,29(04)</p>
<h2 id="七、附录"><a href="#七、附录" class="headerlink" title="七、附录"></a>七、附录</h2><h5 id="1-程序有关文件"><a href="#1-程序有关文件" class="headerlink" title="1 程序有关文件"></a>1 程序有关文件</h5><p>见作业附带文件：</p>
<p>Miller-Rabin素判定程序：MillerRabinTest.java</p>
<p>随机1024bits大素数生成程序：RandomPrimeGenerator.java</p>
<p>使用Python优化的Miller-Rabin素判定程序：Miller-Rabin.py</p>
<h5 id="2-程序源码"><a href="#2-程序源码" class="headerlink" title="2 程序源码"></a>2 程序源码</h5><p>MillerRabinTest.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MillerRabinTest</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(BigInteger n, <span class="type">int</span> k)</span> { <span class="comment">//素数判定</span></span><br><span class="line">        <span class="comment">// 判断特殊情况：如果 n 小于等于 1 或者为偶数，则一定不是素数</span></span><br><span class="line">        <span class="keyword">if</span> (n.compareTo(BigInteger.ONE) &lt;= <span class="number">0</span> || n.mod(BigInteger.TWO).equals(BigInteger.ZERO)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 n - 1 分解为 d * 2^r 的形式</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">d</span> <span class="operator">=</span> n.subtract(BigInteger.ONE);</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (d.mod(BigInteger.TWO).equals(BigInteger.ZERO)) {</span><br><span class="line">            d = d.divide(BigInteger.TWO);</span><br><span class="line">            r++;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行 k 次测试</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) {</span><br><span class="line">            <span class="type">BigInteger</span> <span class="variable">a</span> <span class="operator">=</span> getRandomNumberInRange(BigInteger.TWO, n.subtract(BigInteger.TWO));</span><br><span class="line">            <span class="type">BigInteger</span> <span class="variable">x</span> <span class="operator">=</span> a.modPow(d, n);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (x.equals(BigInteger.ONE) || x.equals(n.subtract(BigInteger.ONE))) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; r - <span class="number">1</span>; j++) {</span><br><span class="line">                x = x.modPow(BigInteger.TWO, n);</span><br><span class="line">                <span class="keyword">if</span> (x.equals(BigInteger.ONE)) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (x.equals(n.subtract(BigInteger.ONE))) {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!x.equals(n.subtract(BigInteger.ONE))) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BigInteger <span class="title function_">getRandomNumberInRange</span><span class="params">(BigInteger min, BigInteger max)</span> {<span class="comment">//生成范围在[2,n-1)的随机数</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">range</span> <span class="operator">=</span> max.subtract(min).add(BigInteger.ONE);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">randomNum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(range.bitLength(), random);</span><br><span class="line">        <span class="keyword">while</span> (randomNum.compareTo(range) &gt;= <span class="number">0</span>) {</span><br><span class="line">            randomNum = <span class="keyword">new</span> <span class="title class_">BigInteger</span>(range.bitLength(), random);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> randomNum.add(min);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {<span class="comment">//主方法</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        String a;</span><br><span class="line">        a = in.next();</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(a);</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">if</span> (isPrime(n, k)) {</span><br><span class="line">            System.out.println(n + <span class="string">" is prime."</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(n + <span class="string">" is composite."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>RandomPrimeGenerator.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomPrimeGenerator</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIT_LENGTH</span> <span class="operator">=</span> <span class="number">1024</span>; <span class="comment">// 生成的大素数位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CERTAINTY</span> <span class="operator">=</span> <span class="number">100</span>;   <span class="comment">// Miller-Rabin 素性测试的精度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SecureRandom</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecureRandom</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">prime</span> <span class="operator">=</span> generateRandomPrime();</span><br><span class="line">        System.out.println(<span class="string">"Generated prime: "</span> + prime);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigInteger <span class="title function_">generateRandomPrime</span><span class="params">()</span> {</span><br><span class="line">        BigInteger prime;</span><br><span class="line">        <span class="keyword">do</span> {</span><br><span class="line">            prime = <span class="keyword">new</span> <span class="title class_">BigInteger</span>(BIT_LENGTH, CERTAINTY, random);</span><br><span class="line">        } <span class="keyword">while</span> (!prime.isProbablePrime(CERTAINTY));</span><br><span class="line">        <span class="keyword">return</span> prime;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>Miller-Rabin.py</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n, k</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    d = n - <span class="number">1</span></span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> d % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        d //= <span class="number">2</span></span><br><span class="line">        r += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        a = random.randint(<span class="number">2</span>, n - <span class="number">2</span>)</span><br><span class="line">        x = <span class="built_in">pow</span>(a, d, n)</span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">1</span> <span class="keyword">or</span> x == n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(r - <span class="number">1</span>):</span><br><span class="line">            x = <span class="built_in">pow</span>(x, <span class="number">2</span>, n)</span><br><span class="line">            <span class="keyword">if</span> x == n - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">input</span>()</span><br><span class="line">n = <span class="built_in">int</span>(n)</span><br><span class="line">k = <span class="number">50</span>  <span class="comment"># 测试精度</span></span><br><span class="line"><span class="keyword">if</span> is_prime(n, k):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"{} is prime"</span>.<span class="built_in">format</span>(n))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"{} is composite"</span>.<span class="built_in">format</span>(n))</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>homework</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="2-进程的描述与控制"><a href="#2-进程的描述与控制" class="headerlink" title="2 进程的描述与控制"></a>2 进程的描述与控制</h1><h2 id="前趋图"><a href="#前趋图" class="headerlink" title="前趋图"></a>前趋图</h2><p>➢ 有向无循环图，用于描述进程之间执行的先后顺序<br>➢ 结点表示进程或程序段，有向边表示前趋关系</p>
<p><strong>前趋图</strong>(Precedence Graph)是一个<strong>有向无循环图</strong>，记为DAG(Directed Acyclic Graph)，用于描述进程之间执行的<strong>前后关系</strong></p>
<p>图中的每个结点可用于描述一个<strong>程序段或进程</strong>，乃至一条<strong>语句</strong>；结点间的有向边则用于表示两个结点之间存在的<strong>偏序</strong>(Partial Order)或<strong>前趋</strong>关系(Precedence Relation)“→”</p>
<p>→={(Pi, Pj)|Pi must complete before  Pj may start}  </p>
<p>如果(Pi, Pj)∈→,可写成Pi→Pj，称Pi是Pj 的<strong>直接前趋</strong>，而称Pj是Pi的<strong>直接后继</strong> </p>
<p>在前趋图中，把没有前趋的结点称为<strong>初始结点</strong>(Initial Node)，把没有后继的结点称为<strong>终止结点</strong>(Final Node)</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230228203352379.png" class>

<p>前趋图还可表示为：</p>
<p>P={P1, P2, P3, P4, P5, P6, P7, P8, P9}→</p>
<p>={ (P1, P2), (P1, P3), (P1, P4), (P2, P5), (P3, P5), (P4, P6), (P4, P7), (P5, P8), (P6, P8), (P7, P9), (P8, P9)}</p>
<h2 id="程序并发执行"><a href="#程序并发执行" class="headerlink" title="程序并发执行"></a>程序并发执行</h2><p>只有不存在前趋关系的程序才有可能并发执行</p>
<h3 id="程序并发执行时的特征"><a href="#程序并发执行时的特征" class="headerlink" title="程序并发执行时的特征"></a>程序并发执行时的特征</h3><p><strong>间断性</strong> ➢ 并发程序之间相互制约。 ➢ 执行——暂停执行——执行。 </p>
<p><strong>失去封闭性</strong> ➢ 多个程序共享全机资源。 ➢ 执行状态受外界因素影响。 </p>
<p><strong>不可再现性</strong> ➢ 程序经过多次执行后，虽然其执行时的环境和初始条件 都相同，但得到的结果却各不相同。</p>
<h2 id="进程的描述"><a href="#进程的描述" class="headerlink" title="进程的描述"></a>进程的描述</h2><p>多道程序环境下，程序的执行属于并发执行，此时它们 将失去封闭性，并具有间断性及不可再现性的特征。因此，通常的程序不能参加并发执行。为此，引入“进程”</p>
<h3 id="进程的定义"><a href="#进程的定义" class="headerlink" title="进程的定义"></a>进程的定义</h3><p>➢ 进程是程序的一次执行。 </p>
<p>➢ 进程是一个程序及其数据在处理机上顺序执行时所发生的活动。</p>
<p>➢ 进程是程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的 一个独立单位。</p>
<p><strong>➢ 进程是进程实体的运行过程，是系统进行资源分配和调度的一个 独立单位。</strong></p>
<h3 id="进程和程序的区别"><a href="#进程和程序的区别" class="headerlink" title="进程和程序的区别"></a>进程和程序的区别</h3><p>进程是程序的一个实例， 是程序的一次执行。 </p>
<p>程序是进程的代码部分。</p>
<p> <strong>进程是活动的， 程序是静态的。</strong></p>
<p> 进程在内存中， 程序在外存中。</p>
<h3 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h3><p><strong>动态性 （最基本的特征）</strong></p>
<p> ➢ 有生命期 </p>
<p><strong>并发性</strong></p>
<p>➢ 多个进程可一 段时间内“同时”运行 </p>
<p> 独立性 </p>
<p>➢ 进程实体是一个能独立运行的基本单位 </p>
<p>➢ 是系统中独立获得资源和独立调度的基本单位 </p>
<p>异步性 </p>
<p>➢ 按各自独立的、 不可预知的速度向前推进</p>
<h2 id="进程的基本状态和切换"><a href="#进程的基本状态和切换" class="headerlink" title="进程的基本状态和切换"></a><u>进程的基本状态和切换</u></h2><h3 id="基本状态"><a href="#基本状态" class="headerlink" title="基本状态"></a>基本状态</h3><h4 id="创建状态（new）"><a href="#创建状态（new）" class="headerlink" title="创建状态（new）"></a>创建状态（new）</h4><h4 id="就绪状态（ready）：只需要再获得CPU"><a href="#就绪状态（ready）：只需要再获得CPU" class="headerlink" title="就绪状态（ready）：只需要再获得CPU"></a>就绪状态（ready）：只需要再获得CPU</h4><p>➢ 一个较大的程序通常都由若干个程序段组成 </p>
<p>➢ 程序在执行时，必须按照某种先后次序逐个执行，仅当前一操作执行完后，才能执行后继操作。 </p>
<h4 id="执行状态（running）：已获得CPU，正在执行的状态"><a href="#执行状态（running）：已获得CPU，正在执行的状态" class="headerlink" title="执行状态（running）：已获得CPU，正在执行的状态"></a>执行状态（running）：已获得CPU，正在执行的状态</h4><p>➢ 单处理机：一个进程处于执行状态 </p>
<p>➢ 多处理机：多个进程处于执行状态 </p>
<h4 id="阻塞状态（block-waiting）：进程等待某些事件发生的状态"><a href="#阻塞状态（block-waiting）：进程等待某些事件发生的状态" class="headerlink" title="阻塞状态（block / waiting）：进程等待某些事件发生的状态"></a>阻塞状态（block / waiting）：进程等待某些事件发生的状态</h4><p>➢ 正在执行的进程由于发生某事件而暂时无法继续执行的状态 </p>
<p>➢ 典型事件：请求I/O、申请缓冲空间 </p>
<p>➢ 根据阻塞原因，设置多个阻塞队列</p>
<h4 id="终止状态（terminated）"><a href="#终止状态（terminated）" class="headerlink" title="终止状态（terminated）"></a>终止状态（terminated）</h4><img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230228204454242.png" class title="image-20230228204454242">

<h3 id="进程状态的转换"><a href="#进程状态的转换" class="headerlink" title="进程状态的转换"></a>进程状态的转换</h3><p><strong>➢ 运行态变为就绪态</strong> </p>
<p>强制终止某进程的运行（系统原因） </p>
<p><strong>➢ 运行态变为阻塞态</strong> </p>
<p>运行进程等待外部事件发生（自身 原因） </p>
<p><strong>➢ 阻塞态变为就绪态</strong> </p>
<p>外部事件已经发生，可准备运行 </p>
<p><strong>➢ 就绪态变为运行态</strong> </p>
<p>停止其他进程运行后，运行该进程 占用CPU</p>
<h3 id="挂起操作及进程状态的转换"><a href="#挂起操作及进程状态的转换" class="headerlink" title="挂起操作及进程状态的转换"></a>挂起操作及进程状态的转换</h3><p>为什么引入挂起操作？ ➢ 终端用户的请求 ➢ 父进程请求 ➢ 负荷调节的需要 （实时系统） ➢ 操作系统的需要</p>
<h4 id="引入挂起操作后三个进程状态的转换"><a href="#引入挂起操作后三个进程状态的转换" class="headerlink" title="引入挂起操作后三个进程状态的转换"></a>引入挂起操作后三个进程状态的转换</h4><p>活动就绪——〉静止就绪（挂起）<br>活动阻塞——〉静止阻塞（挂起）<br>静止就绪——〉活动就绪（激活）<br>静止阻塞——〉活动阻塞（激活）<br>静止阻塞——〉静止就绪</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230228204734947.png" class title="image-20230228204734947">

<h2 id="进程管理中的数据结构——PCB"><a href="#进程管理中的数据结构——PCB" class="headerlink" title="进程管理中的数据结构——PCB"></a>进程管理中的数据结构——PCB</h2><p>PCB是进程的一部分， 是操作系统中最重要的<strong>记录型数据结构</strong>，是进程存在的唯一标志，常驻内存。</p>
<p>专门的数据结构，与进程一一对应。 </p>
<p>➢ 为描述和控制进程的运行，系统为每个进程定义了一个数据结构——<strong>进程控制块</strong> </p>
<p>➢ <strong>PCB</strong>（Process Control Block），是进程实体的一部分，记录了操作系统所需的、用于描述进程<strong>当前状况</strong>以及<strong>控制进程运行</strong>的全部信息 </p>
<p>➢ OS是根据PCB来对并发执行的进程进行控制和管理的</p>
<p>◆<strong>进程＝程序＋数据＋PCB</strong> ，即进程是一个程 序及其数据在处理机上顺序地执行时所发生 的活动 </p>
<p>◆ 进程控制块<strong>是进程存在的唯一标志</strong>。当系统 创建一个进程时，必须为它设置一个 PCB， 然后根据PCB的信息对进程<strong>实施控制管理</strong>， 进程任务完成时，系统收回它的PCB，进程也随之消亡</p>
<h3 id="PCB的作用"><a href="#PCB的作用" class="headerlink" title="PCB的作用"></a>PCB的作用</h3><p>➢ 作为独立运行基本单位的标志； ➢ 能实现间断性运行方式； ➢ 提供进程管理所需要的信息； ➢ 提供进程调度所需要的信息； ➢ 实现与其他进程的同步与通信。</p>
<h3 id="PCB中的信息"><a href="#PCB中的信息" class="headerlink" title="PCB中的信息"></a>PCB中的信息</h3><p>➢ <strong>进程标识信息</strong>：PID, PPID</p>
<p>用于唯一地标识一个进程。一个进程通常 有两种标识符： 1）<strong>内部标识符</strong>，数字 标识符；2）<strong>外部标识符</strong>，它由创建者提 供，描述进程的家族关系。 </p>
<p>➢ <strong>处理器状态信息</strong>：PC, PSW, 堆栈指针、寄 存器 </p>
<p>➢ <strong>进程调度信息</strong>：与进程调度和进程对换有关 的信息，包括： 进程状态、进程优先级、进 程调度所需的其它信息、事件 </p>
<p>➢ <strong>进程控制信息</strong>：程序和数据的地址、进程同 步和通信机制、资源清单、链接指针</p>
<h3 id="创建状态和终止状态——申请和回收PCB"><a href="#创建状态和终止状态——申请和回收PCB" class="headerlink" title="创建状态和终止状态——申请和回收PCB"></a>创建状态和终止状态——申请和回收PCB</h3><p><strong>创建状态</strong> ➢申请一个空白PCB；填写PCB；分配资源；设置就绪状态插入就绪队列</p>
<p><strong>终止状态</strong> ➢等待OS善后； ➢收回PCB</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230228205617028.png" class>

<h3 id="PCB的组织方式"><a href="#PCB的组织方式" class="headerlink" title="PCB的组织方式"></a>PCB的组织方式</h3><h4 id="线性方式"><a href="#线性方式" class="headerlink" title="线性方式"></a>线性方式</h4><ol>
<li>所有PCB组织在一张线形表，表的首址放在内存专用区域</li>
<li>实现简单</li>
<li>查找效率低</li>
</ol>
<h4 id="链接方式"><a href="#链接方式" class="headerlink" title="链接方式"></a>链接方式</h4><p>通过PCB中的连接字，将具有相同状态的PCB分别链接成一个队列</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230228205904622.png" class>

<h4 id="索引方式"><a href="#索引方式" class="headerlink" title="索引方式"></a>索引方式</h4><p>系统根据所有进程状态的不同，建立几张索引表</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230228205912228.png" class>

<h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><h3 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h3><p>① 申请空白PCB； ② 分配所需资源； ③ 初始化PCB； ④ 插入就绪队列。</p>
<h4 id="进程的层次结构"><a href="#进程的层次结构" class="headerlink" title="进程的层次结构"></a>进程的层次结构</h4><p>创建进程的进程是父进程，被创建的进程成为子进程</p>
<h4 id="进程图"><a href="#进程图" class="headerlink" title="进程图"></a>进程图</h4><p>➢ 描述进程家族关系的有向树</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230228210211006.png" class>

<h4 id="引起进程创建的事件（负责不同的任务）"><a href="#引起进程创建的事件（负责不同的任务）" class="headerlink" title="引起进程创建的事件（负责不同的任务）"></a>引起进程创建的事件（负责不同的任务）</h4><p>➢ 用户登录、作业调度、提供服务、应用请求</p>
<h3 id="进程的终止"><a href="#进程的终止" class="headerlink" title="进程的终止"></a>进程的终止</h3><p>引起进程终止的事件：正常结束、异常结束、外界干预</p>
<h4 id="进程的终止过程"><a href="#进程的终止过程" class="headerlink" title="进程的终止过程"></a>进程的终止过程</h4><p>1 根据被终止进程的标识符，从PCB集合中检索出该进程的PCB，从中读出该进程的状态；</p>
<p>2 若被终止进程正处于执行状态，应立即终止该进程的执行，并设置调度标志为真，用于指示该进程被终止后应重新进行调度；</p>
<p>3 若该进程还有子孙进程，还应将其所有子进程予以终止；（部分级联终止系统）</p>
<p>4 将该进程所拥有的全部资源，或者归还给其父进程或系统；</p>
<p>5 将被终止进程（PCB）从所在队列中移去。</p>
<h3 id="进程的阻塞与唤醒"><a href="#进程的阻塞与唤醒" class="headerlink" title="进程的阻塞与唤醒"></a>进程的阻塞与唤醒</h3><h4 id="引起进程阻塞和唤醒的事件"><a href="#引起进程阻塞和唤醒的事件" class="headerlink" title="引起进程阻塞和唤醒的事件"></a>引起进程阻塞和唤醒的事件</h4><p>➢ 向系统请求共享资源失败；等待某种操作的完成；新数据尚未到达；等待新 任务的到达。</p>
<h4 id="进程阻塞过程"><a href="#进程阻塞过程" class="headerlink" title="进程阻塞过程"></a>进程阻塞过程</h4><p>➢ 阻塞原语Block()。</p>
<p>➢ 进程的阻塞是进程自身的一种主动行为。 </p>
<p>➢ 具体过程：停止执行；状态由执行改为阻塞；将PCB插入阻塞队列。</p>
<h4 id="进程唤醒过程"><a href="#进程唤醒过程" class="headerlink" title="进程唤醒过程"></a>进程唤醒过程</h4><p>➢ 唤醒原语Wakeup()。</p>
<p>➢ 具体过程：从阻塞队列中移出；状态由阻塞改为就绪；将PCB插入 就绪队列。</p>
<p><strong>➢ 必须成对使用Block和Wakeup原语。</strong></p>
<h3 id="进程的挂起与激活"><a href="#进程的挂起与激活" class="headerlink" title="进程的挂起与激活"></a>进程的挂起与激活</h3><p>Suspend()原语</p>
<p>Active()原语</p>
<h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><p>进程通信是指进程之间的信息交换(各进程为了保持联系而交换信息)</p>
<p>高级进程通信：用户可直接利用OS所提供的一组通信命令，高效地传送大量数据的一种通信方式</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230308144022824.png" class title="image-20230308144022824">

<h3 id="共享存储器系统（shared-memory）"><a href="#共享存储器系统（shared-memory）" class="headerlink" title="共享存储器系统（shared memory）"></a>共享存储器系统（shared memory）</h3><p>➢ 基于共享数据结构的通信方式（效率低）<br>➢ 基于共享存储区的通信方式（高级，共享内存）</p>
<ol>
<li><p>共享存储器（shared-memory）方法的主要思想是：进 程之间通过共享某些数据结构或存储区实现信息传送。</p>
</li>
<li><p>两种类型： </p>
<p>➢ 基于<strong>共享数据结构</strong>的通信方式 （例：生产者—消费者问题中的有 界缓冲区，属于低级通信方式） </p>
<p>➢ 基于<strong>共享存储区</strong>的通信方式：在存储器中划出一块共享存储区， 诸进程通过对共享存储区中数据的读或写实现通信（传输大量数 据，属于高级通信）</p>
</li>
</ol>
<h3 id="消息传递系统（message-passing）"><a href="#消息传递系统（message-passing）" class="headerlink" title="消息传递系统（message passing）"></a>消息传递系统（message passing）</h3><p><strong>必须要有通信线路</strong></p>
<h4 id="直接通信方式"><a href="#直接通信方式" class="headerlink" title="直接通信方式"></a>直接通信方式</h4><p>通信线路是通过系统调用自动建立的。</p>
<p>➢ 发送进程利用OS所提供的发送命令，<strong>直接把消息发送给目标进程</strong><br>➢ 要求发送进程和接收进程都以<strong>显式方式提供对方的标识符</strong><br>➢ 系统提供下述两条通信命令(原语)：<br>        Send(<strong>Receiver</strong>, message)<br>        Receive(<strong>Sender</strong>, message)</p>
<h5 id="直接通信原语"><a href="#直接通信原语" class="headerlink" title="直接通信原语"></a>直接通信原语</h5><p>某些情况下，接收进程可与多个发送进程通信，因此，<strong>它不可能事先指定发送进程</strong>。<br>     例如，用于提供打印服务的进程，它可以接收来自任何一个进程的“打印请求”消息。<br>     对于这样的应用，在接收进程接收消息的原语中的源进程参数，<strong>是完成通信后的返回值</strong>，接收原语可表示为：Receive (id, message)</p>
<h5 id="消息格式"><a href="#消息格式" class="headerlink" title="消息格式"></a>消息格式</h5><p>➢ 通常，可把一个消息分成<strong>消息头和消息正文</strong>两部分。 </p>
<p>➢ <strong>消息头</strong>包括消息传输时所需的<strong>控制信息</strong>，如发送进程名、 接收进程名、消息长度、消息类型、消息编号及消息的发送日期和时间； </p>
<p>➢ <strong>消息正文</strong>则是发送进程实际上所发送的数据。</p>
<h5 id="通信链路"><a href="#通信链路" class="headerlink" title="通信链路"></a>通信链路</h5><p>为了在发送进程和接收进程之间能进行通信，必须在它们 之间建立一条通信链路。有两种方式建立通信链路：</p>
<ol>
<li><p><strong>隐式建立链路</strong>。发送进程无需明确提出建立链路的请 求，只需利用系统提供的发送命令(原语)，系统会自 动地为之建立一条链路。这种方式主要用于<strong>单机系统</strong> 中 </p>
</li>
<li><p><strong>显式建立链路</strong>。由发送进程在通信之前，用“建立连接”命令(原语)请求系统为之建立一条通信链路；在 链路使用完后，也应用显式方式拆除链路。这种方式 主要用于<strong>计算机网络</strong>中</p>
</li>
</ol>
<p>根据通信方式的不同，又可以把链路分为： </p>
<p>➢ <strong>单向通信链路</strong>: 只允许发送进程向接受者进程发送消 息 </p>
<p>➢ <strong>双向链路</strong>: 允许由进程A向进程B发送消息，也允许进 程B同时向进程A发送消息</p>
<p>根据<strong>通信链路的容量</strong>的不同也可以把链路分成： </p>
<p>➢ <strong>无容量通信链路</strong>: 在这种通信链路上没有缓冲区，因而 不能暂存任何消息 </p>
<p>➢ <strong>有容量通信链路</strong>: 在这种通信链路上设置了缓冲区，因 而能暂存消息，缓冲区数目愈多，通信链路的容量愈 大</p>
<p>➢ 利用直接通信原语，来解决生产者-消费者问题</p>
<p> ➢ 当生产者生产出一个产品(消息)后， 便用Send原语将消息发送给消费者进程；而消费者进程则利用Receive原语 来得到一个消息。</p>
<p>可以考虑使用<strong>阻塞</strong>。 例如，阻塞消费者，如果消息尚未生 产出来，消费者必须等待，直至生产 者进程将消息发送过来。</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230308144842725.png" class title="image-20230308144842725">

<h5 id="进程同步方式"><a href="#进程同步方式" class="headerlink" title="进程同步方式"></a>进程同步方式</h5><p>在进程之间进行通信时，往往也需要辅以进程同步，以使它们能协调通信</p>
<p>➢ 发送进程阻塞、 接收进程阻塞</p>
<p>➢ 发送进程不阻塞、 接收进程阻塞 </p>
<p>➢ 发送进程和接收进程均不阻塞</p>
<h4 id="间接通信方式（通过邮箱）"><a href="#间接通信方式（通过邮箱）" class="headerlink" title="间接通信方式（通过邮箱）"></a>间接通信方式（通过邮箱）</h4><p>通信线路是通过不同进程共享邮箱时建立的。</p>
<ol>
<li>进程不把消息直接发给接收者进程，而把消息放在某个<strong>双方共知的信箱（Mailbox）中</strong> </li>
<li>既可以实现实时通信，又可以实现<strong>非实时通信</strong></li>
<li>系统提供若干原语，分别用于信箱的<strong>创建、撤销</strong>和消息的<strong>发送、接收</strong></li>
</ol>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230308145011020.png" class title="image-20230308145011020">

<p><strong>信箱分为以下三类</strong> </p>
<p>➢ <strong>私用信箱</strong>：<strong>用户</strong>进程可为自己建立一个新信箱，并作为该<strong>进程的一 部分</strong>。信箱的拥有者有权从信箱中读取消息，其他用户则只能将自己构成的消息发送到该信箱中 </p>
<p>➢ <strong>公用信箱</strong>：它由<strong>操作系统</strong>创建，并提供给系统中的所有核准进程使 用。核准进程既可把消息发送到该信箱中，也可从信箱中读取发送 给自己的消息 </p>
<p>➢ <strong>共享信箱</strong>：它由<strong>某进程</strong>创建，在创建时或创建后，指明它是可共享的，<strong>同时须指出共享进程(用户)的名字</strong>。信箱的拥有者和共享者，都 有权从信箱中取走发送给自己的消息</p>
<ol>
<li>消息缓冲队列通信机制 </li>
<li>首先由美国的Hansen提出，并在RC4000系统上实现，后 来被广泛应用于本地进程之间的通信中。</li>
<li>基本思想：发送进程利用send原语，将消息发给接收进程； 接收进程则利用Receive原语，接收消息。</li>
</ol>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ol>
<li>当前应用<strong>最广泛</strong>的进程间通信机制 </li>
<li>系统提供<strong>发送消息</strong>Send(message)与<strong>接收消息</strong>Receive(message) 两个操 作，进程间则通过使用这两个操作进行通讯，无需共享任何变量 </li>
<li>实现方式的不同分成<strong>直接通信方式</strong>和<strong>间接通信方式</strong>两种 </li>
<li>进程间的数据交换，以<strong>格式化的消息</strong>为单位。所谓“信息”通常由消 息头和消息正文构成 </li>
<li>实现了大量数据的传递，隐藏了实现细节，简化了程序编制复杂性， 使用最广泛</li>
</ol>
<h4 id="管道通信（pipe）"><a href="#管道通信（pipe）" class="headerlink" title="管道通信（pipe）"></a>管道通信（pipe）</h4><p>管道：用于连接一个读进程和一个写进程以实现它们之间通信的一个共享<strong>文件</strong>，又名pipe文件。 </p>
<p>➢ 管道机制的协调能力：互斥、同步、对方是否存在</p>
<ol>
<li>所谓“管道”，是指用于连接一个读进程和一个写进程以实现他们之间通信的一个<strong>共享文件</strong>，又名pipe文件</li>
<li>向管道提供输入的<strong>发送进程(即写进程)<strong>，以字符流形式将大量的数据送人管道；而</strong>接收进程(即读进程</strong>)，可从管道中接收数据</li>
<li>这种方式首创于UNIX系统，因它能传送大量的数据，且很有效，故又被引入到许多其它操作系统中</li>
</ol>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230308145609059.png" class title="image-20230308145609059">

<ol>
<li><strong>互斥</strong>：即当一个进程正在对pipe执行读/写操作时，其它(另一)进程必须等待。</li>
<li><strong>同步</strong>：指当写(输入)进程把一定数量的数据写入pipe，便去睡眠等待， 直到读(输出)进程取走数据后，再把他唤醒。当读进程读一空pipe时，也应睡眠等待，直至写进程将数据写入管道后，才将之唤醒。</li>
<li><strong>确定对方是否存在，只有确定了对方已存在时，才能进行通信。</strong></li>
</ol>
<h4 id="客户机-服务器系统"><a href="#客户机-服务器系统" class="headerlink" title="客户机-服务器系统"></a>客户机-服务器系统</h4><p>➢ 套接字（Socket）<br>➢ IP地址（哪一台电脑）+端口号（哪一个程序）</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230308145710889.png" class title="image-20230308145710889">

<p>远程过程调用（RPC，Remote Procedure Call）和远程方法调用（RMI，Remote  Method Invocation，Java）</p>
<h2 id="线程的基本概念"><a href="#线程的基本概念" class="headerlink" title="线程的基本概念"></a>线程的基本概念</h2><h4 id="提出线程的目的"><a href="#提出线程的目的" class="headerlink" title="提出线程的目的"></a><strong>提出线程的目的</strong></h4><p>➢ 减少程序在并发执行时所付出的时空开销<br>➢ 使OS具有更好的并发性</p>
<p><strong>进程是拥有资源的基本单位（传统进程称为重型进程）</strong> </p>
<p><strong>线程作为调度和分派的基本单位（又称为轻型进程）</strong></p>
<h3 id="线程和进程的比较"><a href="#线程和进程的比较" class="headerlink" title="线程和进程的比较"></a>线程和进程的比较</h3><h4 id="调度的基本单位"><a href="#调度的基本单位" class="headerlink" title="调度的基本单位"></a>调度的基本单位</h4><p>➢在传统的OS中，拥有资源、独立调度和分派的基本单位都是进程；<br>➢在引入线程的OS中，线程作为调度和分派的基本单位，进程作为资源拥有的基本单位；<br>➢在同一进程中，线程的切换不会引起进程切换，在由一个进程中的线程切换到另一个进程中的线程时，将会引起进程切换。</p>
<h4 id="并发性"><a href="#并发性" class="headerlink" title="并发性"></a>并发性</h4><p>➢在引入线程的操作系统中，不仅进程之间可以并发执行，而且在一个进程中的多个线程之间，也可并发执行。</p>
<h4 id="拥有资源"><a href="#拥有资源" class="headerlink" title="拥有资源"></a>拥有资源</h4><p>➢进程是系统中拥有资源的一个基本单位，它可以拥有资源。<br>➢线程本身不拥有系统资源，仅有一点保证独立运行的资源。<br>➢允许多个线程共享其隶属进程所拥有的资源。</p>
<h4 id="独立性"><a href="#独立性" class="headerlink" title="独立性"></a>独立性</h4><p>➢同一进程中的不同线程之间的独立性要比不同进程之间的独立性低得多。</p>
<h4 id="系统开销"><a href="#系统开销" class="headerlink" title="系统开销"></a>系统开销</h4><p>➢在创建或撤消进程时，OS所付出的开销将显著大于创建或撤消线程时的开销。<br>➢线程切换的代价远低于进程切换的代价。<br>➢同一进程中的多个线程之间的同步和通信也比进程的简单。</p>
<h4 id="支持多处理机系统"><a href="#支持多处理机系统" class="headerlink" title="支持多处理机系统"></a>支持多处理机系统</h4><h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><p>➢ 执行态、就绪态、阻塞态 </p>
<p>➢ 线程状态转换与进程状态转换一样</p>
<h3 id="线程控制块（thread-control-block，TCB）"><a href="#线程控制块（thread-control-block，TCB）" class="headerlink" title="线程控制块（thread control block，TCB）"></a>线程控制块（thread control block，TCB）</h3><p>➢ 线程标识符、一组寄存器、线程<br>运行状态、优先级、线程专有存<br>储区、信号屏蔽、堆栈指针</p>
<h2 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h2><h3 id="内核支持线程KST"><a href="#内核支持线程KST" class="headerlink" title="内核支持线程KST"></a>内核支持线程KST</h3><p><strong>在内核空间实现</strong></p>
<p>优点：</p>
<p>➢在多处理机系统中，内核可同时调度同一进程的多个线程<br>➢如一个线程阻塞了，内核可调度其他线程(同一或其他进程)。<br>➢线程的切换比较快，开销小。<br>➢内核本身可采用多线程技术，提高执行速度和效率。</p>
<p>缺点：</p>
<p>➢对用户线程切换，开销较大。</p>
<h3 id="用户级线程ULT"><a href="#用户级线程ULT" class="headerlink" title="用户级线程ULT"></a>用户级线程ULT</h3><p><strong>在用户空间实现</strong><br>优点：</p>
<p>➢线程切换不需要转换到内核空间。<br>➢调度算法可以是进程专用的。<br>➢线程的实现与OS平台无关。</p>
<p>缺点：</p>
<p>➢系统调用的阻塞问题。<br>➢多线程应用不能利用多处理机进行多重处理的优点。</p>
<h3 id="ULT与KST组合方式"><a href="#ULT与KST组合方式" class="headerlink" title="ULT与KST组合方式"></a>ULT与KST组合方式</h3><h4 id="多对一模型"><a href="#多对一模型" class="headerlink" title="多对一模型"></a>多对一模型</h4><p><strong>多个用户级线程映射到一个内核线程。</strong><br>多个线程不能并行运行在多个处理器上。<br>线程管理在用户态执行，因此是高效的，但一个线程的阻塞系统调用会导致整个进程的阻塞 。<br>用于不支持内核线程的系统中。<br>例子: ➢Solaris Green Threads➢GNU Portable Threads</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230308150351364.png" class title="image-20230308150351364">

<h4 id="一对一模型"><a href="#一对一模型" class="headerlink" title="一对一模型"></a>一对一模型</h4><p><strong>每个用户级线程映射到一个内核线程。</strong><br>比多对一模型有更好的并发性。<br>允许多个线程并行运行在多个处理器上。<br>创建一个ULT需要创建一个KLT，效率较差。</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230308150452088.png" class title="image-20230308150452088">

<h4 id="多对多模型"><a href="#多对多模型" class="headerlink" title="多对多模型"></a>多对多模型</h4><p><strong>多个用户级线程映射为相等或小于数目的内核线程。</strong></p>
<p>允许操作系统创建足够多的KLT。</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230308150521250.png" class title="image-20230308150521250">

<h1 id="3-处理机调度与死锁"><a href="#3-处理机调度与死锁" class="headerlink" title="3 处理机调度与死锁"></a>3 处理机调度与死锁</h1><h2 id="处理机调度概述"><a href="#处理机调度概述" class="headerlink" title="处理机调度概述"></a>处理机调度概述</h2><ol>
<li>在多道程序系统中，一个作业从提交到执行，通常都要经历<strong>多级调度</strong><br>➢ 如高级调度、低级调度、中级调度以及I/O调度等</li>
<li>系统的<strong>运行性能</strong>在很大程度上取决于调度<br>➢ 如吞吐量的大小、周转时间的长短、响应的及时性等</li>
<li>调度是多道程序系统的关键</li>
</ol>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426131204628.png" class title="image-20230426131204628">

<p>◼CPU资源管理——多道程序设计面临的挑战<br> 批处理系统：如何安排内存中多个作业的运行顺序？<br> 交互式系统：如何更好应对不同的交互式请求？<br> 实时系统：如何保证实时服务的高质量？<br>◼ 进程调度——有效的管理CPU资源<br> When：何时进行进程调度？<br> How：遵循何种规则完成调度？<br> What：调度过程中需要完成哪些工作？<br>◼ 进程调度的级别<br> 高级调度：也称宏观调度，决定哪些程序可以进入系统<br> 中级调度：也称内存调度，决定内存中程序的位置和状态<br> 低级调度：也称微观调度，决定CPU资源在就绪进程间的分</p>
<h3 id="处理机调度层次"><a href="#处理机调度层次" class="headerlink" title="处理机调度层次"></a>处理机调度层次</h3><p><strong>高级调度（长程调度/作业调度）</strong><br><strong>中级调度（中程调度/内存调度）</strong><br><strong>低级调度（短程调度/进程调度）</strong></p>
<h4 id="高级调度"><a href="#高级调度" class="headerlink" title="高级调度"></a>高级调度</h4><p>调度对象：<strong>作业</strong><br>根据某种算法，决定将外存上处于后备队列中的作业调入内存，并为它们创建进程和分配必要的资源。然后，将新创建的进程<strong>排在就绪队列上等待调度</strong>。<br>主要用于多道批处理系统中</p>
<p>作业：在多道批处理操作系统中，用户提 交给系统的一项相对独立的工作</p>
<ol>
<li>作业（JOB）：是用户在一次算题过程中或一次事务处理中，要求计算机系统所做的工作的集合。在批处理系统中，以作业为单位从外存调入内存</li>
<li>作业和进程的关系：作业是比进程更广泛的概念，不仅包含了通常的程序和数据，而且还配有一份作业说明书，系统根据作业说明书对程序运行进行控制</li>
</ol>
<h5 id="作业控制块"><a href="#作业控制块" class="headerlink" title="作业控制块"></a>作业控制块</h5><ol>
<li>作业控制块（JCB）:多道批处理系统中，为 每个作业设置一个作业控制块。 JCB是一个 作业在系统中存在的惟一标志，系统根据JCB 才感知到作业的存在 </li>
<li>JCB包含内容：作业控制块JCB中包含了对作 业进行管理的必要信息，JCB中的信息一部分 是从用户提供的作业控制卡或作业说明书中 得到，另一部分是记录作业运行过程中的动 态信息 </li>
<li>JCB的生成：作业提交给系统后，便由“作业 注册”程序为作业建立一个作业控制块JCB， 放入后备队列</li>
</ol>
<h4 id="中级调度"><a href="#中级调度" class="headerlink" title="中级调度"></a>中级调度</h4><p>引入中级调度的主要目的，是为了提高内存利用率和系统吞吐量； 使那些暂时不能运行的进程不再占用宝贵的内存资源，将它们调至外 存上去等待，把此时的进程状态称为就绪驻外存状态或<strong>挂起</strong>状态；</p>
<p>当这些进程具备运行条件、且内存又稍有空闲时，由中级调度来 决定把就绪进程，重新调入内存，并修改其状态为就绪状态，挂在 就绪队列上等待进程调度；</p>
<p>即“<strong>对换</strong>” 功能；短期<strong>调整系统负荷</strong>，平顺系统操作</p>
<h4 id="低级调度"><a href="#低级调度" class="headerlink" title="低级调度"></a>低级调度</h4><p>调度对象：<strong>进程</strong></p>
<p>根据某种调度算法，决定就绪队列中的哪个进程应<strong>获得处理机</strong></p>
<p>应用在于多道批处理、分时和实时OS</p>
<h5 id="进程调度的任务"><a href="#进程调度的任务" class="headerlink" title="进程调度的任务"></a>进程调度的任务</h5><ol>
<li><strong>保存处理机现场信息</strong>。进程调度程序把当前进程的现场信息，如程序计数器及通用寄存器的内容等保留在该进程PCB的现场信息区中</li>
<li><strong>按某种算法挑选进程</strong>。根据一定的调度算法(如先到先服务)，从就绪队列中选出一个进程来，并把它的状态改为运行态，准备把CPU分配给它</li>
<li><strong>把处理器分配给进程</strong>。为选中的进程恢复现场信息，并把CPU的控制权交给该进程,它接着上次间断的地方继续运行</li>
</ol>
<h5 id="进程调度机制"><a href="#进程调度机制" class="headerlink" title="进程调度机制"></a>进程调度机制</h5><ol>
<li><strong>排队器</strong>:将就绪进程按一定方式排成队列</li>
<li><strong>分派器</strong>（dispatcher，分派程序）:把进程调度程序选定的进程，从就绪队列中取出，进行上下文切换，把处理器分配给它</li>
<li><strong>上下文切换机制</strong>:①保存当前进程上下文，装入分派程序上下文，分派程序运行； ②移出分派程序，装入新选进程上</li>
</ol>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426131633587.png" class title="image-20230426131633587">

<h4 id="处理机调度三级层次"><a href="#处理机调度三级层次" class="headerlink" title="处理机调度三级层次"></a>处理机调度三级层次</h4><img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426131729299.png" class title="image-20230426131729299">

<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426131751390.png" class title="image-20230426131751390">

<h3 id="进程调度的任务-1"><a href="#进程调度的任务-1" class="headerlink" title="进程调度的任务"></a>进程调度的任务</h3><p><strong>进程调度的任务</strong><br>➢ 保存处理机的现场信息<br>➢ 按某种算法选取进程<br>➢ 把处理器分配给进程</p>
<p><strong>进程调度机制（调度程序分为三部分）</strong><br>➢ 排队器：用于将就绪进程插入相应的就绪队列<br>➢ 分派器：用于将选定的进程移出就绪队列<br>➢ 上下文切换器：进行新旧进程之间的上下文切换</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426131903355.png" class title="image-20230426131903355">

<h3 id="进程调度的方式"><a href="#进程调度的方式" class="headerlink" title="进程调度的方式"></a>进程调度的方式</h3><p><strong>非抢占方式</strong>： 一旦把处理机分配给某进 程后，便让该进程一直执 行，直至该进程完成或发 生某事件而被阻塞时，才 再把处理机分配给其他进 程，决不允许某进程抢占 已经分配出去的处理机。</p>
<p><strong>抢占方式</strong>：允许调度程序根据某种原 则，去暂停某个正在执行的进程，将 已分配给该进程的处理机重新分配给 另一进程。(现代OS广泛采用)</p>
<h3 id="调度准则"><a href="#调度准则" class="headerlink" title="调度准则"></a>调度准则</h3><img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426132012606.png" class title="image-20230426132012606">

<p>➢ 取决于操作系统的类型和目标<br>➢ 不同的操作系统，有不同的调度方式和算法<br>➢ 有面向用户的准则，也有面向系统的准则<br>Max CPU utilization 		最大CPU利用率<br>Max throughput				最大吞吐量<br>Min turnaround time 	 最小周转时间<br>Min waiting time  			 最小等待时间<br>Min response time			最小响应时间</p>
<p><strong>普遍目标</strong>： ➢ 资源利用率 ➢ 公平性 ➢ 平衡性 ➢ 策略强制执行</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.059ex;" xmlns="http://www.w3.org/2000/svg" width="56.176ex" height="5.285ex" role="img" focusable="false" viewbox="0 -1426 24830 2336"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mi" transform="translate(1511,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(2278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">利</text></g><g data-mml-node="mi" transform="translate(3278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">用</text></g><g data-mml-node="mi" transform="translate(4278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">率</text></g><g data-mml-node="mo" transform="translate(5555.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(6611.6,0)"><g data-mml-node="mrow" transform="translate(4970.2,676)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mi" transform="translate(1511,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(2278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(3278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">效</text></g><g data-mml-node="mi" transform="translate(4278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">工</text></g><g data-mml-node="mi" transform="translate(5278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(6278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(7278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mi" transform="translate(1511,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(2278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(3278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">效</text></g><g data-mml-node="mi" transform="translate(4278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">工</text></g><g data-mml-node="mi" transform="translate(5278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(6278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(7278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mo" transform="translate(8500.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(9500.4,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mi" transform="translate(10260.4,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mi" transform="translate(11011.4,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(11778.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">空</text></g><g data-mml-node="mi" transform="translate(12778.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">闲</text></g><g data-mml-node="mi" transform="translate(13778.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">等</text></g><g data-mml-node="mi" transform="translate(14778.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">待</text></g><g data-mml-node="mi" transform="translate(15778.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(16778.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><rect width="17978.4" height="60" x="120" y="220"/></g></g></g></svg></mjx-container><br>批处理系统的目标： ➢ 平均周转时间短、系统吞吐量高、处理机利用率高</p>
<p>分时系统的目标： ➢ 响应时间快、均衡性</p>
<p>实时系统的目标： ➢ 截止时间的保证、可预测性</p>
<h3 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h3><h4 id="周转时间"><a href="#周转时间" class="headerlink" title="周转时间"></a>周转时间</h4><p>➢ 从作业提交给系统开始，到作业完成为止的这段时间间隔。<br>➢ <strong>平均周转时间</strong> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="11.327ex" height="2.755ex" role="img" focusable="false" viewbox="0 -864.9 5006.5 1217.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><rect width="624.3" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(864.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="munderover" transform="translate(1253.3,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="TeXAtom" transform="translate(1089,477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="msub" transform="translate(3706.6,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(4617.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container><br>➢ <strong>带权周转时间</strong>：权值为作业周转时间T与系统为之服务时间TS之比。<br>➢ 平均带权周转时间<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.045ex;" xmlns="http://www.w3.org/2000/svg" width="12.058ex" height="3.15ex" role="img" focusable="false" viewbox="0 -930.3 5329.7 1392.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><rect width="624.3" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(864.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="munderover" transform="translate(1253.3,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="TeXAtom" transform="translate(1089,477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mfrac" transform="translate(3706.6,0)"><g data-mml-node="msub" transform="translate(295,451.6) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="msub" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g></g><rect width="994.1" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(4940.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p>
<h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p>➢ 单位时间内所完成的作业数</p>
<h4 id="等待时间（进程调度）"><a href="#等待时间（进程调度）" class="headerlink" title="等待时间（进程调度）"></a>等待时间（进程调度）</h4><p>➢ 进程在就绪队列中等待调度的所有时间之和。</p>
<h4 id="分时系统的目标"><a href="#分时系统的目标" class="headerlink" title="分时系统的目标"></a>分时系统的目标</h4><h5 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h5><p>➢ 从用户通过键盘提交请求开始，直到系统首次显示出处理结果为止的一段 时间。</p>
<h5 id="响应时间包括"><a href="#响应时间包括" class="headerlink" title="响应时间包括"></a>响应时间包括</h5><p>➢ ①从键盘输入的请求信息传送到处理机的时间<br>➢ ②处理机对请求信息进行处理的时间<br>➢ ③将所形成的响应回送到终端显示器的时间</p>
<h5 id="均衡性"><a href="#均衡性" class="headerlink" title="均衡性"></a>均衡性</h5><p>➢ 响应时间快慢与用户请求复杂度相适应</p>
<h4 id="实时系统的目标"><a href="#实时系统的目标" class="headerlink" title="实时系统的目标"></a>实时系统的目标</h4><h5 id="截止时间"><a href="#截止时间" class="headerlink" title="截止时间"></a>截止时间</h5><p>➢ 是指某任务必须开始执行的最迟时间，或必须完成的最迟时间</p>
<h2 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h2><h3 id="先来先服务（FCFS）调度算法"><a href="#先来先服务（FCFS）调度算法" class="headerlink" title="先来先服务（FCFS）调度算法"></a>先来先服务（FCFS）调度算法</h3><ol>
<li>作业调度和进程调度均可，最简单，本质上属<strong>非抢占方式</strong></li>
<li>有利于<strong>长作业/进程</strong>，不利于<strong>短作业</strong></li>
<li>有利于<strong>CPU繁忙型</strong>的作业(如通常的科学计算)，而不利于<strong>I/O繁忙</strong>的作业/进程（如大多数的事务处理)</li>
</ol>
<h3 id="短作业优先（SJF）调度算法"><a href="#短作业优先（SJF）调度算法" class="headerlink" title="短作业优先（SJF）调度算法"></a>短作业优先（SJF）调度算法</h3><h5 id="SJF算法：既可用于作业，也可用于进程"><a href="#SJF算法：既可用于作业，也可用于进程" class="headerlink" title="SJF算法：既可用于作业，也可用于进程"></a>SJF算法：既可用于作业，也可用于进程</h5><p>➢ 对作业：从后备队列中选择若干个估计运行时间最短的作业。 ➢ 对进程：关联到每个进程下次运行的CPU区间长度，调度最短的进程。</p>
<h5 id="对进程调度，SJF有两种模式"><a href="#对进程调度，SJF有两种模式" class="headerlink" title="对进程调度，SJF有两种模式"></a>对进程调度，SJF有两种模式</h5><p><strong>➢ 非抢占式SJF</strong><br><strong>➢ 抢占式SJF</strong>–抢占发生在有比当前进程剩余时间片更短的进程到达时，也称为最短剩余时间优先调度</p>
<h5 id="SJF是最优的（对一组指定的进程而言），它给出了最短的平均等待-时间。"><a href="#SJF是最优的（对一组指定的进程而言），它给出了最短的平均等待-时间。" class="headerlink" title="SJF是最优的（对一组指定的进程而言），它给出了最短的平均等待 时间。"></a>SJF是最优的（对一组指定的进程而言），它给出了最短的平均等待 时间。</h5><img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426204329895.png" class title="image-20230426204329895">

<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426204335845.png" class title="image-20230426204335845">

<h5 id="SJF比FCFS算法有明显改进"><a href="#SJF比FCFS算法有明显改进" class="headerlink" title="SJF比FCFS算法有明显改进"></a>SJF比FCFS算法有明显改进</h5><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>只能估算进程的运行时间（估值不准确），所以通常用于作业调度<br>对长作业不利<br>采用SJF算法时，人-机无法实现交互<br>完全未考虑作业的紧迫程度</p>
<h3 id="优先级调度算法PR"><a href="#优先级调度算法PR" class="headerlink" title="优先级调度算法PR"></a>优先级调度算法PR</h3><p>既可用于作业调度，也可用于进程调度。</p>
<p>基于作业/进程的紧迫程度，由外部赋予作业相应的优先级，调度算法 根据优先级进行调度。</p>
<p>​	➢ 每个进程都有一个优先数，优先数为整数。<br>​	➢ 默认：小的优先数具有高优先级。<br>​	➢ 目前主流的操作系统调度算法。</p>
<p><strong>高响应比优先调度算法是一种优先级调度算法</strong>，用于作业调度。</p>
<h4 id="优先级调度算法的类型"><a href="#优先级调度算法的类型" class="headerlink" title="优先级调度算法的类型"></a>优先级调度算法的类型</h4><p>➢ 非抢占式 ➢ 抢占式</p>
<h4 id="优先级类型"><a href="#优先级类型" class="headerlink" title="优先级类型"></a>优先级类型</h4><p><strong>➢ 静态优先级</strong><br> 创建进程时确定优先数(整数)，在进程的整个运行期间保持不变<br> 简单易行，系统开销小<br> 不够精确，可能会出现优先级低的进程长期没有被调度的情况<br><strong>➢ 动态优先级</strong><br> 创建进程时先赋予其一个优先级，然后其值随进程的推进或等待时间的增加而改变</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426204751472.png" class title="image-20230426204751472">

<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>➢ 实现简单，考虑了进程的紧迫程度<br>➢ 灵活，可模拟其它算法</p>
<h5 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h5><p>➢ 饥饿 ——低优先级的进程可能永远得不到运行</p>
<h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>➢ 老化 —— 视进程等待时间的延长提高其优先数</p>
<h3 id="高相应比优先调度算法（PR的特例）"><a href="#高相应比优先调度算法（PR的特例）" class="headerlink" title="高相应比优先调度算法（PR的特例）"></a>高相应比优先调度算法（PR的特例）</h3><p>既考虑作业的等到时间，又考虑作业的运行时间<br>➢ 优先级：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.158ex;" xmlns="http://www.w3.org/2000/svg" width="18.238ex" height="3.447ex" role="img" focusable="false" viewbox="0 -1011.8 8061.2 1523.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,481.4) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">等</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">待</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mo" transform="translate(4000,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(4778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">要</text></g><g data-mml-node="mi" transform="translate(5778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">求</text></g><g data-mml-node="mi" transform="translate(6778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">服</text></g><g data-mml-node="mi" transform="translate(7778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">务</text></g><g data-mml-node="mi" transform="translate(8778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(9778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><g data-mml-node="mrow" transform="translate(1909.3,-370.3) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">要</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">求</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">服</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">务</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><rect width="7821.2" height="60" x="120" y="220"/></g></g></g></svg></mjx-container><br>➢ 响应比：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.158ex;" xmlns="http://www.w3.org/2000/svg" width="37.576ex" height="3.447ex" role="img" focusable="false" viewbox="0 -1011.8 16608.6 1523.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mi" transform="translate(792,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g><g data-mml-node="mo" transform="translate(1475.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(2531.2,0)"><g data-mml-node="mrow" transform="translate(220,481.4) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">等</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">待</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mo" transform="translate(4000,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(4778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">要</text></g><g data-mml-node="mi" transform="translate(5778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">求</text></g><g data-mml-node="mi" transform="translate(6778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">服</text></g><g data-mml-node="mi" transform="translate(7778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">务</text></g><g data-mml-node="mi" transform="translate(8778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(9778,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><g data-mml-node="mrow" transform="translate(1909.3,-370.3) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">要</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">求</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">服</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">务</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><rect width="7821.2" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(10870.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(11926,0)"><g data-mml-node="mrow" transform="translate(927.1,481.4) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">响</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">应</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><g data-mml-node="mrow" transform="translate(220,-370.3) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">要</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">求</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">服</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">务</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><rect width="4442.6" height="60" x="120" y="220"/></g></g></g></svg></mjx-container><br>➢ 如等待时间相同，运行时间越短，类似于SJF<br>➢ 如运行时间相同，取决于等待时间，类似于FCFS<br>➢ 长作业可随其等待时间的增加而提高，也可得到服务<br>➢ 缺点：每次调度之前，都需要计算响应比，增加系统开销</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426205046191.png" class title="image-20230426205046191">

<h3 id="时间片轮转-Round-Robin，RR-调度算法"><a href="#时间片轮转-Round-Robin，RR-调度算法" class="headerlink" title="时间片轮转(Round-Robin，RR)调度算法"></a>时间片轮转(Round-Robin，RR)调度算法</h3><p>专为分时系统设计，类似于 FCFS，但增加了抢占</p>
<p>时间片q （Time Quantum） ➢ 小单位的CPU时间，通常为 10~100毫秒</p>
<p>为每个进程分配不 超过一个时间片的 CPU。时间片用完后，该进程将被抢占并插入就绪队列末尾，循环执行</p>
<p>➢ 假定就绪队列中有n个 进程、时间片为q ➢ 则每个进程每次得到 1/n的、不超过q单位的 成块CPU时间 ➢ 没有任何一个进程等待 时间超过(n-1) q单位</p>
<p><strong>特性</strong> ➢ q 大–&gt; FCFS ➢ q 小–&gt; 增加上下文切换的时间</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426205343398.png" class title="image-20230426205343398">

<h4 id="时间片大小的确定"><a href="#时间片大小的确定" class="headerlink" title="时间片大小的确定"></a>时间片大小的确定</h4><h5 id="时间片设置应考虑"><a href="#时间片设置应考虑" class="headerlink" title="时间片设置应考虑"></a>时间片设置应考虑</h5><p>➢ 系统对响应时间的要求<br>➢ 就绪队列中进程的数目<br>➢ 系统的处理能力</p>
<p><strong>一般准则</strong>：时间片/10&gt;进程上下文切换时间</p>
<h3 id="多级队列调度算法"><a href="#多级队列调度算法" class="headerlink" title="多级队列调度算法"></a>多级队列调度算法</h3><p>就绪队列从一个分为多个，如：➢ 前台[交互式] ➢ 后台[批处理]</p>
<p>每个队列有自己的调度算法 ➢ 前台 – RR ➢ 后台 – FCFS</p>
<p>调度须在队列间进行<br><strong>➢ 固定优先级调度</strong>。即前台运行完后再运行后台，有可能产生饥饿。<br><strong>➢ 给定时间片调度</strong>。即每个队列得到一定的CPU时间，进程在给定时间内执行；如80%的时间执行前台的RR调度，20%的时间执行后台的FCFS调度</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426205718047.png" class title="image-20230426205718047">

<h5 id="进程能在不同的队列间移动"><a href="#进程能在不同的队列间移动" class="headerlink" title="进程能在不同的队列间移动"></a>进程能在不同的队列间移动</h5><h5 id="其他调度算法的局限性"><a href="#其他调度算法的局限性" class="headerlink" title="其他调度算法的局限性"></a>其他调度算法的局限性</h5><p>➢ 短进程优先的调度算法，仅照顾了短进程而忽略了长进程<br>➢ 如果并未指明进程的长度，则短进程优先和基于进程长度的抢占式调度算法都将无法使用。</p>
<h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><p>➢ 不必事先知道各种进程所需的执行时间；<br>➢ 可以满足各种类型进程的需要。</p>
<h5 id="多级反馈队列调度程序可由下列参数来定义"><a href="#多级反馈队列调度程序可由下列参数来定义" class="headerlink" title="多级反馈队列调度程序可由下列参数来定义"></a>多级反馈队列调度程序可由下列参数来定义</h5><p>队列数量<br>每个队列的调度算法<br>用以确定合适升级到更高优先级队列的方法<br>用以确定进程在需要服务时应进入哪个队列的方法<br>用以确定进程在需要服务时应进入哪个队列的方法</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426210103487.png" class title="image-20230426210103487">

<p><strong>例如，若一个进程总共需运行100个时间片</strong></p>
<ol>
<li>初始时指定它在优先级最高的进程组中，很快就会在CPU上运行一个时间片，之后优先级也降低一个级别</li>
<li>当它第二次有机会在CPU上运行时，它将运行2t</li>
<li>以后它将在CPU上运行的时间长度依次是4，8，16，32和64个t，最后一次运行时，只须64个t中37个 t 就可完成</li>
<li><strong>总共需调度7次</strong>。比较单纯的轮转法，节省了93次切换时间</li>
</ol>
<h4 id="多级反馈队列调度算法的性能"><a href="#多级反馈队列调度算法的性能" class="headerlink" title="多级反馈队列调度算法的性能"></a>多级反馈队列调度算法的性能</h4><ol>
<li><strong>终端型作业用户</strong><br> ◆ 在第一队列中完成，作业短，交互型；</li>
<li><strong>短批处理作业用户</strong><br> ◆ 周期时间较短，通常三个队列即可完成；</li>
<li><strong>长批处理作业用户</strong><br> ◆ 依次在前n个队列中执行，然后再按轮<br> 转方式运行。</li>
</ol>
<h3 id="基于公平原则的调度算法"><a href="#基于公平原则的调度算法" class="headerlink" title="基于公平原则的调度算法"></a>基于公平原则的调度算法</h3><p>主要考虑调度的公平性。</p>
<p><strong>保证调度算法：</strong><br>➢ <strong>性能保证</strong>，而非优先运行；<br>➢ 如保证处理机分配的公平性（处理机时间为1/n）。</p>
<p>公平分享调度算法：<br>➢ 调度的公平性主要<strong>针对用户而言</strong>；<br>➢ 使所有用户能获得相同的处理机时间或时间比例。</p>
<h2 id="实时调度"><a href="#实时调度" class="headerlink" title="实时调度"></a>实时调度</h2><p>实时调度是针对实时任务的调度<br>实时任务，都联系着一个截止时间<br>    ➢ 硬实时HRT任务<br>    ➢ 软实时SRT任务<br>实时调度应具备一定的条件</p>
<h3 id="实现实时调度的基本条件"><a href="#实现实时调度的基本条件" class="headerlink" title="实现实时调度的基本条件"></a>实现实时调度的基本条件</h3><h5 id="1-提供必要的信息（向调度程序提供）"><a href="#1-提供必要的信息（向调度程序提供）" class="headerlink" title="1. 提供必要的信息（向调度程序提供）"></a>1. 提供必要的信息（向调度程序提供）</h5><p>(1) 就绪时间<br>(2) 开始截止时间和完成截止时间<br>(3) 处理时间<br>(4) 资源要求<br>(5) 优先级</p>
<h5 id="2-系统处理能力强"><a href="#2-系统处理能力强" class="headerlink" title="2. 系统处理能力强"></a>2. 系统处理能力强</h5><p>⚫ 实时系统中通常都有着多个实时任务<br>⚫ 若处理机的处理能力不够强，则有可能因处理机忙不过来而使某些实时任务不得到及时处理， 从而导致发生难以预料的后果<br>⚫ 假定系统中有m个周期性的硬实时任务，它们的处理时间可表示为Ci，周期时间表示为Pi，则在单处理机情况下，必须满足下面的限制条件：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex;" xmlns="http://www.w3.org/2000/svg" width="11.145ex" height="6.354ex" role="img" focusable="false" viewbox="0 -1562.5 4926.2 2808.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"/></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(411.6,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mfrac" transform="translate(1610.7,0)"><g data-mml-node="msub" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mi" transform="translate(748,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="msub" transform="translate(256.5,-686)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mi" transform="translate(675,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><rect width="1242" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(3370.4,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mn" transform="translate(4426.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></p>
<h5 id="3-采用抢占式调度机制"><a href="#3-采用抢占式调度机制" class="headerlink" title="3. 采用抢占式调度机制"></a>3. 采用抢占式调度机制</h5><p>⚫ 当一个优先权更高的任务到达时，允许将当前任务暂时挂起，而<strong>令高优先权任务立即投入运行</strong>，这样便可满足该硬实时任务对截止时间的要求。<strong>这种调度机制比较复杂</strong><br>⚫ 对于一些小的实时系统，如果能<strong>预知</strong>任务的开始截止时间，则对实时任务的调度<strong>可采用非抢占调度</strong>机制，<strong>简化</strong>调度程序和对任务调度时所花费的系统开销。<br>        但在设计这种调度机制时，<strong>应使所有的实时任务都比较小</strong>，并在执行完关键性程序和临界区后，能及时地<strong>将自己阻塞起来</strong>，以便释放出处理机，供调度程序去调度那种开始截止时间即将到达的任</p>
<h5 id="4-具有快速切换机制"><a href="#4-具有快速切换机制" class="headerlink" title="4. 具有快速切换机制"></a>4. 具有快速切换机制</h5><p>⚫ <strong>对中断的快速响应能力。</strong>对紧迫的外部事件请求中断能及时响应，要求系统具有快速硬件中断机构，还应使禁止中断的时间间隔尽量短，以免耽误时机(其它紧迫任务)<br>⚫ <strong>快速的任务分派能力。</strong>为了提高分派程序进行任务切换时的速度，应使系统中的每个运行功能单位适当的小，以减少任务切换的时间开销</p>
<h3 id="实时调度算法"><a href="#实时调度算法" class="headerlink" title="实时调度算法"></a>实时调度算法</h3><p>根据实时任务性质<br>◼ HRT调度算法<br>◼ SRT调度算法</p>
<p>根据调度方式<br>◼ 非抢占式调度算法<br>◼ 抢占式调度算法</p>
<h4 id="非抢占式调度算法"><a href="#非抢占式调度算法" class="headerlink" title="非抢占式调度算法"></a>非抢占式调度算法</h4><p><strong>非抢占式轮转调度算法</strong><br>◼ 响应时间：数秒至数十秒<br>◼ 可用于要求不太严格的实时控制系统</p>
<p><strong>非抢占式优先调度算法</strong><br>◼ 响应时间：数秒至数百毫秒<br>◼ 可用于有一定要求的实时控制系统</p>
<h4 id="抢占式调度算法"><a href="#抢占式调度算法" class="headerlink" title="抢占式调度算法"></a>抢占式调度算法</h4><p><strong>基于时钟中断的抢占式优先级调度</strong><br>➢ 响应时间：几十毫秒至几毫秒<br>➢ 可用于大多数实时系统</p>
<p><strong>基于时钟中断的抢占式优先级调度</strong><br>➢ 响应时间：几十毫秒至几毫秒<br>➢ 可用于大多数实时系统</p>
<h4 id="最早截止时间优先-EDF-调度算法"><a href="#最早截止时间优先-EDF-调度算法" class="headerlink" title="最早截止时间优先(EDF)调度算法"></a>最早截止时间优先(EDF)调度算法</h4><p>EDF根据任务的截止时间确定优先级，截止时间越早，优先级越高<br><strong>既可用于抢占式调度，也可用于非抢占式调度</strong><br>EDF根据任务的截止时间确定优先级，截止时间越早，优先级越高<br>既可用于抢占式调度，也可用于非抢占式调度</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426211608725.png" class title="image-20230426211608725">

<p><strong>抢占式EDF例子</strong></p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426211625154.png" class title="image-20230426211625154">

<h4 id="最低松弛度优先LLF算法"><a href="#最低松弛度优先LLF算法" class="headerlink" title="最低松弛度优先LLF算法"></a>最低松弛度优先LLF算法</h4><p>根据任务的紧急程度（<strong>松弛度</strong>）确定任务优先级</p>
<p>➢ 紧急程度越高（松弛度越低），优先级越高<br><strong>➢ 松弛度=必须完成时间－其本身的运行时间－当前时间</strong></p>
<p>主要用在抢占式调度方式中</p>
<p>例子：➢ 两个周期性实时任务A和B，任务A要求每20 ms执行一次，执行时间 为10 ms，任务B要求每50 ms执行一次，执行时间为25 m</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426211720425.png" class title="image-20230426211720425">

<h4 id="优先级倒置现象"><a href="#优先级倒置现象" class="headerlink" title="优先级倒置现象"></a>优先级倒置现象</h4><p>采用优先级调度和抢占方式，可能产生<strong>优先级倒置</strong>。现象：高优先级进程 被低优先级进程延迟或阻塞。</p>
<h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><p>➢ 制定一些规定，如规定低优先级进程执行后，其所占用的处理机不允许被抢占；<br>➢ 建立动态优先级继承</p>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>死锁（Deadlock）：指多个进程在运行过程中因争夺资源而造成的一种僵 局，当进程处于这种僵持状态时，若无外力作用，这些进程都将永远不能再向 前推进</p>
<h4 id="可重用性资源和可消耗性资源"><a href="#可重用性资源和可消耗性资源" class="headerlink" title="可重用性资源和可消耗性资源"></a>可重用性资源和可消耗性资源</h4><p>➢ 可重用性资源：一次只能分配给一个进程，不允许多个进程共享，遵循：<br>    ➢ 请求资源 - 使用资源 - 释放资源 （大部分资源）。<br>➢ 可消耗性资源：由进程动态创建和消耗 （进程间通信的消息）。</p>
<h4 id="可抢占性和不可抢占性资源"><a href="#可抢占性和不可抢占性资源" class="headerlink" title="可抢占性和不可抢占性资源"></a>可抢占性和不可抢占性资源</h4><p>➢ 可抢占性资源：某进程在获得这类资源后，该资源可以再被其他进程或系统抢占，<strong>CPU（处理机）和主存区。</strong><br>➢ 不可抢占资源：当系统把这类资源分配给某进程后，再不能强行收回，只能在进程用完后自行释放，<strong>打印机、磁带机。</strong></p>
<h3 id="死锁原因"><a href="#死锁原因" class="headerlink" title="死锁原因"></a>死锁原因</h3><h5 id="竞争不可抢占性资源引起死锁"><a href="#竞争不可抢占性资源引起死锁" class="headerlink" title="竞争不可抢占性资源引起死锁"></a>竞争不可抢占性资源引起死锁</h5><p>➢ 系统中的不可抢占性资源，由于它们的数量不能满足诸进程运行的需 要，会使进程在运行过程中，因争夺这些资源而陷入僵局。</p>
<h5 id="竞争可消耗性资源引起死锁"><a href="#竞争可消耗性资源引起死锁" class="headerlink" title="竞争可消耗性资源引起死锁"></a>竞争可消耗性资源引起死锁</h5><p>➢ <strong>临时性资源</strong>，是指由一个进程产生，被另一个进程使用一短暂时间后便无用的资源，故也称之为<strong>消耗性资源</strong>，它也<strong>可能</strong>引起死锁</p>
<h5 id="进程推进顺序不当引起死锁"><a href="#进程推进顺序不当引起死锁" class="headerlink" title="进程推进顺序不当引起死锁"></a>进程推进顺序不当引起死锁</h5><p>➢ 进程推进顺序合法<br>➢ 进程推进顺序非法</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426212123772.png" class title="image-20230426212123772">

<h3 id="死锁定义"><a href="#死锁定义" class="headerlink" title="死锁定义"></a>死锁定义</h3><p>死锁：一组等待的进程，其中每一个进程都持有资源，并且等待着由 这个组中其他进程所持有的资源。</p>
<p>如果一个进程集合中的每个进程都在等待只能由该组进程中的其他进 程才能引发的事件，那么，该组进程是死锁的。</p>
<h4 id="产生死锁的必要条件"><a href="#产生死锁的必要条件" class="headerlink" title="产生死锁的必要条件"></a>产生死锁的必要条件</h4><p><strong>互斥</strong> ➢ 一段时间内某资源只能被一个进程占用。</p>
<p><strong>请求和保持</strong> ➢ 一个至少持有一个资源的进程等待获得额外的由其他进程所持有的资源。</p>
<p><strong>不可抢占</strong> ➢ 一个资源只有当持有它的进程完成任务后才释放。</p>
<p><strong>循环等待</strong> </p>
<p>➢ 等待资源的进程之间存在环 {P0, P1, …, Pn} 。<br>➢ P0 等待P1占有的资源, P1等待P2占有的资源, …, Pn–1等待Pn占有的资源, P0等待Pn占有的资源</p>
<h4 id="资源分配图"><a href="#资源分配图" class="headerlink" title="资源分配图"></a>资源分配图</h4><p>略…（懒…）</p>
<h3 id="处理死锁的方法"><a href="#处理死锁的方法" class="headerlink" title="处理死锁的方法"></a>处理死锁的方法</h3><h5 id="确保系统永远不会进入死锁状态"><a href="#确保系统永远不会进入死锁状态" class="headerlink" title="确保系统永远不会进入死锁状态"></a>确保系统永远不会进入死锁状态</h5><p>➢ 死锁预防<br>➢ 死锁避免</p>
<h5 id="允许系统进入死锁状态，然后恢复系统"><a href="#允许系统进入死锁状态，然后恢复系统" class="headerlink" title="允许系统进入死锁状态，然后恢复系统"></a>允许系统进入死锁状态，然后恢复系统</h5><p>➢ 死锁检测<br>➢ 死锁恢复</p>
<h5 id="忽略这个问题，假装系统中从未出现过死锁。这个方法被大部分的操作系统采用，包括UNIX"><a href="#忽略这个问题，假装系统中从未出现过死锁。这个方法被大部分的操作系统采用，包括UNIX" class="headerlink" title="忽略这个问题，假装系统中从未出现过死锁。这个方法被大部分的操作系统采用，包括UNIX"></a>忽略这个问题，假装系统中从未出现过死锁。这个方法被大部分的操作系统采用，包括UNIX</h5><h5 id="预防死锁"><a href="#预防死锁" class="headerlink" title="预防死锁"></a>预防死锁</h5><p>➢ 破坏死锁的四个必要条件中一个或几个。</p>
<h5 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h5><p>➢ 在资源动态分配时，防止系统进入不安全状态。</p>
<h5 id="检测死锁"><a href="#检测死锁" class="headerlink" title="检测死锁"></a>检测死锁</h5><p>➢ 事先不采取任何措施，允许死锁发生，但及时检测死锁发生。</p>
<h5 id="解除死锁"><a href="#解除死锁" class="headerlink" title="解除死锁"></a>解除死锁</h5><p>➢ 检测到死锁发生时，采取相应措施，将进程从死锁状态中解脱出来。</p>
<h3 id="预防死锁-1"><a href="#预防死锁-1" class="headerlink" title="预防死锁"></a>预防死锁</h3><p>破坏死锁的四个必要条件中的一个或几个</p>
<p><strong>互斥</strong>：互斥条件是共享资源必须的，不仅不能改变，还应加以保证</p>
<p><strong>请求和保持</strong>：必须保证进程申请资源的时候没有占有其他资源<br>➢ 要求进程在执行前一次性申请全部的资源，只有没有占有资源时才可以分配资源<br>➢ 资源利用率低，可能出现饥饿</p>
<p><strong>非抢占：</strong><br>➢ 如果一个进程的申请没有实现，它要释放所有占有的资源；<br>➢ 先占的资源放入进程等待资源列表中；<br>➢ 进程在重新得到旧的资源的时候可以重新开始。</p>
<p><strong>循环等待</strong>：对所有的资源类型排序进行线性排序，并赋予不同的序 号，要求进程按照递增顺序申请资源。<br>➢ 如何规定每种资源的序号是十分重要的；<br>➢ 限制新类型设备的增加；<br>➢ 作业使用资源的顺序与系统规定的顺序不同；<br>➢ 限制用户简单、自主的编程。</p>
<h3 id="避免死锁-1"><a href="#避免死锁-1" class="headerlink" title="避免死锁"></a>避免死锁</h3><h5 id="预防和避免的差别是什么？"><a href="#预防和避免的差别是什么？" class="headerlink" title="预防和避免的差别是什么？"></a>预防和避免的差别是什么？</h5><ol>
<li>死锁 → 四个必要条件</li>
<li>(4个必要条件)→(死锁)</li>
<li>4个必要条件 → 死锁 (不一定)</li>
<li>死锁防止是严格破坏4个必要条件之一，一定不出现死锁；而<strong>死锁的避免是不那么严格地限制死锁必要条件的存在</strong>，其目的是提高系统的资源利用率。万一当死锁有<strong>可能</strong>出现时，就<strong>小心避免</strong>这种情况的发生。</li>
</ol>
<p>需要附加先验信息：<br>设一个简单而有效的模型，要求每一个进程声明它所需要的资源的最大数。</p>
<p><strong>死锁避免算法</strong>动态检查资源分配状态以确保不会出现循环等待的情况。</p>
<p>资源分配状态定义为可用的与已分配的资源数，和进程所需的最大资源量。</p>
<h4 id="安全状态"><a href="#安全状态" class="headerlink" title="安全状态"></a>安全状态</h4><p>➢ 当进程申请一个有效的资源的时候，系统必须确定分配后是安全的。<br><strong>➢ 如果存在一个安全序列，则系统处于安全态。</strong><br>➢ 进程序列&lt;P1, P2, …, Pn&gt;是安全的，如果每一个进程Pi所申请的可以被满足<br>的资源数加上其他进程所持有的该资源数小于系统总数。<br>        ⚫ 如果 Pi 需要的资源不能马上获得，那么Pi 等待直到所有的Pi-1进程结束。<br>        ⚫ 当Pi-1 结束后， Pi获得所需的资源，执行、返回资源、结束。<br>        ⚫ 当Pi结束后， Pi+1获得所需的资源执行，依此类推。</p>
<p>如果一个系统在安全状态，就没有死锁<br>如果一个系统不是处于安全状态，就有可能死锁<br><strong>死锁避免 –&gt; 确保系统永远不会进入不安全状态</strong></p>
<h4 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h4><p>➢ 针对资源有多个实例<br>➢ 每一个进程必须事先声明使用的最大量<br>➢ 当一个进程请求资源，它可能要等待<br>➢ 当一个进程得到所有的资源，它必须在有限的时间释放它们</p>
<h5 id="银行家算法的数据结构"><a href="#银行家算法的数据结构" class="headerlink" title="银行家算法的数据结构"></a><strong>银行家算法的数据结构</strong></h5><p><strong>n为进程的数目， m为资源类型的数目</strong></p>
<p><strong>Available</strong>: 长度为 m的向量。 如果available[j]=k,那么资源Rj有k个实例有效<br><strong>Max</strong>: n x m 矩阵。 如果Max[i,j]=k,那么进程Pi可以<strong>最多请求</strong>资源Rj的k个实例<br><strong>Allocation</strong>: n x m 矩阵。 如果Allocation[i,j]=k,那么进程Pj当前<strong>分配</strong>了k个资源Rj的实例<br><strong>Need</strong>: n x m 矩阵。如果Need[i,j]=k,那么进程Pj还需要k个资源Rj的实例<br><strong>Need [i,j] = Max[i,j] – Allocation [i,j]</strong></p>
<h5 id="安全性算法"><a href="#安全性算法" class="headerlink" title="安全性算法"></a>安全性算法</h5><p>让Work和Finish作为长度为m和n的向量初始化<br>        Work := Available<br>        Finish [i] = false for i - 1,3, …, n.</p>
<p>查找i<br>        (a) Finish [i] = false<br>        (b) Need[i,j] ≤ Work[j]<br>        If no such i exists, go to step ④.</p>
<p>Work := Work + Allocationi<br>        Finish[i] := true<br>        go to step ②.</p>
<p>如果对所有i的 Finish [i] = true, 则系统处在安全状态</p>
<p><strong>Requesti =进程 Pi 的资源请求向量</strong>， 如果Requesti [m] = k 则进程 Pi 想要资源 类型为Rjm的k个实例</p>
<p>① 如果 Requesti ≤ Needi 转 step 2. 否则报错, 因为进程请求超出了其声明的最大值<br>② 如果 Requesti ≤ Available, 转 step 3. 否则 Pi 必须等待, 因为资源不可用<br>③ 假设通过修改下列状态来试着分配请求的资源给进程Pi</p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="33.873ex" height="2.059ex" role="img" focusable="false" viewbox="0 -716 14972 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(1235,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(1764,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2109,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(2407,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(2936,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mi" transform="translate(3365,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(3663,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(4406.8,0)"><g data-mml-node="text"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g><g data-mml-node="text" transform="translate(278,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g></g><g data-mml-node="mi" transform="translate(5740.6,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mi" transform="translate(6490.6,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(6975.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(7504.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(7849.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(8147.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(8676.6,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mi" transform="translate(9105.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(9403.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(10091.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(11092,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mi" transform="translate(11851,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(12317,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(12777,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(13349,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(13815,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="msub" transform="translate(14284,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>;<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="38.821ex" height="2.059ex" role="img" focusable="false" viewbox="0 -716 17158.9 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(1048,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(1346,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(1831,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(2264,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(2793,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(3154,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(3499,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(3984,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="msub" transform="translate(4584,0)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(378,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(5533.7,0)"><g data-mml-node="text"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g><g data-mml-node="text" transform="translate(278,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g></g><g data-mml-node="mi" transform="translate(6867.5,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mi" transform="translate(7617.5,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(7915.5,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(8213.5,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(8698.5,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(9131.5,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(9660.5,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(10021.5,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(10366.5,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="msub" transform="translate(10851.5,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(12000.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(13000.9,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mi" transform="translate(13759.9,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(14225.9,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(14685.9,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(15257.9,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(15723.9,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="msub" transform="translate(16192.9,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(16880.9,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="25.623ex" height="2.009ex" role="img" focusable="false" viewbox="0 -694 11325.4 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g><g data-mml-node="mi" transform="translate(888,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1354,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="msub" transform="translate(1820,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(2944.7,0)"><g data-mml-node="text"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g><g data-mml-node="text" transform="translate(278,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g></g><g data-mml-node="mi" transform="translate(4278.5,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g><g data-mml-node="mi" transform="translate(5166.5,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(5632.5,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="msub" transform="translate(6098.5,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6945.5,0)"><g data-mml-node="mo"><path data-c="2013" d="M0 248V285H499V248H0Z"/></g></g><g data-mml-node="mi" transform="translate(7445.5,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mi" transform="translate(8204.5,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(8670.5,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(9130.5,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(9702.5,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(10168.5,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="msub" transform="translate(10637.5,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container></p>
<p>④ 系统执行安全性算法<br>◼ 如果系统安全 –&gt; 将资源分配给 Pi<br>◼ 如果系统不安全 –&gt; Pi 必须等待，恢复原有的资源分配状态</p>
<h3 id="死锁的检测和解除"><a href="#死锁的检测和解除" class="headerlink" title="死锁的检测和解除"></a>死锁的检测和解除</h3><p>当系统为进程分配资源时，若未采取任何限制性措施，则系统必须提供检测和解除死锁的手段。为此，系统必须：<br>    保存有关资源的请求和分配信息；<br>    提供一种算法，以利用这些信息来检测系统是否已进入死锁状态。</p>
<h5 id="死锁定理"><a href="#死锁定理" class="headerlink" title="死锁定理"></a>死锁定理</h5><p>对于较复杂的资源分配图，可能有 多个既未阻塞、又非孤立的进程结 点，不同的简化顺序，是否会得到 不同的简化图？有关文献已经证明， <strong>所有的简化顺序，都将得到相同的不可简化图。</strong></p>
<p>S为死锁状态的充分条件是：<u>当且仅 当S状态的资源分配图是不可完全简 化的。该充分条件称为<strong>死锁定理</strong></u>。</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230426214031286.png" class title="image-20230426214031286">

<h4 id="死锁的解除"><a href="#死锁的解除" class="headerlink" title="死锁的解除"></a>死锁的解除</h4><p><strong>抢占资源</strong>。从一个或多个进程中抢占足够数量的资源给死锁进程， 以解除死锁状态</p>
<p><strong>终止或撤消进程</strong>。终止系统中一个或多个死锁进程，直到打破循环 环路，使死锁状态消除为止。<br>➢终止所有死锁进程（最简单方法）<br>➢逐个终止进程（稍温和方法）</p>
<h4 id="进程终止"><a href="#进程终止" class="headerlink" title="进程终止"></a>进程终止</h4><p>中断所有的死锁进程。<br>一次中断一个进程，直到死锁环消失。<br>应该选择怎样的中断顺序，使“<strong>代价最小</strong>”？<br>        ➢ 进程的优先级；<br>        ➢ 进程需要计算多长时间，以及需要多长时间结束；<br>        ➢ 进程使用的资源，进程完成还需要多少资源；<br>        ➢ 进程是交互的还是批处理的。</p>
<h1 id="4-进程同步"><a href="#4-进程同步" class="headerlink" title="4 进程同步"></a>4 进程同步</h1><h2 id="软件同步机制——Peterson算法"><a href="#软件同步机制——Peterson算法" class="headerlink" title="软件同步机制——Peterson算法"></a>软件同步机制——Peterson算法</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>{</span><br><span class="line">    flag[i] = TRUE;</span><br><span class="line">    turn = j;</span><br><span class="line">    <span class="keyword">while</span>(flag[j] &amp;&amp; turn == j);</span><br><span class="line">    CRITICAL SECTION;</span><br><span class="line">    flag[i] = FALSE;</span><br><span class="line">    remainder section;</span><br><span class="line">}<span class="keyword">while</span>(TRUE);</span><br></pre></td></tr></table></figure></div>

<p>Perterson算法可以实现空闲让进、忙则等待、有限等待，但是无法实现让权等待</p>
<h2 id="硬件同步机制"><a href="#硬件同步机制" class="headerlink" title="硬件同步机制"></a>硬件同步机制</h2><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230502133543747.png" class title="image-20230502133543747">

<h5 id="关中断"><a href="#关中断" class="headerlink" title="关中断"></a>关中断</h5><p>➢进入锁测试之前关闭中断，完成锁测试并上锁之后才打开中断<br>➢可有效保证互斥，但存在许多缺点</p>
<h5 id="Test-and-Set指令"><a href="#Test-and-Set指令" class="headerlink" title="Test-and-Set指令"></a>Test-and-Set指令</h5><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">boolean <span class="title function_">TestAndSet</span><span class="params">(Boolean *lock)</span> </span><br><span class="line">{</span><br><span class="line">	boolean old = *lock;</span><br><span class="line">	*lock = TRUE;</span><br><span class="line">	<span class="keyword">return</span> old;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>➢ 共享数据:  boolean lock = FALSE;</p>
<p>➢ 进程</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230502133802280.png" class title="image-20230502133802280">

<h5 id="Swap指令"><a href="#Swap指令" class="headerlink" title="Swap指令"></a>Swap指令</h5><p>➢ 原子地交换两个变量</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(boolean *a, boolean *b)</span> {</span><br><span class="line">	boolean temp = *a;</span><br><span class="line">	*a = *b;</span><br><span class="line">	*b = temp;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>➢ 共享数据 (初始化为 false): boolean lock;</p>
<p>➢ 进程</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230502133849478.png" class title="image-20230502133849478">

<p><strong>Test-and-Set和Swap都是原子操作</strong></p>
<h2 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h2><p><strong>信号量-软件解决方案：</strong><br>➢ 保证两个或多个代码段不被并发调用<br>➢ 在进入关键代码段前，进程必须获取一个信号量，否则<br>不能运行<br>➢ 执行完该关键代码段，必须释放信号量<br>➢ 信号量有值，为正说明它空闲，为负说明其忙碌</p>
<p><strong>类型（发展）</strong><br>➢ 整型信号量  <strong>➢ 记录型信号量</strong>  ➢ AND型信号量  ➢ 信号量集</p>
<h3 id="整形信号量"><a href="#整形信号量" class="headerlink" title="整形信号量"></a>整形信号量</h3><p>➢ 信号量<strong>S</strong>-整型变量<br>➢ 提供两个不可分割的[原子操作]访问信号量</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">wait(S)：</span><br><span class="line">	<span class="keyword">while</span> S&lt;=<span class="number">0</span> ; <span class="comment">/*do no-op*/</span></span><br><span class="line">	S:=S<span class="number">-1</span>;</span><br><span class="line">signal(S)：</span><br><span class="line">	S:=S+<span class="number">1</span>;</span><br></pre></td></tr></table></figure></div>

<p>➢ Wait(s)又称为P(S)<br>➢ Signal(s)又称为V(S)<br><strong>➢ 缺点：进程忙等</strong></p>
<h3 id="记录型信号量-去除忙等的信号量"><a href="#记录型信号量-去除忙等的信号量" class="headerlink" title="记录型信号量:去除忙等的信号量"></a>记录型信号量:去除忙等的信号量</h3><p>每个信号量S除一个<strong>整数值</strong>S.value外，还有一个<strong>进程等待队列</strong>S.list，存放阻塞在该信号量的各个进程PCB</p>
<p>➢ 信号量只能通过<strong>初始化</strong>和<strong>两个标准的原语PV</strong>来访问－－作为OS核心代码执行，<strong>不受进程调度的打断</strong><br>➢ <strong>初始化</strong>指定一个非负整数值，表示<strong>空闲资源总数</strong>（又称为”资源信号量”）－－若为非负值<strong>表示当前的空闲资源数</strong>，若为负值其<strong>绝对值</strong>表示<strong>当前等待临界区的进程数</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">	<span class="type">int</span> value;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">process_control_block</span> *<span class="title">list</span>;</span></span><br><span class="line">}semaphore;</span><br></pre></td></tr></table></figure></div>

<h4 id="wait、signal操作定义"><a href="#wait、signal操作定义" class="headerlink" title="wait、signal操作定义"></a>wait、signal操作定义</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">wait(semaphores *S) { <span class="comment">//请求一个单位的资源</span></span><br><span class="line">	S-&gt;value --; <span class="comment">//资源减少一个</span></span><br><span class="line">	<span class="keyword">if</span> (S-&gt;value&lt;<span class="number">0</span>) block(S-&gt;<span class="built_in">list</span>) <span class="comment">//进程自我阻塞</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">signal(semaphores *S) <span class="comment">//释放一个单位资源</span></span><br><span class="line">{</span><br><span class="line">	S-&gt;value++; <span class="comment">//资源增加一个</span></span><br><span class="line">	<span class="keyword">if</span> (S-&gt;value&lt;=<span class="number">0</span>) wakeup(S-&gt;<span class="built_in">list</span>); <span class="comment">//唤醒等待队列中的一个进程</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="AND型信号量"><a href="#AND型信号量" class="headerlink" title="AND型信号量"></a>AND型信号量</h3><p>AND型信号量同步的基本思想：将进程在整个 运行过程中需要的所有资源，一次性全部分配给 进程，待进程使用完后再一起释放。</p>
<p>对若干个临界资源的分配，采用原子操作。</p>
<p>在wait(S)操作中增加了一个“AND”条件，故称 之为AND同步，或同时wait(S)操作，即 Swait(Simultaneous wait)。</p>
<h4 id="AND型信号量操作定义"><a href="#AND型信号量操作定义" class="headerlink" title="AND型信号量操作定义"></a>AND型信号量操作定义</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">Swait(S1，S2，…，Sn) {</span><br><span class="line">	<span class="keyword">while</span> (TRUE) {</span><br><span class="line">		<span class="keyword">if</span> (Si&gt;=<span class="number">1</span> &amp;&amp; … &amp;&amp; Sn&gt;=<span class="number">1</span>) {</span><br><span class="line">			<span class="keyword">for</span> (i =<span class="number">1</span>;i&lt;=n;i++) Si--;；</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span> {</span><br><span class="line">	place the process in the waiting <span class="built_in">queue</span> associated with the first Si found with Si&lt;<span class="number">1</span>，and <span class="built_in">set</span> the program count of this process to the beginning of Swait operation</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Ssignal(S1，S2，…，Sn) {</span><br><span class="line">	<span class="keyword">while</span> (TRUE) {</span><br><span class="line">		<span class="keyword">for</span> (i=<span class="number">1</span> ; i&lt;=n;i++) {</span><br><span class="line">			Si++；</span><br><span class="line">		Remove all the process waiting in the <span class="built_in">queue</span> associated with Si into the ready <span class="built_in">queue</span>.</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="信号量集"><a href="#信号量集" class="headerlink" title="信号量集"></a>信号量集</h3><p>在记录型信号量中，wait或signal仅能对某类临界资源进行<strong>一个单位的申请和释放</strong>，当需要对N个单位进行操作时，需要N次wait/signal操作，<strong>效率低下</strong></p>
<p>扩充AND信号量：对进程所申请的所有资源以及每类资源不同的资源需求量，在一次P、V原语操作中完成申请或释放<br>➢ 进程对信号量Si的测试值是该资源的分配下限值ti，即要求Si≥ti，否则不予分配。一旦允许分配，进程对该资源的需求值为di，即表示资源占用量，进行Si= Si-di操作<br>➢ Swait(S1，t1，d1，…，Sn，tn，dn)<br>➢ Ssignal(S1，d1，…，Sn，dn)</p>
<h3 id="信号量的应用"><a href="#信号量的应用" class="headerlink" title="信号量的应用"></a>信号量的应用</h3><h5 id="利用信号量实现进程互斥"><a href="#利用信号量实现进程互斥" class="headerlink" title="利用信号量实现进程互斥"></a>利用信号量实现<u>进程互斥</u></h5><p>设置互斥信号量(mutex)</p>
<h5 id="利用信号量实现前驱关系"><a href="#利用信号量实现前驱关系" class="headerlink" title="利用信号量实现前驱关系"></a>利用信号量实现<u>前驱关系</u></h5><h5 id="利用信号量实现进程同步"><a href="#利用信号量实现进程同步" class="headerlink" title="利用信号量实现进程同步"></a>利用信号量实现<u>进程同步</u></h5><p>设置同步信号量</p>
<h4 id="利用信号量实现进程互斥-1"><a href="#利用信号量实现进程互斥-1" class="headerlink" title="利用信号量实现进程互斥"></a>利用信号量实现进程互斥</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">semaphore mutex; </span><br><span class="line">    mutex=<span class="number">1</span>; <span class="comment">// 初始化为1</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">    wait(mutex);</span><br><span class="line">    临界区；</span><br><span class="line">    signal(mutex);</span><br><span class="line">    剩余区；</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h4 id="利用信号量实现进程同步-1"><a href="#利用信号量实现进程同步-1" class="headerlink" title="利用信号量实现进程同步"></a>利用信号量实现进程同步</h4><p>➢ 实现各种同步问题<br>➢ 例子：P1和 P2 需要代码段 C1 比C2先运行<br>semaphores s=0; //主要用于传递消息</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">P1()</span><br><span class="line">{</span><br><span class="line">    C1;</span><br><span class="line">    signal(s);</span><br><span class="line">    …</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">P2()</span><br><span class="line">{</span><br><span class="line">    …</span><br><span class="line">    wait(s); </span><br><span class="line">    C2;</span><br><span class="line">}	</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230502135000958.png" class title="image-20230502135000958">

<h4 id="利用信号量实现前趋关系"><a href="#利用信号量实现前趋关系" class="headerlink" title="利用信号量实现前趋关系"></a>利用信号量实现前趋关系</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">main(){</span><br><span class="line">    Semaphore a,b,c,d,e,f,g; </span><br><span class="line">    a.value=<span class="number">0</span>;b.value=<span class="number">0</span>;c.value=<span class="number">0</span>;</span><br><span class="line">    d.value=<span class="number">0</span>;e.value=<span class="number">0</span>;f.value=<span class="number">0</span>;g.value=<span class="number">0</span>;</span><br><span class="line">    cobegin</span><br><span class="line">        { S1;signal(a);signal(b); }</span><br><span class="line">        { wait(a);S2;signal(c) ;signal(d);}</span><br><span class="line">        { wait(b);S3;signal(e); }</span><br><span class="line">        { wait(c);S4;signal(f); }</span><br><span class="line">        { wait(d);S5;signal(g); }</span><br><span class="line">        { wait(e);wait(f);wait(g);S6; }</span><br><span class="line">	coend</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230502135045547.png" class title="image-20230502135045547">

<h2 id="管程机制"><a href="#管程机制" class="headerlink" title="管程机制"></a>管程机制</h2><h4 id="信号量机制的问题"><a href="#信号量机制的问题" class="headerlink" title="信号量机制的问题"></a>信号量机制的问题</h4><p>➢需要程序员实现，编程困难<br>➢维护困难<br>➢容易出错<br>⚫ wait/signal位置错<br>⚫ wait/signal不配对</p>
<p><strong>解决方法</strong> ➢由编程语言解决同步互斥问题 ➢管程（1970s, Hoare和 Hansen）</p>
<p>信号量：<strong>分散式</strong><br>管 程：<strong>集中式</strong></p>
<h3 id="管程定义"><a href="#管程定义" class="headerlink" title="管程定义"></a>管程定义</h3><p>➢ 一个管程定义了一个<strong>数据结构</strong>和能为并发进程所执行（在该数据结构上）的<strong>一组操作</strong>，这组操作能<strong>同步进程和改变管程中的数据</strong></p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230502135259129.png" class title="image-20230502135259129">

<p>语法描述如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Monitor monitor_name { <span class="comment">/*管程名*/</span></span><br><span class="line">    share variable declarations； <span class="comment">/*共享变量说明*/</span></span><br><span class="line">    condition declarations； <span class="comment">/*条件变量说明*/</span></span><br><span class="line">    <span class="keyword">public</span>: <span class="comment">/*能被进程调用的过程*/</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">P1</span><span class="params">(……)</span> {……} <span class="comment">/*对数据结构的操作过程*/</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">P2</span><span class="params">(……)</span> {……}</span><br><span class="line">        ……</span><br><span class="line">        <span class="keyword">void</span> (……) {……}</span><br><span class="line">        ……</span><br><span class="line">    { <span class="comment">/*管程主体*/</span> </span><br><span class="line">    initialization code; <span class="comment">/*初始化代码*/</span> </span><br><span class="line">    ……</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="管程功能"><a href="#管程功能" class="headerlink" title="管程功能"></a>管程功能</h3><p><strong>互斥</strong><br>➢管程中的变量只能被管程中的操作访问<br>➢任何时候只有一个进程在管程中操作<br>➢类似临界区<br>➢由编译器完成</p>
<p><strong>同步</strong><br>➢条件变量<br>➢唤醒和阻塞操作</p>
<h3 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h3><p><strong>condition x, y;</strong></p>
<p>条件变量的操作<br>➢ 阻塞操作：wait<br>➢ 唤醒操作：signal</p>
<p>x.wait(): 进程阻塞直到另外一个进程调用x.signal()</p>
<p>x.signal()：唤醒另外一个进程</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p><strong>管程内可能存在不止1个进程。</strong> ➢例如：进程P调用 signal操作唤醒进程 Q后。</p>
<p>存在的可能<strong>处理方式</strong>：<br>➢<strong>P等待</strong>，直到Q离开管程或等待另一条件（Hoare）。<br>➢<strong>Q等待</strong>，直到P离开管程或等待另一条件（Hansen）。</p>
<h2 id="经典进程同步问题"><a href="#经典进程同步问题" class="headerlink" title="经典进程同步问题"></a>经典进程同步问题</h2><h3 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者-消费者问题"></a>生产者-消费者问题</h3><p>生产者-消费者问题是相互合作进程关系的一种抽象</p>
<p>利用记录型信号量实现：<br>    ➢ 假定，在生产者和消费者之间的公用缓冲池中，具有n个缓冲区，可利用互斥信号量mutex使诸进程实现对缓冲池的互斥使用；<br>    ➢ 利用资源信号量empty和full分别表示缓冲池中空缓冲区和满缓冲区的数量。<br>    ➢ 又假定这些生产者和消费者相互等效，只要缓冲池未满，生产者便可将消息送入缓冲池；只要缓冲池未空，消费者便可从缓冲池中取走一个消息</p>
<p>其它解决方案：AND信号集、管程</p>
<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>➢ 生产者（M个）：生产产品，并放入缓冲区<br>➢ 消费者（N个）：从缓冲区取产品消费<br>➢ 问题：<strong>如何实现生产者和消费者之间的同步和互斥？</strong></p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230502135830284.png" class title="image-20230502135830284">

<h4 id="生产者消费者流程"><a href="#生产者消费者流程" class="headerlink" title="生产者消费者流程"></a>生产者消费者流程</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">生产者：</span><br><span class="line">{ </span><br><span class="line">    …</span><br><span class="line">    生产一个产品</span><br><span class="line">    …</span><br><span class="line">    …</span><br><span class="line">    把产品放入指定缓冲区</span><br><span class="line">    …</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">消费者：</span><br><span class="line">{ </span><br><span class="line">    …</span><br><span class="line">    …</span><br><span class="line">    从指定缓冲区取出产品</span><br><span class="line">    …</span><br><span class="line">    …</span><br><span class="line">    消费取出的产品</span><br><span class="line">    …</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="生产者消费者的互斥分析"><a href="#生产者消费者的互斥分析" class="headerlink" title="生产者消费者的互斥分析"></a>生产者消费者的互斥分析</h4><h5 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h5><p><strong>➢把产品放入指定缓冲区</strong><br>➢<strong>in</strong>:所有的生产者对in指针需要互斥<br>➢<strong>counter</strong>：所有生产者消费者进程对counter互斥</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">buffer[in] = nextp;</span><br><span class="line">in = (in + <span class="number">1</span>) % N;</span><br><span class="line">counter++;</span><br></pre></td></tr></table></figure></div>

<h5 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h5><p><strong>➢从指定缓冲区取出产品</strong><br>➢<strong>out</strong>:所有的消费者对out指针需要互斥<br>➢<strong>counter</strong>：所有生产者消费者进程对counter互斥</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">nextc = buffer[out];</span><br><span class="line">out = (out + <span class="number">1</span>) % N;</span><br><span class="line">counter--;</span><br></pre></td></tr></table></figure></div>

<p>两者需要协同的部分<br>➢ 生产者：把产品放入指定缓冲区（关键代码C1）<br>➢ 消费者：从满缓冲区取出一个产品（关键代码C2）</p>
<p>三种运行次序（不同条件下不同运行次序）<br>➢ 所有缓冲区空时：<br>➢ 所有缓冲区满时：<br>➢ 缓冲区有空也有满时：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230502140103660.png" class title="image-20230502140103660">

<img lazyload src="/images/loading.svg" data-src="/2023/02/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20230502140109258.png" class title="image-20230502140109258">

<h4 id="同步信号量定义"><a href="#同步信号量定义" class="headerlink" title="同步信号量定义"></a>同步信号量定义</h4><p>共享数据<br>semaphore **<em>full, <em>empty</em></em>, *mutex; //full:满缓冲区数量 empty：空缓冲区数量</p>
<p>初始化:<br><strong>full-&gt;value = 0; empty-&gt;vaule = N;</strong> mutex-&gt;vaule = 1；</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> {</span><br><span class="line">    <span class="comment">// produce an item in nextp</span></span><br><span class="line">    wait (empty);</span><br><span class="line">    wait (mutex);</span><br><span class="line">    <span class="comment">// add the item to the buffer</span></span><br><span class="line">    signal (mutex);</span><br><span class="line">    signal (full);</span><br><span class="line">} <span class="keyword">while</span> (TRUE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> {</span><br><span class="line">    <span class="comment">// produce an item in nextp</span></span><br><span class="line">    wait (empty);</span><br><span class="line">    wait (mutex);</span><br><span class="line">    <span class="comment">// add the item to the buffer</span></span><br><span class="line">    signal (mutex);</span><br><span class="line">    signal (full);</span><br><span class="line">} <span class="keyword">while</span> (TRUE)</span><br></pre></td></tr></table></figure></div>

<p>解读见PPT</p>
<h4 id="利用AND信号量解决生产者-消费者问题"><a href="#利用AND信号量解决生产者-消费者问题" class="headerlink" title="利用AND信号量解决生产者-消费者问题"></a>利用AND信号量解决生产者-消费者问题</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> in=<span class="number">0</span>,out=<span class="number">0</span>;</span><br><span class="line">item buffer[n];</span><br><span class="line">semaphore mutex=<span class="number">1</span>,empty=n,full=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">producer</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">do</span> {</span><br><span class="line">        produce an item nextp; </span><br><span class="line">        …</span><br><span class="line">        Swait(empty，mutex)；</span><br><span class="line">        buffer[in]= nextp;</span><br><span class="line">        in = (in+<span class="number">1</span>) % n;</span><br><span class="line">        Ssignal(mutex,full);</span><br><span class="line">    }<span class="keyword">while</span>(TRUE);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">consumer</span><span class="params">()</span> {</span><br><span class="line"><span class="keyword">do</span> {</span><br><span class="line">    Swait(full,mutex);</span><br><span class="line">    nextc=buffer[out];</span><br><span class="line">    out= (out+<span class="number">1</span>) % n;</span><br><span class="line">    Ssignal(mutex,empth);</span><br><span class="line">    consume the item in nextc; </span><br><span class="line">    …</span><br><span class="line">    }<span class="keyword">while</span>(TRUE);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h4 id="利用管程解决生产者-消费者问题"><a href="#利用管程解决生产者-消费者问题" class="headerlink" title="利用管程解决生产者-消费者问题"></a>利用管程解决生产者-消费者问题</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Monitor producerconsumer { </span><br><span class="line">item buffer[N];</span><br><span class="line"><span class="type">int</span> in,out;</span><br><span class="line">condition notfull,notempty;</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(item x)</span> {</span><br><span class="line">        <span class="keyword">if</span> (count&gt;=N) cwait(notfull)；</span><br><span class="line">        buffer[in] = x；</span><br><span class="line">        in = (in+<span class="number">1</span>) % N；</span><br><span class="line">        count++；</span><br><span class="line">        csignal(notempty);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(item x)</span> {</span><br><span class="line">        <span class="keyword">if</span> (count&lt;=<span class="number">0</span>) cwait(notempty)；</span><br><span class="line">        x = buffer[out]；</span><br><span class="line">        out = (out+<span class="number">1</span>) % N；</span><br><span class="line">        count--；</span><br><span class="line">        csignal(notfull);</span><br><span class="line">        }</span><br><span class="line">        { </span><br><span class="line">        in=<span class="number">0</span>;out=<span class="number">0</span>;count=<span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }PC;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">producer</span><span class="params">()</span> {</span><br><span class="line">        item x;</span><br><span class="line">        <span class="keyword">while</span>(TRUE) {</span><br><span class="line">            ……</span><br><span class="line">            produce an item in nextp；</span><br><span class="line">            PC.put(x)；</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">consumer</span><span class="params">()</span> {</span><br><span class="line">    	item x;</span><br><span class="line">        <span class="keyword">while</span>(TRUE) {</span><br><span class="line">            PC.get(x)；</span><br><span class="line">            consume the item in nextc；</span><br><span class="line">            ……</span><br><span class="line">            }</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">        cobegin</span><br><span class="line">        <span class="title function_">producer</span><span class="params">()</span>; consumer();</span><br><span class="line">        coend</span><br><span class="line">    }</span><br></pre></td></tr></table></figure></div>

<h3 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h3><p>五个哲学家的生活方式：交替思考和进餐 共用一张圆桌，分别坐在五张椅子上 在圆桌上有五个碗和五支筷子 平时哲学家思考，饥饿时便试图取用其左、右 最靠近他的筷子，只有在拿到两支筷子时才能 进餐 进餐毕，放下筷子又继续思考<br><strong>➢ 解决方案：</strong>  记录型信号量；  AND信号量集、管程。</p>
<h4 id="利用记录型信号量"><a href="#利用记录型信号量" class="headerlink" title="利用记录型信号量"></a>利用记录型信号量</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">Semaphore chopstick[<span class="number">5</span>] = {<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>}; <span class="comment">// array [0..4] of semaphores;</span></span><br><span class="line">    Philosopher i:</span><br><span class="line">        <span class="keyword">do</span> {</span><br><span class="line">            wait(chopStick[i]); <span class="comment">// get left chopstick</span></span><br><span class="line">            wait(chopStick[(i + <span class="number">1</span>) % <span class="number">5</span>]); <span class="comment">// get right chopstick</span></span><br><span class="line">            …</span><br><span class="line">            <span class="comment">// eat</span></span><br><span class="line">            …</span><br><span class="line">            signal(chopStick[i]); <span class="comment">//return left chopstick</span></span><br><span class="line">            signal(chopStick[(i + <span class="number">1</span>) % <span class="number">5</span>]); <span class="comment">// return right chopstick</span></span><br><span class="line">            …</span><br><span class="line">            <span class="comment">// think</span></span><br><span class="line">            …</span><br><span class="line">		} <span class="keyword">while</span> (<span class="literal">true</span>) </span><br></pre></td></tr></table></figure></div>

<h5 id="存在问题及解决方案"><a href="#存在问题及解决方案" class="headerlink" title="存在问题及解决方案"></a>存在问题及解决方案</h5><p>可能引起死锁 ，如五个哲学家同时饥 饿而各自拿起左筷子时 ，会使信号量 chopstick均为 0 ；因此他们试图去拿 右筷子时 ，无法拿到而无限期等待 。</p>
<p><strong>解决方法：</strong><br>① 最多允许4个哲学家同时坐在桌子周围<br>② 仅当一个哲学家左右两边的筷子都可用时，才允许他拿筷子。<br>③ 给所有哲学家编号，奇数号的哲学家必须首先拿左边的筷子，偶数号的哲学家则反之</p>
<h4 id="利用AND信号量"><a href="#利用AND信号量" class="headerlink" title="利用AND信号量"></a>利用AND信号量</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">semaphore chopstick chopstick[<span class="number">5</span>]={<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>}；</span><br><span class="line"><span class="keyword">do</span> {</span><br><span class="line">    …</span><br><span class="line">    <span class="comment">//think</span></span><br><span class="line">    …</span><br><span class="line">    Sswait(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]，chopstick[i])；</span><br><span class="line">    …</span><br><span class="line">    <span class="comment">//eat</span></span><br><span class="line">    …</span><br><span class="line">    Ssignal(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]，chopstick[i])；</span><br><span class="line">} <span class="keyword">while</span>[TRUE]；</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="利用管程"><a href="#利用管程" class="headerlink" title="利用管程"></a>利用管程</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">monitor dp</span><br><span class="line">{ </span><br><span class="line"><span class="keyword">enum</span> { THINKING; HUNGRY, EATING) state [<span class="number">5</span>] ;</span><br><span class="line">condition self [<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">pickup</span> <span class="params">(<span class="type">int</span> i)</span> { </span><br><span class="line">    state[i] = HUNGRY;</span><br><span class="line">    test(i);</span><br><span class="line">    <span class="keyword">if</span> (state[i] != EATING) self [i].wait;</span><br><span class="line">}</span><br><span class="line">      </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">putdown</span> <span class="params">(<span class="type">int</span> i)</span> { </span><br><span class="line">    state[i] = THINKING;</span><br><span class="line">    	<span class="comment">// test left and right neighbors</span></span><br><span class="line">    test((i + <span class="number">4</span>) % <span class="number">5</span>);</span><br><span class="line">    test((i + <span class="number">1</span>) % <span class="number">5</span>);</span><br><span class="line">}</span><br><span class="line">      </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span> <span class="params">(<span class="type">int</span> i)</span> { </span><br><span class="line">    <span class="keyword">if</span> ( (state[(i + <span class="number">4</span>) % <span class="number">5</span>] != EATING) &amp;&amp;</span><br><span class="line">    (state[i] == HUNGRY) &amp;&amp;</span><br><span class="line">    (state[(i + <span class="number">1</span>) % <span class="number">5</span>] != EATING) ) { </span><br><span class="line">        state[i] = EATING ;</span><br><span class="line">        self[i].signal () ;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">initialization_code() { </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    state[i] = THINKING;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">哲学家i的活动可描述为：</span><br><span class="line"><span class="keyword">do</span> {</span><br><span class="line">    dp.pickup (i);</span><br><span class="line">    …</span><br><span class="line">    eat</span><br><span class="line">    …</span><br><span class="line">    dp.putdown (i);</span><br><span class="line">} <span class="keyword">while</span>[TRUE];</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>林同学喜欢的诗句</title>
    <url>/2023/09/21/%E6%9E%97%E5%90%8C%E5%AD%A6%E5%96%9C%E6%AC%A2%E7%9A%84%E8%AF%97%E5%8F%A5/</url>
    <content><![CDATA[<h4 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h4><p>读诗是真的能让自己感受到自由的一件事，很多时候，真的有那么一句诗触动到了心灵，就会发现，原来这个世界上真有能读懂我内心的那么一个人，原来我并不孤独。</p>
<p>这份内心连接，可以穿越时空，给予自己实实在在的力量。</p>
<h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><blockquote>
<p>今宵绝胜无人共，卧看星河尽意明。</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://w.wallhaven.cc/full/z8/wallhaven-z8qqdj.png"></p>
<p>出自【宋】陈与义《雨晴》</p>
<p>这句诗感觉就是我想要的生活状态啊！</p>
<p>就算是一个人，也能够兴致满怀地躺着，安静地欣赏着银河之美，感觉这就是和天地寰宇共脉搏的感觉啊，脑海里已经能够想象出自己在一个安静的夏日，躺在海边草地上看着明月，没有生活杂碎烦扰，放空自身，让自己彻底融入大自然，或许这才是真正的自由吧~</p>
<p>又或许在现代社会的拥扰中，能够找到属于自己的一隅，用于逃离社会喧嚣，重新找回内心中的真实自我，也是一种卧看星河尽意明吧~</p>

  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>雨晴</p>

    </div>
    <div class="notel-content">
      <p>天缺西南江面清，纤云不动小滩横。<br>墙头语鹊衣犹湿，楼外残雷气未平。<br>尽取微凉供稳睡，急搜奇句报新晴。<br>今宵绝胜无人共，卧看星河尽意明。</p>

    </div>
  </div>

<p>2023.09.21</p>
<h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><blockquote>
<p>禁街箫鼓，寒轻夜永，纤手重携。更阑人散，千门笑语，声在帘帏。 </p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://w.wallhaven.cc/full/x6/wallhaven-x69pdo.jpg"></p>
<p>出自【宋】李持正 《人月圆·小桃枝上春风早》</p>
<p>好浪漫啊哈哈哈哈哈，与所爱之人携手共游元宵，热烈的节日与爱恋将料峭的春寒融化，我觉得这就是人生的小幸福和小圆满啦。</p>
<p>写段的时候正好听到《园游会》，谁说这两段文字不是异曲同工之妙呢？</p>
<p>我顶着大太阳，只想为你撑伞，你靠在我肩膀，深呼吸怕遗忘~</p>
<p>当然这首词的上片所言“年年乐事”也是将自己的快乐融入了全人间的欢乐，词境阔大，意趣高远。</p>
<p>其实生活不需要那么多的宏伟与波澜壮阔，在生活中与所爱之人共同享受欢乐时光，不为世俗困境困扰，认真过好每一天，每天都收获生活中的小美好，过好自己的平淡日子，就是最大的幸福~</p>

  <div class="note-large green">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>人月圆·小桃枝上春风早</p>

    </div>
    <div class="notel-content">
      <p>小桃枝上春风早，初试薄罗衣。年年乐事，华灯竞处，人月圆时。<br>禁街箫鼓，寒轻夜永，纤手重携。更阑人散，千门笑语，声在帘帏。 </p>

    </div>
  </div>

<p>2023.09.25</p>
<h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><blockquote>
<p>徙倚阑干送落晖，年华冉冉恨依依。</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://w.wallhaven.cc/full/ex/wallhaven-exqpqk.jpg" alt="General 5120x3200 night snow winter road alone white light bright lights lamp path"></p>
<p>出自【宋】陆游 《晚春感事》</p>
<p>其实还蛮感慨的，上次更新这篇博客的时候还在浪漫与共，现在也到了焦虑未来，迎接毕业的时候了。</p>
<p>不得不说时间过得真的太快了，可是大学目标依旧没有完成呀~</p>
<p>大早上就emo也是很奇怪，但是确实有点感慨了。</p>

  <div class="note-large yellow">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>晚春感事</p>

    </div>
    <div class="notel-content">
      <p>徙倚阑干送落晖，年华冉冉恨依依。</p>
<p>护雏燕子常更出，著雨杨花又嬾飞。 </p>
<p>已为读书悲眼力，还因揽带叹腰围。 </p>
<p>亲朋半作荒郊冢，欲话初心泪满衣。 </p>

    </div>
  </div>

<p>2024.6.15</p>
]]></content>
      <categories>
        <category>Literature</category>
      </categories>
      <tags>
        <tag>一些文学素养</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库技术与应用</title>
    <url>/2023/02/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1 绪论"></a>1 绪论</h1><h2 id="1-2-数据模型"><a href="#1-2-数据模型" class="headerlink" title="1.2 数据模型"></a>1.2 数据模型</h2><p>在数据库中用数据模型这个工具来<strong>抽象、表示和处理</strong>现实世界中的事物。</p>
<p>通俗地讲数据模型就是现实世界的抽象和模拟。</p>
<p>数据模型应满足三方面要求</p>
<p><strong>能比较真实地模拟现实世界</strong></p>
<p><strong>容易为人所理解</strong></p>
<p><strong>便于在计算机上 实现</strong></p>
<h3 id="两大类数据模型"><a href="#两大类数据模型" class="headerlink" title="两大类数据模型"></a>两大类数据模型</h3><p>(1) <strong>概念模型</strong>   也称信息模型，它是按用户的观点来对数据和信息建模，用于数据库设计。<br>(2) <strong>逻辑模型和物理模型</strong>   按计算机系统的观点对数据建模，用于DBMS的实现。<br>        逻辑模型主要包括网状模型、层次模型、关系模型、面向对象模型等，按计算机系统的观点对数据建模，用于DBMS实现。<br>        物理模型是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法。</p>
<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228192613246-16781980135701.png" alt="image-20230228192613246" style="zoom:50%;">

<h3 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h3><p><strong>概念模型的用途</strong><br>概念模型用于信息世界的建模<br>是现实世界到机器世界的一个中间层次<br>是数据库设计的有力工具<br>数据库设计人员和用户之间进行交流的语言<br><strong>对概念模型的基本要求</strong><br>较强的语义表达能力<br>能够方便、直接地表达应用中的各种语义知识<br>简单、清晰、易于用户理解</p>
<h3 id="信息世界中的基本概念"><a href="#信息世界中的基本概念" class="headerlink" title="信息世界中的基本概念"></a>信息世界中的基本概念</h3><p><strong>(1) 实体（Entity）</strong></p>
<p>客观存在并可相互区别的事物称为实体。可以是具体的人、事、物或抽象的概念。</p>
<p><strong>(2) 属性（Attribute）</strong></p>
<p>实体所具有的某一特性称为属性。一个实体可以由若干个属性来刻画。 </p>
<p><strong>(3) 码（Key）</strong> </p>
<p>唯一标识实体的属性集称为码</p>
<p><strong>(4) 域（Domain）</strong> </p>
<p>属性的取值范围称为该属性的域。 </p>
<p><strong>(5) 实体型（Entity Type）</strong> </p>
<p>用实体名及其属性名集合来抽象和刻画同类实体称为实体型</p>
<p>例子：学生（学号、姓名、性别、出生年月）</p>
<p><strong>(6) 实体集（Entity Set）</strong><br>同一类型实体的集合称为实体集：</p>
<table>
<thead>
<tr>
<th><strong>学号</strong></th>
<th><strong>姓名</strong></th>
<th><strong>性别</strong></th>
<th><strong>出生日期</strong></th>
</tr>
</thead>
<tbody><tr>
<td>20021001</td>
<td>张三</td>
<td>男</td>
<td>1978-5-6</td>
</tr>
<tr>
<td>20021003</td>
<td>李四</td>
<td>女</td>
<td>1980-1-24</td>
</tr>
<tr>
<td>20021004</td>
<td>王五</td>
<td>男</td>
<td>1979-11-12</td>
</tr>
</tbody></table>
<p><strong>(7) 联系（Relationship）</strong>  </p>
<p>现实世界：事物内部以及事物之间的联系<br>信息世界：实体内部的联系和实体之间的联系</p>
<h3 id="两个实体型之间的联系"><a href="#两个实体型之间的联系" class="headerlink" title="两个实体型之间的联系"></a>两个实体型之间的联系</h3><h4 id="一对一联系（1-1）"><a href="#一对一联系（1-1）" class="headerlink" title="一对一联系（1 : 1）"></a>一对一联系（1 : 1）</h4><p><strong>实例</strong><br>一个班级只有一个正班长，一个班长只在一个班中任职<br><strong>定义：</strong><br>    如果对于实体集A中的每一个实体，实体集B中至多有一个（也可以没有）实体与之联系，反之亦然，<strong>则称实体集A与实体集B具有一对一联系，记为1:1</strong> </p>
<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228193153537-16781980135712.png" alt="image-20230228193153537" style="zoom:33%;">

<h4 id="一对多联系（1-n）"><a href="#一对多联系（1-n）" class="headerlink" title="一对多联系（1 : n）"></a>一对多联系（1 : n）</h4><p><strong>实例</strong><br>一个班级中有若干名学生，每个学生只在一个班级中学习<br><strong>定义：</strong><br>如果对于实体集A中的每一个实体，实体集B中有n个实体（n≥0）与之联系，反之，对于实体集B中的每一个实体，实体集A中至多只有一个实体与之联系，则称<strong>实体集A与实体集B</strong>有一对多联系，记为1:n</p>
<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228193321227-16781980135713.png" alt="image-20230228193321227" style="zoom:33%;">

<p>注意一对多联系图中<strong>1</strong>的位置</p>
<h4 id="多对多联系（m-n）"><a href="#多对多联系（m-n）" class="headerlink" title="多对多联系（m : n）"></a>多对多联系（m : n）</h4><p><strong>实例</strong><br>课程与学生之间的联系：<br>一门课程同时有若干个学生选修<br>一个学生可以同时选修多门课程<br><strong>定义：</strong><br>如果对于实体集A中的每一个实体，实体集B中有n个实体（n≥0）与之联系，反之，对于实体集B中的每一个实体，实体集A中也有m个实体（m≥0）与之联系，则称实体集A与实体B具有多对多联系，记为m:n</p>
<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228193313680-16781980135714.png" alt="image-20230228193313680" style="zoom:33%;">

<h4 id="用图形来表示两个实体型之间的三类联系"><a href="#用图形来表示两个实体型之间的三类联系" class="headerlink" title="用图形来表示两个实体型之间的三类联系"></a>用图形来表示两个实体型之间的三类联系</h4><img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228193406567-16781980135715.png" alt="image-20230228193406567" style="zoom:50%;">

<h3 id="两个以上实体型之间的联系"><a href="#两个以上实体型之间的联系" class="headerlink" title="两个以上实体型之间的联系"></a>两个以上实体型之间的联系</h3><p>若实体型E1，E2，…，En存在联系，对于实体型Ej（j&#x3D;1，2，…，i-1，i+1，…，n）中的给定实体，最多只和Ei中的一个实体相联系，则我们说Ei与E1，E2，…，Ei-1，Ei+1，…，En之间的联系是<strong>一对多</strong>的</p>
<p><strong>实例</strong></p>
<p>课程、教师与参考书三个实体型</p>
<p>每一个教师可以讲授若干门课程，每门课程可以使用若干本参考书</p>
<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228193534803-16781980135716.png" alt="image-20230228193534803" style="zoom:50%;">

<p><strong>两个以上实体型间的一对一联系</strong></p>
<p><strong>两个以上实体型间的多对多联系</strong></p>
<h3 id="单个实体型内的联系"><a href="#单个实体型内的联系" class="headerlink" title="单个实体型内的联系"></a>单个实体型内的联系</h3><p>同一实体集内的各实体之间的关系<br><strong>一对多联系</strong><br><strong>实例</strong><br>职工实体型内部具有领导与被领导的联系<br>某一职工（干部）“领导”若干名职工<br>一个职工仅被另外一个职工直接领导<br>这是一对多的联系</p>
<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228193653846-16781980135717.png" alt="image-20230228193653846" style="zoom:50%;">

<p><strong>一对一联系和多对多联系</strong></p>
<h3 id="概念模型的一种表示方法"><a href="#概念模型的一种表示方法" class="headerlink" title="概念模型的一种表示方法"></a>概念模型的一种表示方法</h3><p><strong>实体－联系方法(E-R方法)</strong></p>
<h4 id="E-R图"><a href="#E-R图" class="headerlink" title="E-R图"></a>E-R图</h4><p><strong>实体型</strong><br>用矩形表示，矩形框内写明实体名。</p>
<p><strong>属性</strong><br>用椭圆形表示，并用无向边将其与相应的实体连接起来</p>
<p><strong>联系</strong><br>联系本身：<br>   用菱形表示，菱形框内写明联系名，并用无向边分别与有关实体连接起来，同时在无向边旁标上联系的类型（1:1、1:n或m:n）</p>
<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228193805948-16781980135718.png" alt="image-20230228193805948" style="zoom:50%;">

<h4 id="联系的表示方法"><a href="#联系的表示方法" class="headerlink" title="联系的表示方法"></a>联系的表示方法</h4><img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228193826047-16781980135719.png" alt="image-20230228193826047" style="zoom:50%;">

<h4 id="联系的属性"><a href="#联系的属性" class="headerlink" title="联系的属性"></a>联系的属性</h4><p>联系本身也是一种实体型，也   可以有属性。如果一个联系具有属性，则这些属性也要用无向边与该联系连接起来 </p>
<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228193848342-167819801357110.png" alt="image-20230228193848342" style="zoom:50%;">

<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>用E-R图表示某个工厂物资管理的概念模型<br>实体：<br>        仓库： 仓库号、面积、电话号码<br>        零件 ：零件号、名称、规格、单价、描述<br>        供应商：供应商号、姓名、地址、电话号码、帐号<br>        项目：项目号、预算、开工日期<br>        职工：职工号、姓名、年龄、职称<br>实体之间的联系如下：<br>        一个仓库可以存放多种零件，一种零件可以存放在多个仓库中。用库存量来表示某种零件在某个仓库中的数量<br>        一个仓库有多个职工当仓库保管员，一个职工只能在一个仓库工作<br>        职工之间具有领导-被领导关系。即仓库主任领导若干保管员</p>
<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228194000378-167819801357111.png" alt="image-20230228194000378" style="zoom:67%;">

<h3 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p><strong>描述数据库的组成对象，以及对象之间的联系</strong></p>
<p><strong>描述的内容</strong><br>与数据类型、内容、性质有关的对象<br>与数据之间联系有关的对象</p>
<p><strong>数据结构是对系统静态特性的描述</strong></p>
<h4 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h4><p>**对数据库中各种对象(型)的实例(值)允许执行的操作及有关的操作规则</p>
<p><strong>数据操作的类型</strong><br>查询<br>更新(包括插入、删除、修改)</p>
<p><strong>数据模型对操作的定义</strong><br>操作的确切含义<br>操作符号<br>操作规则（如优先级）<br>实现操作的语言</p>
<p><strong>数据操作是对系统动态特性的描述</strong></p>
<h4 id="完整性约束条件"><a href="#完整性约束条件" class="headerlink" title="完整性约束条件"></a>完整性约束条件</h4><p><strong>一组完整性规则的集合。</strong><br>完整性规则：给定的数据模型中数据及其联系所具有的制约和储存规则，用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效、相容。</p>
<p><strong>数据模型对完整性约束条件的定义</strong><br>必须遵守的基本的通用的完整性约束条件。<br>例如，关系模型中，任何关系必须满足实体完整性和参照完整性两个条件。</p>
<p><strong>反映具体应用所涉及的特定的约束条件。</strong><br>例子：学校数据库中规定博士学生的年龄必须小于45岁<br>例子：银行的系统中规定帐号的余额不能小于1元</p>
<h3 id="常用的数据模型"><a href="#常用的数据模型" class="headerlink" title="常用的数据模型"></a>常用的数据模型</h3><p>格式化模型<br>        层次模型(Hierarchical Model)<br>        网状模型(Network Model)</p>
<p>关系模型(Relational Model)  </p>
<p>面向对象模型(Object Oriented Model）</p>
<p>对象关系模型(Object Relational Model)</p>
<h4 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h4><p>层次模型用树形结构来表示各类实体以及实体间的联系 </p>
<h5 id="层次模型-1"><a href="#层次模型-1" class="headerlink" title="层次模型"></a><strong>层次模型</strong></h5><p> 满足下面两个条件的基本层次联系的集合为层次模型</p>
<p>1.有且只有一个结点没有双亲结点，这个结点称为根结点</p>
<p>2.根以外的其它结点有且只有一个双亲结点</p>
<h5 id="层次模型中的几个术语"><a href="#层次模型中的几个术语" class="headerlink" title="层次模型中的几个术语"></a><strong>层次模型中的几个术语</strong></h5><p>根结点，双亲结点，兄弟结点，叶结点</p>
<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228194651033-167819801357112.png" alt="image-20230228194651033" style="zoom:50%;">

<h5 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a><strong>表示方法</strong></h5><p><strong>实体型：</strong>用记录类型描述，每个结点表示一个记录类型（实体）</p>
<p><strong>属性：</strong>用字段描述，每个记录类型可包含若干个字段</p>
<p><strong>联系：</strong>用结点之间的连线表示记录类型（实体）之间的<strong>一对多</strong>的父子联系</p>
<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228194729758-167819801357113.png" alt="image-20230228194729758" style="zoom: 50%;">

<h5 id="层次模型的数据操纵"><a href="#层次模型的数据操纵" class="headerlink" title="层次模型的数据操纵"></a><strong>层次模型的数据操纵</strong></h5><p>查询 插入 删除 更新</p>
<h5 id="层次模型的完整性约束条件"><a href="#层次模型的完整性约束条件" class="headerlink" title="层次模型的完整性约束条件"></a><strong>层次模型的完整性约束条件</strong></h5><p>无相应的双亲结点值就不能插入子女结点值<br>如果删除双亲结点值，则相应的子女结点值也被同时删除</p>
<h5 id="层次数据模型的存储结构"><a href="#层次数据模型的存储结构" class="headerlink" title="层次数据模型的存储结构"></a><strong>层次数据模型的存储结构</strong></h5><p><strong>邻接法</strong><br>按照层次树前序遍历的顺序把所有记录值依次邻接存放，即通过物理空间的位置相邻来实现层次顺序</p>
<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228194950487-167819801357115.png" alt="image-20230228194950487" style="zoom:50%;">

<p><strong>链接法</strong><br>用指引来反映数据之间的层次联系<br>子女－兄弟链接法<br>层次序列链接法</p>
<p><strong>子女-兄弟链接法</strong><br>每个记录设两类指针，分别指向最左边的子女（每个记录型对应一个）和最近的兄弟</p>
<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228195024242-167819801357114.png" alt="image-20230228195024242" style="zoom:50%;">

<p><strong>层次序列链接法</strong></p>
<p>按树的前序穿越顺序链接各记录值</p>
<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228195039461-167819801357116.png" alt="image-20230228195039461" style="zoom:50%;">

<h5 id="层次模型的优缺点"><a href="#层次模型的优缺点" class="headerlink" title="层次模型的优缺点"></a><strong>层次模型的优缺点</strong></h5><p><strong>优点</strong><br>层次模型的数据结构比较简单清晰<br>查询效率高，性能优于关系模型，不低于网状模型<br>层次数据模型提供了良好的完整性支持</p>
<p><strong>缺点</strong><br>多对多联系表示不自然<br>对插入和删除操作的限制多，应用程序的编写比较复杂<br>查询子女结点必须通过双亲结点</p>
<h4 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h4><p>满足下面两个条件的基本层次联系的集合：</p>
<ol>
<li>允许一个以上的结点无双亲；</li>
<li>一个结点可以有多于一个的双亲。<br>允许两个结点之间有多种联系（复合联系）<br>网状模型可以更直接地去描述现实世界，层次模型实际上是网状模型的一个特例</li>
</ol>
<h5 id="多对多联系在网状模型中的表示"><a href="#多对多联系在网状模型中的表示" class="headerlink" title="多对多联系在网状模型中的表示"></a><strong>多对多联系在网状模型中的表示</strong></h5><p>​		用网状模型间接表示多对多联系<br>​		方法：将多对多联系直接分解成一对多联系</p>
<h5 id="数据操作-1"><a href="#数据操作-1" class="headerlink" title="数据操作"></a><strong>数据操作</strong></h5><p>网状数据库系统（如DBTG）对数据操纵加了一些限制，提供了一定的完整性约束<br>码：唯一标识记录的数据项的集合<br>支持双亲记录和子女记录之间某些约束条件<br>    有些子女记录要求双亲记录存在才能插入，双亲记录删除时也连同删除。例如学生选课记录</p>
<h5 id="网状数据模型的存储结构"><a href="#网状数据模型的存储结构" class="headerlink" title="网状数据模型的存储结构"></a>网状数据模型的存储结构</h5><img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228195613303-167819801357117.png" alt="image-20230228195613303" style="zoom:50%;">

<h5 id="网状数据模型的优缺点"><a href="#网状数据模型的优缺点" class="headerlink" title="网状数据模型的优缺点"></a>网状数据模型的优缺点</h5><p><strong>优点</strong><br>能更为直接地描述现实世界，如一个结点可以有多个双亲</p>
<p>具有良好的性能，存取效率较高</p>
<p><strong>缺点</strong><br>结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂，不利于最终用户掌握</p>
<p>DDL、DML语言复杂，用户不容易使用</p>
<p>记录类型联系变动后涉及链接指针的调整，扩充和维护都比较复杂 </p>
<h4 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h4><p>在用户观点下，关系模型中数据的逻辑结构是一张二维表，它由行和列组成。</p>
<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228195759196-167819801357118.png" alt="image-20230228195759196" style="zoom: 50%;">

<p><strong>关系（Relation）</strong><br>一个关系对应通常说的一张表<br><strong>元组（Tuple）</strong><br>表中的一行即为一个元组<br><strong>属性（Attribute）</strong><br>表中的一列即为一个属性，给每一个属性起一个名称即属性名</p>
<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228195837826-167819801357119.png" alt="image-20230228195837826" style="zoom:50%;">

<p><strong>主码（Key）</strong><br>表中的某个属性组，它可以唯一确定一个元组。<br><strong>域（Domain）</strong><br>属性的取值范围。<br><strong>分量</strong><br>元组中的一个属性值。<br><strong>关系模式</strong><br>对关系的描述<br>关系名（属性1，属性2，…，属性n）<br>学生（学号，姓名，年龄，性别，系，年级）</p>
<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228200117047-167819801357220.png" alt="image-20230228200117047" style="zoom:50%;">

<img lazyload src="/images/loading.svg" data-src="%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230228200133118-167819801357221.png" alt="image-20230228200133118" style="zoom:50%;">

<h5 id="数据操作是集合操作，操作对象和结果都是关系"><a href="#数据操作是集合操作，操作对象和结果都是关系" class="headerlink" title="数据操作是集合操作，操作对象和结果都是关系"></a>数据操作是集合操作，操作对象和结果都是关系</h5><p>查询 插入 删除 更新</p>
<h5 id="完整性约束条件-1"><a href="#完整性约束条件-1" class="headerlink" title="完整性约束条件"></a>完整性约束条件</h5><p>实体完整性<br>参照完整性<br>用户定义的完整性</p>
<h5 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h5><p>实体及实体间的联系都用表来表示<br>表以文件形式存储<br>有的DBMS一个表对应一个操作系统文件<br>有的DBMS自己设计文件结构</p>
<h5 id="关系数据模型的优缺点"><a href="#关系数据模型的优缺点" class="headerlink" title="关系数据模型的优缺点"></a>关系数据模型的优缺点</h5><p><strong>优点</strong><br>建立在严格的数学概念的基础上<br>可以描述一对一、一对多和多对多的联系<br>概念单一<br>        实体和各类联系都用关系来表示<br>        对数据的检索结果也是关系<br>存取路径对用户透明<br>        用户只要指出“干什么”，不必详细说明“怎么干”<br>        具有更高的数据独立性，更好的安全保密性<br>        简化了程序员的工作和数据库开发建立的工作</p>
<p><strong>缺点</strong><br>存取路径对用户透明导致查询效率往往不如非关系数据模型<br>为提高性能，必须对用户的查询请求进行优化增加了开发DBMS的难度</p>
<h4 id="关系模式-ER图"><a href="#关系模式-ER图" class="headerlink" title="关系模式-&gt;ER图"></a>关系模式-&gt;ER图</h4><p>例：<img lazyload src="/images/loading.svg" data-src="G:/XMNSatayBlog/source/_posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230307214952179.png" alt="image-20230307214952179" style="zoom:67%;"></p>
<h3 id="E-R模型补充扩展"><a href="#E-R模型补充扩展" class="headerlink" title="E-R模型补充扩展"></a>E-R模型补充扩展</h3><p><strong>Movie database</strong><br><strong>Movie</strong>: title, year, length, genre<br><strong>Stars</strong>: name, address<br><strong>Studios</strong>: name, address</p>
<p>a studio contracts with a particular start to act in a particular movie for some salary</p>
<img lazyload src="/images/loading.svg" data-src="G:/XMNSatayBlog/source/_posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230307215104726.png" alt="image-20230307215104726" style="zoom:50%;">

<h4 id="多实体集联系-多角色实体集"><a href="#多实体集联系-多角色实体集" class="headerlink" title="多实体集联系+多角色实体集"></a>多实体集联系+多角色实体集</h4><p>怎样表示Studio 2从studio 1租借某演员签约出演某电影？</p>
<img lazyload src="/images/loading.svg" data-src="G:/XMNSatayBlog/source/_posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230307215135547.png" alt="image-20230307215135547" style="zoom:50%;">

<img lazyload src="/images/loading.svg" data-src="G:/XMNSatayBlog/source/_posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230307215534821.png" alt="image-20230307215534821" style="zoom: 33%;">

<p>怎样去掉联系Contracts的属性salary？</p>
<img lazyload src="/images/loading.svg" data-src="G:/XMNSatayBlog/source/_posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230307215600082.png" alt="image-20230307215600082" style="zoom:50%;">

<h4 id="“Is-a”联系"><a href="#“Is-a”联系" class="headerlink" title="“Is a”联系"></a>“Is a”联系</h4><p>怎样表示电影的两个子类“动画片”和“枪战片”</p>
<img lazyload src="/images/loading.svg" data-src="G:/XMNSatayBlog/source/_posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230307215658701.png" alt="image-20230307215658701" style="zoom: 33%;">

<h2 id="1-3-数据库系统结构"><a href="#1-3-数据库系统结构" class="headerlink" title="1.3 数据库系统结构"></a>1.3 数据库系统结构</h2><h4 id="分布式B-S结构数据库系统"><a href="#分布式B-S结构数据库系统" class="headerlink" title="分布式B&#x2F;S结构数据库系统"></a>分布式B&#x2F;S结构数据库系统</h4><img lazyload src="/images/loading.svg" data-src="G:/XMNSatayBlog/source/_posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230307215809913.png" alt="image-20230307215809913" style="zoom:50%;">

<h3 id="数据库系统模式的概念"><a href="#数据库系统模式的概念" class="headerlink" title="数据库系统模式的概念"></a>数据库系统模式的概念</h3><h4 id="“型”-和“值”-的概念"><a href="#“型”-和“值”-的概念" class="headerlink" title="“型” 和“值” 的概念"></a>“型” 和“值” 的概念</h4><p><strong>型(Type)</strong>  对某一类数据的结构和属性的说明<br><strong>值(Value)</strong>  是型的一个具体赋值<br>例如<br>学生记录型：<br>  （学号，姓名，性别，系别，年龄，籍贯）<br>一个记录值：<br>  （900201，李明，男，计算机，22，江苏）</p>
<p><strong>模式（Schema）</strong><br>数据库逻辑结构和特征的描述<br>是型的描述<br>反映的是数据的结构及其联系<br>模式是相对稳定的</p>
<p><strong>实例（Instance）</strong><br>模式的一个具体值<br>反映数据库某一时刻的状态<br>同一个模式可以有很多实例<br>实例随数据库中的数据的更新而变动</p>
<h3 id="数据库系统的三级模式结构"><a href="#数据库系统的三级模式结构" class="headerlink" title="数据库系统的三级模式结构"></a>数据库系统的三级模式结构</h3><img lazyload src="/images/loading.svg" data-src="G:/XMNSatayBlog/source/_posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230307220505091.png" alt="image-20230307220505091" style="zoom: 50%;">

<h4 id="模式（也称逻辑模式）"><a href="#模式（也称逻辑模式）" class="headerlink" title="模式（也称逻辑模式）"></a>模式（也称逻辑模式）</h4><p>​		数据库中全体数据的逻辑结构和特征的描述<br>​		所有用户的公共数据视图，综合了所有用户的需求<br><strong>一个数据库只有一个模式</strong><br><strong>模式的地位：是数据库系统模式结构的中间层</strong><br>​		与数据的物理存储细节和硬件环境无关<br>​		与具体的应用程序、开发工具及高级程序设计语言无关</p>
<p><strong>模式的定义</strong><br>        数据的逻辑结构（数据项的名字、类型、取值范围等）<br>        数据之间的联系<br>        数据有关的安全性、完整性要求</p>
<h4 id="外模式（也称子模式或用户模式）"><a href="#外模式（也称子模式或用户模式）" class="headerlink" title="外模式（也称子模式或用户模式）"></a>外模式（也称子模式或用户模式）</h4><p>数据库用户（包括应用程序员和最终用户）使用的局部数据的逻辑结构和特征的描述<br>数据库用户的数据视图，是与某一应用有关的数据的逻辑表示</p>
<h4 id="内模式（也称存储模式）"><a href="#内模式（也称存储模式）" class="headerlink" title="内模式（也称存储模式）"></a>内模式（也称存储模式）</h4><p>是数据物理结构和存储方式的描述<br>是数据在数据库内部的表示方式</p>
<p><strong>一个数据库只有一个内模式</strong></p>
<img lazyload src="/images/loading.svg" data-src="G:/XMNSatayBlog/source/_posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230307220519463.png" alt="image-20230307220519463" style="zoom:67%;">
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编冒泡排序</title>
    <url>/2023/04/21/%E6%B1%87%E7%BC%96%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>PS：由于Redefine主题和Butterfly主题目前都不支持汇编代码高亮，所以如果想要看到更好看的代码可以联系我拿博文的PDF版本</p>
<h2 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h2><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>请理解给定的<strong>do_swap</strong>汇编函数功能，写出等价的 C 语言函数代码；提示需注意数据类型，如长度、有无符号等（unsigned char ？无符号 1 Byte 长的变量？）</p>
<h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><p><strong>请用汇编语言实现冒泡排序函数（需要有详尽的代码注释）</strong>；提示会调用到已给定的<strong>do_swap</strong>汇编函数</p>
<p>（提示会自动对所实现的冒泡排序函数进行重复测试，无需自行输入字符串）</p>
<img lazyload src="/images/loading.svg" data-src="/2023/04/21/%E6%B1%87%E7%BC%96%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/image-20230422162954586.png" class title="image-20230422162954586">

<h3 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.arch i386</span><br><span class="line">.intel_syntax noprefix</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">.globl	_char_list</span><br><span class="line">.globl	_char_list_len</span><br><span class="line">.globl	_check_flag</span><br><span class="line">.globl	_test_no</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">_char_list_len:</span><br><span class="line">	.byte	10</span><br><span class="line">	.bss</span><br><span class="line">	.align 4</span><br><span class="line">_char_list:</span><br><span class="line">	.space 11</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">_check_flag:</span><br><span class="line">	.byte	1</span><br><span class="line">_test_no:</span><br><span class="line">	.byte	1</span><br><span class="line">	.section .rdata,"dr"</span><br><span class="line">	.align 4</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">hint_test_no:</span><br><span class="line">	.ascii "\12-----------------------------test-%d\12\0"</span><br><span class="line">hint_given_array:</span><br><span class="line">	.ascii "The given array:  %s\12\0"</span><br><span class="line">hint_sorted_array:</span><br><span class="line">	.ascii "The sorted array: %s\12\0"</span><br><span class="line"></span><br><span class="line">hint_test_error_bar:</span><br><span class="line">	.ascii "\12--!--!--!--!--!--!--!--!--!--test-%d\12\12\0"</span><br><span class="line">hint_test_error:</span><br><span class="line">	.ascii "Sorry but try it again!\12\0"</span><br><span class="line">	.align 4</span><br><span class="line">hint_test_success_bar:</span><br><span class="line">	.ascii "\12--*--*--*--*--*--*--*--*--*--passed!\12\12\0"</span><br><span class="line">hint_test_success:</span><br><span class="line">	.ascii "Well done!\12\0"</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">.extern _printf</span><br><span class="line">.extern _puts</span><br><span class="line">.extern _time    # C标准库函数：获取系统时间；可以用于设定随机数种子</span><br><span class="line">.extern _srand   # C标准库函数：用于设定随机数种子</span><br><span class="line">.extern _rand    # C标准库函数：生成随机数</span><br><span class="line"></span><br><span class="line">.globl	gen_random_list</span><br><span class="line">.globl	do_swap</span><br><span class="line">.globl	do_bubble_sort</span><br><span class="line">.globl	check_sort</span><br><span class="line">.globl	_main</span><br><span class="line"></span><br><span class="line">#Function-1# 根据时间种子，随机生成由大小写英文字母构成的字符数组</span><br><span class="line">gen_random_list:</span><br><span class="line">	push	ebp</span><br><span class="line">	mov	ebp, esp</span><br><span class="line">	sub	esp, 12</span><br><span class="line"></span><br><span class="line">	mov	BYTE PTR [ebp-1], 0</span><br><span class="line">in_gen_random_list_loop:</span><br><span class="line">	movzx	eax, BYTE PTR _char_list_len</span><br><span class="line">	cmp	BYTE PTR [ebp-1], al</span><br><span class="line">	jnb	end_gen_random_list</span><br><span class="line"></span><br><span class="line">	mov	DWORD PTR [esp], 0</span><br><span class="line">	call	_time</span><br><span class="line">	mov	edx, eax</span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	add	edx, eax</span><br><span class="line">	movzx	eax, BYTE PTR _test_no</span><br><span class="line">	movzx	eax, al</span><br><span class="line">	add	eax, edx</span><br><span class="line">	mov	DWORD PTR [esp], eax</span><br><span class="line">	call	_srand</span><br><span class="line"></span><br><span class="line">	call	_rand</span><br><span class="line">	and	eax, 1</span><br><span class="line">	test	eax, eax</span><br><span class="line">	setne	al</span><br><span class="line">	test	al, al</span><br><span class="line">	je	in_gen_lower_letter</span><br><span class="line"></span><br><span class="line">	call	_rand</span><br><span class="line">	mov	ecx, eax</span><br><span class="line">	mov	edx, 0x4EC4EC4F</span><br><span class="line">	mov	eax, ecx</span><br><span class="line">	imul	edx</span><br><span class="line">	sar	edx, 3</span><br><span class="line">	mov	eax, ecx</span><br><span class="line">	sar	eax, 31  # 算数右移指令；其中，与逻辑右移shr 补 0 不同，sar 补位时，最高位保持不变</span><br><span class="line">	sub	edx, eax</span><br><span class="line">	mov	eax, edx</span><br><span class="line">	imul	eax, eax, 26  # 有符号乘法指令，eax * 26 --所得乘积放入--&gt; eax</span><br><span class="line">	sub	ecx, eax</span><br><span class="line">	mov	eax, ecx</span><br><span class="line">	mov	edx, eax</span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	add	edx, 65</span><br><span class="line">	mov	BYTE PTR _char_list[eax], dl</span><br><span class="line"></span><br><span class="line">	jmp	in_gen_upper_letter</span><br><span class="line"></span><br><span class="line">in_gen_lower_letter:</span><br><span class="line">	call	_rand</span><br><span class="line">	mov	ecx, eax</span><br><span class="line">	mov	edx, 0x4EC4EC4F</span><br><span class="line">	mov	eax, ecx</span><br><span class="line">	imul	edx</span><br><span class="line">	sar	edx, 3   # 算数右移指令；其中，与逻辑右移shr 补 0 不同，sar 补位时，最高位保持不变</span><br><span class="line">	mov	eax, ecx</span><br><span class="line">	sar	eax, 31</span><br><span class="line">	sub	edx, eax</span><br><span class="line">	mov	eax, edx</span><br><span class="line">	imul	eax, eax, 26</span><br><span class="line">	sub	ecx, eax</span><br><span class="line">	mov	eax, ecx</span><br><span class="line">	mov	edx, eax</span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	add	edx, 97</span><br><span class="line">	mov	BYTE PTR _char_list[eax], dl</span><br><span class="line"></span><br><span class="line">in_gen_upper_letter:</span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	add	eax, 1</span><br><span class="line">	mov	BYTE PTR [ebp-1], al</span><br><span class="line">	jmp	in_gen_random_list_loop</span><br><span class="line"></span><br><span class="line">end_gen_random_list:</span><br><span class="line">	movzx	eax, BYTE PTR _char_list_len</span><br><span class="line">	movzx	eax, al</span><br><span class="line">	mov	BYTE PTR _char_list[eax], 0  # 字符数组末尾置零，方便按字符串进行一次性整体打印</span><br><span class="line"></span><br><span class="line">	movzx	eax, BYTE PTR _test_no</span><br><span class="line">	movzx	eax, al</span><br><span class="line"></span><br><span class="line">	mov	DWORD PTR [esp+4], eax</span><br><span class="line">	mov	DWORD PTR [esp], OFFSET FLAT:hint_test_no</span><br><span class="line">	call	_printf</span><br><span class="line"></span><br><span class="line">	mov	DWORD PTR [esp+4], OFFSET FLAT:_char_list</span><br><span class="line">	mov	DWORD PTR [esp], OFFSET FLAT:hint_given_array</span><br><span class="line">	call	_printf</span><br><span class="line"></span><br><span class="line">	leave</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line">#Function-2# 实现交换两个指针各自指向的数据内容</span><br><span class="line">do_swap:                          #*# 问题-2：请理解已给定的do_swap汇编函数功能，写出等价的 C 语言函数代码</span><br><span class="line">                                  #          提示需注意数据类型，如长度、有无符号等</span><br><span class="line">	push	ebp</span><br><span class="line">	mov	ebp, esp</span><br><span class="line">	sub	esp, 4</span><br><span class="line"></span><br><span class="line">	mov	eax, DWORD PTR [ebp+8]</span><br><span class="line">	movzx	eax, BYTE PTR [eax]</span><br><span class="line">	mov	BYTE PTR [ebp-1], al</span><br><span class="line"></span><br><span class="line">	mov	eax, DWORD PTR [ebp+12]</span><br><span class="line">	movzx	edx, BYTE PTR [eax]</span><br><span class="line">	mov	eax, DWORD PTR [ebp+8]</span><br><span class="line">	mov	BYTE PTR [eax], dl</span><br><span class="line"></span><br><span class="line">	mov	eax, DWORD PTR [ebp+12]</span><br><span class="line">	movzx	edx, BYTE PTR [ebp-1]</span><br><span class="line">	mov	BYTE PTR [eax], dl</span><br><span class="line"></span><br><span class="line">	leave</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line">#Function-3# 对排序结果得正确性进行检查</span><br><span class="line">check_sort:</span><br><span class="line">	push	ebp</span><br><span class="line">	mov	ebp, esp</span><br><span class="line">	sub	esp, 12</span><br><span class="line"></span><br><span class="line">	mov	DWORD PTR [esp+4], OFFSET FLAT:_char_list</span><br><span class="line">	mov	DWORD PTR [esp], OFFSET FLAT:hint_sorted_array</span><br><span class="line">	call	_printf</span><br><span class="line"></span><br><span class="line">	mov	BYTE PTR [ebp-1], 0</span><br><span class="line"></span><br><span class="line">in_check_loop:</span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	movzx	edx, BYTE PTR _char_list_len</span><br><span class="line">	movzx	edx, dl</span><br><span class="line">	sub	edx, 1</span><br><span class="line">	cmp	eax, edx</span><br><span class="line">	jge	end_check_sort</span><br><span class="line"></span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	movzx	edx, BYTE PTR _char_list[eax]</span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	add	eax, 1</span><br><span class="line">	movzx	eax, BYTE PTR _char_list[eax]</span><br><span class="line">	cmp	dl, al</span><br><span class="line">	jbe	in_error_check</span><br><span class="line"></span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	movzx	eax, BYTE PTR _char_list[eax]</span><br><span class="line">	cmp	al, 96</span><br><span class="line">	jbe	in_error_marked</span><br><span class="line"></span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	add	eax, 1</span><br><span class="line">	movzx	eax, BYTE PTR _char_list[eax]</span><br><span class="line">	cmp	al, 90</span><br><span class="line">	jbe	continue_in_check_loop</span><br><span class="line"></span><br><span class="line">in_error_marked:</span><br><span class="line">	mov	BYTE PTR _check_flag, 0</span><br><span class="line">	jmp	end_check_sort</span><br><span class="line"></span><br><span class="line">in_error_check:</span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	movzx	eax, BYTE PTR _char_list[eax]</span><br><span class="line">	cmp	al, 90</span><br><span class="line">	ja	continue_in_check_loop</span><br><span class="line"></span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	add	eax, 1</span><br><span class="line">	movzx	eax, BYTE PTR _char_list[eax]</span><br><span class="line">	cmp	al, 96</span><br><span class="line">	jbe	continue_in_check_loop</span><br><span class="line"></span><br><span class="line">	mov	BYTE PTR _check_flag, 0</span><br><span class="line">	jmp	end_check_sort</span><br><span class="line"></span><br><span class="line">continue_in_check_loop:</span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	add	eax, 1</span><br><span class="line">	mov	BYTE PTR [ebp-1], al</span><br><span class="line">	jmp	in_check_loop</span><br><span class="line"></span><br><span class="line">end_check_sort:</span><br><span class="line">	leave</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line">#Function-4# 冒泡排序函数</span><br><span class="line">do_bubble_sort:                          #*# 问题-3：请用汇编语言实现冒泡排序函数；</span><br><span class="line">                                         #          提示会调用到已给定的do_swap汇编函数</span><br><span class="line">	push	ebp</span><br><span class="line">	mov	ebp, esp</span><br><span class="line">	sub	esp, 16</span><br><span class="line"></span><br><span class="line">### ------------------------------------冒泡排序正文----------------------------------------开始</span><br><span class="line">    nop     # 为 No Operation 缩写，表示不进行任何有效操作的汇编指令</span><br><span class="line">    nop</span><br><span class="line">    nop</span><br><span class="line">### ------------------------------------冒泡排序正文----------------------------------------结束</span><br><span class="line"></span><br><span class="line">end_bubble_sort:</span><br><span class="line">	leave</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line">#Function-5# 主函数 main</span><br><span class="line">_main:</span><br><span class="line">	push	ebp</span><br><span class="line">	mov	ebp, esp</span><br><span class="line">	sub	esp, 8</span><br><span class="line"></span><br><span class="line">test_loop:</span><br><span class="line">	movzx	eax, BYTE PTR _test_no</span><br><span class="line">	cmp	al, 100       # 对排序函数进行测试的总次数；提示：调试时可以将这里改小一点，如改为 2</span><br><span class="line">	ja end_test_loop  # 通过判断两个无符号数之间的大小关系，如果 CF &amp; ZF = 0，说明大于，则转移</span><br><span class="line"></span><br><span class="line">	call	gen_random_list</span><br><span class="line">	call	do_bubble_sort</span><br><span class="line">	call	check_sort</span><br><span class="line"></span><br><span class="line">	movzx	eax, BYTE PTR _check_flag                                 </span><br><span class="line">	test	al, al</span><br><span class="line">	jne	continue_test</span><br><span class="line"></span><br><span class="line">	movzx	eax, BYTE PTR _test_no</span><br><span class="line">	movzx	eax, al</span><br><span class="line">	mov	DWORD PTR [esp+4], eax</span><br><span class="line">	mov	DWORD PTR [esp], OFFSET FLAT:hint_test_error_bar</span><br><span class="line">	call	_printf</span><br><span class="line">	mov	DWORD PTR [esp], OFFSET FLAT:hint_test_error</span><br><span class="line">	call	_puts</span><br><span class="line">	jmp	end_test_loop</span><br><span class="line"></span><br><span class="line">continue_test:</span><br><span class="line">	movzx	eax, BYTE PTR _test_no</span><br><span class="line">	add	eax, 1</span><br><span class="line">	mov	BYTE PTR _test_no, al</span><br><span class="line">	jmp	test_loop</span><br><span class="line"></span><br><span class="line">end_test_loop:</span><br><span class="line">	movzx	eax, BYTE PTR _check_flag</span><br><span class="line">	test	al, al</span><br><span class="line">	je	_end_main</span><br><span class="line"></span><br><span class="line">	mov	DWORD PTR [esp], OFFSET FLAT:hint_test_success_bar</span><br><span class="line">	call	_printf</span><br><span class="line"></span><br><span class="line">	mov	DWORD PTR [esp], OFFSET FLAT:hint_test_success</span><br><span class="line">	call	_puts</span><br><span class="line"></span><br><span class="line">_end_main:                                     </span><br><span class="line">	mov	eax, 0</span><br><span class="line"></span><br><span class="line">	leave</span><br><span class="line">	ret</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="问题2-1"><a href="#问题2-1" class="headerlink" title="问题2"></a>问题2</h3><h4 id="原题重现"><a href="#原题重现" class="headerlink" title="原题重现"></a>原题重现</h4><p>请理解给定的<strong>do_swap</strong>汇编函数功能，写出等价的 C 语言函数代码；提示需注意数据类型，如长度、有无符号等（unsigned char ？无符号 1 Byte 长的变量？）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Function-2# 实现交换两个指针各自指向的数据内容</span><br><span class="line">do_swap:                          </span><br><span class="line">	push	ebp</span><br><span class="line">	mov	ebp, esp</span><br><span class="line">	sub	esp, 4</span><br><span class="line"></span><br><span class="line">	mov	eax, DWORD PTR [ebp+8]</span><br><span class="line">	movzx	eax, BYTE PTR [eax]</span><br><span class="line">	mov	BYTE PTR [ebp-1], al</span><br><span class="line"></span><br><span class="line">	mov	eax, DWORD PTR [ebp+12]</span><br><span class="line">	movzx	edx, BYTE PTR [eax]</span><br><span class="line">	mov	eax, DWORD PTR [ebp+8]</span><br><span class="line">	mov	BYTE PTR [eax], dl</span><br><span class="line"></span><br><span class="line">	mov	eax, DWORD PTR [ebp+12]</span><br><span class="line">	movzx	edx, BYTE PTR [ebp-1]</span><br><span class="line">	mov	BYTE PTR [eax], dl</span><br><span class="line"></span><br><span class="line">	leave</span><br><span class="line">	ret</span><br></pre></td></tr></table></figure></div>

<h4 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h4><p>其实在做这个作业的过程中读了很多很多汇编代码了，过了一开始的入门阶段之后再来读这段汇编代码其实不太难的 </p>
<p>我往代码里加点注释，就能把这段代码读懂了</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Function-2# 实现交换两个指针各自指向的数据内容</span><br><span class="line">do_swap:                          </span><br><span class="line">	push	ebp</span><br><span class="line">	mov	ebp, esp</span><br><span class="line">	sub	esp, 4</span><br><span class="line"></span><br><span class="line">    mov	eax, DWORD PTR [ebp+8]    ; 将第一个指针地址从函数参数中加载到EAX寄存器</span><br><span class="line">    movzx	eax, BYTE PTR [eax]    ; 将指针所指的地址中的字节数据加载到EAX寄存器</span><br><span class="line">    mov	BYTE PTR [ebp-1], al    ; 将EAX寄存器的低字节内容保存到新分配的栈空间中</span><br><span class="line"></span><br><span class="line">    mov	eax, DWORD PTR [ebp+12]    ; 将第二个指针地址从函数参数中加载到EAX寄存器</span><br><span class="line">    movzx	edx, BYTE PTR [eax]    ; 将指针所指的地址中的字节数据加载到EDX寄存器</span><br><span class="line">    mov	eax, DWORD PTR [ebp+8]    ; 将第一个指针地址从函数参数中重新加载到EAX寄存器</span><br><span class="line">    mov	BYTE PTR [eax], dl    ; 将EDX寄存器的低字节内容保存到EAX所指向的地址中</span><br><span class="line"></span><br><span class="line">    mov	eax, DWORD PTR [ebp+12]    ; 将第二个指针地址从函数参数中重新加载到EAX寄存器</span><br><span class="line">    movzx	edx, BYTE PTR [ebp-1]    ; 将新分配的栈空间中的低字节内容加载到EDX寄存器</span><br><span class="line">    mov	BYTE PTR [eax], dl    ; 将EDX寄存器的低字节内容保存到EAX所指向的地址中</span><br><span class="line"></span><br><span class="line">    leave    ; 恢复堆栈</span><br><span class="line">    ret    ; 函数返回</span><br></pre></td></tr></table></figure></div>

<p>其中要注意的就是这里的数据类型，转换为C语言代码之后是<strong>unsigned char</strong>，在汇编代码中是不带符号的数据传递，因此这边是一个无符号数据</p>
<p>其实反过来想，题目是一个字符串排序，ASCII码不可能是负值，因此使用无符号数就够了</p>
<p><strong>等价的C语言代码如下</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">do_swap</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *a, <span class="type">unsigned</span> <span class="type">char</span> *b)</span> {</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> c = *a;  </span><br><span class="line">    *a = *b;  </span><br><span class="line">    *b = c;  </span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>



<h3 id="问题3-1"><a href="#问题3-1" class="headerlink" title="问题3"></a>问题3</h3><h4 id="原题重现-1"><a href="#原题重现-1" class="headerlink" title="原题重现"></a>原题重现</h4><p><strong>请用汇编语言实现冒泡排序函数（需要有详尽的代码注释）</strong>；提示会调用到已给定的<strong>do_swap</strong>汇编函数</p>
<h4 id="问题分析-2"><a href="#问题分析-2" class="headerlink" title="问题分析"></a>问题分析</h4><p>这个题目真的写了好久好久，下面是一些笨人作为小白的一些简单分析</p>
<p>首先我们应该先知道普通的冒泡排序的原理以及用C语言如何实现：</p>
<h5 id="冒泡排序原理"><a href="#冒泡排序原理" class="headerlink" title="冒泡排序原理"></a>冒泡排序原理</h5><p>从第一个元素开始往后冒泡，遇到比自己小的就向前交换，直到最后</p>
<p>每次一个元素冒泡到最大处冒泡的长度就可以-1，冒剩余的N-1个泡即可</p>
<h5 id="C语言代码"><a href="#C语言代码" class="headerlink" title="C语言代码"></a>C语言代码</h5><p>参考自上学期的数据结构笔记的代码（其实是懒得再写一遍了…）</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Bubble_Sort</span><span class="params">(ElementType A[], <span class="type">int</span> N)</span> {</span><br><span class="line">    <span class="keyword">for</span> (P = N - <span class="number">1</span>; P &gt;= <span class="number">0</span>; P--) {</span><br><span class="line">        flag = <span class="number">0</span>; <span class="comment">//标志位，用来记录是否发生了交换</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; P; i++) { <span class="comment">/* 一趟冒泡 */</span></span><br><span class="line">            <span class="keyword">if</span> (A[i] &gt; A[i + <span class="number">1</span>]) {</span><br><span class="line">                Swap(A[i], A[i + <span class="number">1</span>]);<span class="comment">//调用交换子函数</span></span><br><span class="line">                flag = <span class="number">1</span>; <span class="comment">/* 标识发生了交换 */</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">/* 全程无交换 */</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h5 id="汇编代码编写分析"><a href="#汇编代码编写分析" class="headerlink" title="汇编代码编写分析"></a>汇编代码编写分析</h5><p>从C语言的代码就可以看到了，冒泡排序需要两个循环，一个外层循环和一个内层循环，然后传进来的参数有两个，一个是待排序的数组，另一个就是数组长度。在本题当中数组和数组长度作为全局变量在汇编代码最开始的时候就定义了，因此它们两个的地址还是很好找的，直接拿下来用就行（老师在这里还是很善良的，不然就要去读前面Function 1里面的代码去找生成的数组放在哪了）。</p>
<p>因此，在编写汇编代码的时候也是这样，写一个内层循环和一个外层循环分别实现两个循环的功能就行，在把 C语言的循环转换成汇编语言的时候，有几个注意点：<strong>1.计数器   2.循环跳转   3.参数传递</strong></p>
<p>首先是对于循环体本身，我们需要用一个局部变量来存储计数器，内层循环和外层循环都是这样，这里将计数器存在局部变量区，需要操作的时候再调入寄存器，这样可以防止因为寄存器使用冲突（比如放入了eax寄存器，子函数也使用了eax寄存器）导致计数器丢失，同时这样也释放了寄存器，有了更多的寄存器可以使用。虽然本题寄存器够用，将计数器放入局部变量区反倒需要调用内存使得程序的局部性变差，同时调用内存也不如寄存器速度快，但是在其它题目就不一定了，如果出现寄存器不够用就必须得存入局部变量区了。（而且局部变量区有16字节，不用白不用嘛~）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#使用局部变量区存储计数器，可以避免在调用do_swap的过程中计数器的值被子函数修改</span><br><span class="line">    mov     BYTE PTR [ebp-8], 0  #外层循环计数器,将其存在局部变量区</span><br><span class="line">    movzx   ebx, BYTE PTR _char_list_len #数组长度存入ebx寄存器</span><br></pre></td></tr></table></figure></div>



<p>在定位数组元素的时候使用相对寻址，写法是这样的：<code>BYTE PTR _char_list[edi]</code></p>
<p>本题有一个细节：从示例我们可以看到是要将小写字母放在大写字母前面的，而小写字母的ASCII码是大于大写字母的，所以我们需要判断大小写，并将小写字母的数值变得比大写字母小。调试的时候注意看寄存器，字符存进去时存放的都是ASCII码，也就是说底层字符就是用ASCII码表示的，因此可以直接修改ASCII码，使得小写字母在比较大小的时候比大写字母小，这样就可以解决大小写判断问题。</p>
<p>汇编语言的if-else语句是使用跳转函数实现的，所以在这题里面就有一个很反人类的点了，连续两个字符都需要进行大小写判断，所以这个地方的跳转必须是一个一个按顺序写，我暂时不知道有没有更优的写法，反正我写的是很不优雅…</p>
<p>如果有更好的写法dd我：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进行大小写检查，由于大写字母ASCII码从65开始，因此可以在比较的时候将小写字母-58将其接到大写字母前面使得其一定比大写字母小</span><br><span class="line">    cmp     eax, 97 #小写字母ASCII起始值为97</span><br><span class="line">    jae     transfer_a #如果是小写字母就让它-58</span><br><span class="line">    cmp     edx, 97 #接着检查下一个字符是否为小写字符</span><br><span class="line">    jae     transfer_b</span><br><span class="line">    jmp     compare  </span><br><span class="line"></span><br><span class="line">transfer_a: #要按顺序跳转才行</span><br><span class="line">    sub     eax, 58</span><br><span class="line">    cmp     edx, 97 #检查下一个字符是否为小写字符</span><br><span class="line">    jae     transfer_b</span><br><span class="line">    jmp     compare</span><br><span class="line">    </span><br><span class="line">transfer_b:</span><br><span class="line">    sub     edx, 58 #如果是小写字母就让它-58</span><br></pre></td></tr></table></figure></div>



<p>循环也是一样的，循环结束使用的是跳转指令进行的，因为这个题目中间因为比较有几次跳转，因此我们需要为循环跳转再写两个函数：内层循环：not_swap，外层循环：end_inner_loop</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">not_swap: </span><br><span class="line">    dec     BYTE PTR [ebp-4] #内层循环计数器-1</span><br><span class="line">    jmp     inner_loop #回到内层循环，进行下一轮的比较</span><br><span class="line"></span><br><span class="line">end_inner_loop:</span><br><span class="line">    cmp     BYTE PTR [ebp-9], 1 #测试标志位，检查是否发生了交换</span><br><span class="line">    jne     end_bubble_sort #如果发生了交换就跳入外层循环，否则说明数组已经有序，直接结束排序</span><br><span class="line">    inc     BYTE PTR [ebp-8] #外层循环计数器+1，表示已经进行完一轮冒泡</span><br><span class="line">    jmp     outer_loop #进行下一轮冒泡</span><br></pre></td></tr></table></figure></div>



<p>接下来就是最重要的参数传递部分，首先先看看我的第四版代码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov     eax, DWORD PTR [ebp-12] #将左指针存入eax，即将前面的字符存入eax</span><br><span class="line">  movzx   eax, BYTE PTR [eax]</span><br><span class="line">  mov     edx, DWORD PTR [ebp-16] #将右指针存入edx，即将后面的字符存入edx</span><br><span class="line">  movzx   edx, BYTE PTR [edx] </span><br><span class="line"></span><br><span class="line">  cmp     eax, edx #比较前后两个元素的值</span><br><span class="line">  jbe     not_swap #如果前面的元素小于后面的元素值则不交换</span><br><span class="line"></span><br><span class="line">  mov     eax, DWORD PTR [ebp-12] #把要交换的两个元素放入do_swap程序栈中准备供do_swap调用，传参操作</span><br><span class="line">  mov     edx, DWORD PTR [ebp-16]</span><br><span class="line">  mov     DWORD PTR [esp+8], edx</span><br><span class="line">  mov     DWORD PTR [esp+4], eax </span><br><span class="line">  #mov     DWORD PTR [esp], OFFSET FLAT:do_swap #将do_swap函数地址移动到栈顶，准备调用</span><br><span class="line">  call    do_swap #调用do_swap，交换前后两个元素</span><br><span class="line">  mov     BYTE PTR [ebp-9], 1 #标志位设置为1，记录内层发生了交换</span><br></pre></td></tr></table></figure></div>

<p>这个是ChatGPT写的，相当丑陋的代码，而且这个代码根本无法实现参数传递，但是我们注意看这段代码参数传递的方式，这段代码的参数传递使用MOV指令，通过ESP寄存器的偏移来传参的，这就需要查看_do_swap函数函数使用的参数在哪，同时我们也需要知道函数栈的结构：</p>
<p>函数栈结构图：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/04/21/%E6%B1%87%E7%BC%96%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/image-20230422162829463.png" class title="image-20230422162829463">

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">do_swap:                         </span><br><span class="line">	push	ebp</span><br><span class="line">	mov	ebp, esp</span><br><span class="line">	sub	esp, 4</span><br><span class="line"></span><br><span class="line">	mov	eax, DWORD PTR [ebp+8] #第一个参数</span><br><span class="line">	movzx	eax, BYTE PTR [eax]</span><br><span class="line">	mov	BYTE PTR [ebp-1], al</span><br><span class="line"></span><br><span class="line">	mov	eax, DWORD PTR [ebp+12] #第二个参数</span><br><span class="line">	movzx	edx, BYTE PTR [eax]</span><br><span class="line">	mov	eax, DWORD PTR [ebp+8]</span><br><span class="line">	mov	BYTE PTR [eax], dl</span><br><span class="line"></span><br><span class="line">	mov	eax, DWORD PTR [ebp+12]</span><br><span class="line">	movzx	edx, BYTE PTR [ebp-1]</span><br><span class="line">	mov	BYTE PTR [eax], dl</span><br><span class="line"></span><br><span class="line">	leave</span><br><span class="line">	ret</span><br></pre></td></tr></table></figure></div>

<p>可以看到do_swap函数的参数使用的是[ebp+8]和[ebp+12]的位置，因此我们需要把参数传到这两个位置上去</p>
<p>使用MOV而使用PUSH来传递参数的好处就是不会改变函数栈的栈顶位置（也就是ESP的位置），但是上面这段代码传的相当丑陋，苯小白现在也还没解决这个问题，希望懂的佬看到了dd我😢</p>
<p>所以我最终使用的是PUSH来传参，使用PUSH函数就不用管这个参数在子函数中该是当前的[esp+多少]了，而且这个_do_swap函数本身在一开始就初始化了函数栈，因此我们可以随便push，记得push之后要改一下ESP：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">lea     eax, BYTE PTR _char_list[edi]  # 计算左指针地址，存入eax寄存器，准备压入函数栈</span><br><span class="line">   push    eax</span><br><span class="line">   inc     edi #edi+1索引到右指针</span><br><span class="line">   lea     eax, BYTE PTR _char_list[edi]  # 计算右指针地址，存入eax寄存器，准备压入函数栈</span><br><span class="line">   push    eax</span><br><span class="line">   </span><br><span class="line">   call    do_swap #调用do_swap，交换前后两个元素</span><br><span class="line">   add     esp, 8 #往函数栈中压入了两个字符，esp栈寄存器+8，由于每次调用函数都会重新设置栈寄存器，所以在调用do_bubble_sort时会自动将esp还原</span><br></pre></td></tr></table></figure></div>

<p>传递参数之前要使用LEA指令将需要交换的数组元素的地址放到寄存器当中才可以正确将指针传入！</p>
<h4 id="整体代码实现"><a href="#整体代码实现" class="headerlink" title="整体代码实现"></a>整体代码实现</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Function-4# 冒泡排序函数</span><br><span class="line">do_bubble_sort:</span><br><span class="line">    push    ebp</span><br><span class="line">    mov     ebp, esp</span><br><span class="line">    sub     esp, 16</span><br><span class="line"></span><br><span class="line">    ### ------------------------------冒泡排序正文----------------------------开始</span><br><span class="line">    #选择从后往前冒泡</span><br><span class="line">    #使用局部变量区存储计数器，可以避免在调用do_swap的过程中计数器的值被子函数修改</span><br><span class="line">    mov     BYTE PTR [ebp-8], 0  #外层循环计数器,将其存在局部变量区</span><br><span class="line">    movzx   ebx, BYTE PTR _char_list_len #数组长度存入ebx寄存器</span><br><span class="line">outer_loop:</span><br><span class="line">    mov     BYTE PTR [ebp-9], 0 #标志位，记录是否发生了交换</span><br><span class="line">    mov     cl, BYTE PTR [ebp-8]#将外层循环计数器的值调入寄存器中,准备进行比较</span><br><span class="line">    movzx   ecx, cl</span><br><span class="line">    cmp     ecx, ebx #比较最后一个元素下标和循环计数器的值</span><br><span class="line">    jae     end_bubble_sort #如果循环次数已经和数组下标-1相等（即已经排序到最后一个元素）则排序结束</span><br><span class="line"></span><br><span class="line">    mov     BYTE PTR [ebp-4], bl #内层循环计数器</span><br><span class="line">    dec     BYTE PTR [ebp-4] #内层循环计数器，初始值是数组长度-1，表示数组最后一个元素的下标,并且每一轮都-1</span><br><span class="line">    </span><br><span class="line">inner_loop: #内层循环，进行一次的冒泡（交换）</span><br><span class="line">    movzx   esi, BYTE PTR [ebp-4]#将两个计数器装入通用寄存器</span><br><span class="line">    movzx   edi, BYTE PTR [ebp-8]</span><br><span class="line">    cmp     esi, edi #比较循环计数器与最后一个元素的下标值</span><br><span class="line">    jbe     end_inner_loop #如果相等则表示一轮冒泡结束，跳转到退出内层循环</span><br><span class="line">    </span><br><span class="line">    mov     eax, esi #将内层循环计数器的值放入通用寄存器</span><br><span class="line">    mov     edx, eax #将右指针存入edx，即将后面的字符存入edx，此时edx的值是数组的最后一个未排序元素的下标</span><br><span class="line">    dec     eax      #此时eax存的是前一个字符的下标</span><br><span class="line">    mov     edi, eax #edi此时的索引值就是左指针（前一个字符）     </span><br><span class="line"></span><br><span class="line">    movzx   eax, BYTE PTR _char_list[edi] #将前一个字符装入eax</span><br><span class="line">    movzx   edx, BYTE PTR _char_list[esi] #将后一个字符装入edx</span><br><span class="line">    </span><br><span class="line">    #一个更优的写法，先将字符存入局部变量区，需要时再移入寄存器，这样可以防止因寄存器被修改导致字符丢失，不过此处由于是连续使用字符所以也无需这样做</span><br><span class="line">    #mov    DWORD PTR [ebp-10], eax #存储左指针地址</span><br><span class="line">    #mov    DWORD PTR [ebp-12], edx #存储右指针地址</span><br><span class="line">    </span><br><span class="line">    #进行大小写检查，由于大写字母ASCII码从65开始，因此可以在比较的时候将小写字母-58将其接到大写字母前面使得其一定比大写字母小</span><br><span class="line">    cmp     eax, 97 #小写字母ASCII起始值为97</span><br><span class="line">    jae     transfer_a #如果是小写字母就让它-58</span><br><span class="line">    cmp     edx, 97 #接着检查下一个字符是否为小写字符</span><br><span class="line">    jae     transfer_b</span><br><span class="line">    jmp     compare  </span><br><span class="line"></span><br><span class="line">transfer_a: #要按顺序跳转才行</span><br><span class="line">    sub     eax, 58</span><br><span class="line">    cmp     edx, 97 #检查下一个字符是否为小写字符</span><br><span class="line">    jae     transfer_b</span><br><span class="line">    jmp     compare</span><br><span class="line">    </span><br><span class="line">transfer_b:</span><br><span class="line">    sub     edx, 58 #如果是小写字母就让它-58</span><br><span class="line">    </span><br><span class="line">compare:</span><br><span class="line">    cmp     edx, eax #比较前后两个元素的值（ASCII码）</span><br><span class="line">    jae     not_swap #如果前面的元素小于后面的元素值则不交换</span><br><span class="line">    </span><br><span class="line">    lea     eax, BYTE PTR _char_list[edi]  # 计算左指针地址，存入eax寄存器，准备压入函数栈</span><br><span class="line">    push    eax</span><br><span class="line">    inc     edi #edi+1索引到右指针</span><br><span class="line">    lea     eax, BYTE PTR _char_list[edi]  # 计算右指针地址，存入eax寄存器，准备压入函数栈</span><br><span class="line">    push    eax</span><br><span class="line">    </span><br><span class="line">    call    do_swap #调用do_swap，交换前后两个元素</span><br><span class="line">    add     esp, 8 #往函数栈中压入了两个字符，esp栈寄存器+8，由于每次调用函数都会重新设置栈寄存器，所以在调用do_bubble_sort时会自动将esp还原</span><br><span class="line">    mov     BYTE PTR [ebp-9], 1 #标志位设置为1，记录内层发生了交换</span><br><span class="line"></span><br><span class="line">not_swap:</span><br><span class="line">    dec     BYTE PTR [ebp-4] #内层循环计数器-1</span><br><span class="line">    jmp     inner_loop #回到内层循环，进行下一轮的比较</span><br><span class="line"></span><br><span class="line">end_inner_loop:</span><br><span class="line">    cmp     BYTE PTR [ebp-9], 1 #测试标志位，检查是否发生了交换</span><br><span class="line">    jne     end_bubble_sort #如果发生了交换就跳入外层循环，否则说明数组已经有序，直接结束排序</span><br><span class="line">    inc     BYTE PTR [ebp-8] #外层循环计数器+1，表示已经进行完一轮冒泡</span><br><span class="line">    jmp     outer_loop #进行下一轮冒泡</span><br><span class="line"></span><br><span class="line">    ### ------------------------------冒泡排序正文----------------------------结束</span><br><span class="line"></span><br><span class="line">end_bubble_sort:</span><br><span class="line">    leave</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure></div>

<h2 id="一些小声bb"><a href="#一些小声bb" class="headerlink" title="一些小声bb"></a>一些小声bb</h2><p>大学以来第一次真正破防就是写这个汇编作业，真的写到了作业截止日期的最后一天才写完，中间整整写了六版，而且都是很不一样的，最后还是参考了别人代码的一些些内容（感谢Windy，他！是！我！的！神！）。不过在写这个作业的过程中真的学到了很多，读汇编代码顺了很多，而且也搞懂了函数栈和函数调用。难的作业，学到的也多，而且老师真的超级超级用心，超级超级体谅我们，是我上大学见过的最好的老师了！</p>
<h2 id="完成代码"><a href="#完成代码" class="headerlink" title="完成代码"></a>完成代码</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.arch i386</span><br><span class="line">.intel_syntax noprefix</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">.globl	_char_list</span><br><span class="line">.globl	_char_list_len</span><br><span class="line">.globl	_check_flag</span><br><span class="line">.globl	_test_no</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">_char_list_len:</span><br><span class="line">	.byte	10</span><br><span class="line">	.bss</span><br><span class="line">	.align 4</span><br><span class="line">_char_list:</span><br><span class="line">	.space 11</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">_check_flag:</span><br><span class="line">	.byte	1</span><br><span class="line">_test_no:</span><br><span class="line">	.byte	1</span><br><span class="line">	.section .rdata,"dr"</span><br><span class="line">	.align 4</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">hint_test_no:</span><br><span class="line">	.ascii "\12-----------------------------test-%d\12\0"</span><br><span class="line">hint_given_array:</span><br><span class="line">	.ascii "The given array:  %s\12\0"</span><br><span class="line">hint_sorted_array:</span><br><span class="line">	.ascii "The sorted array: %s\12\0"</span><br><span class="line"></span><br><span class="line">hint_test_error_bar:</span><br><span class="line">	.ascii "\12--!--!--!--!--!--!--!--!--!--test-%d\12\12\0"</span><br><span class="line">hint_test_error:</span><br><span class="line">	.ascii "Sorry but try it again!\12\0"</span><br><span class="line">	.align 4</span><br><span class="line">hint_test_success_bar:</span><br><span class="line">	.ascii "\12--*--*--*--*--*--*--*--*--*--passed!\12\12\0"</span><br><span class="line">hint_test_success:</span><br><span class="line">	.ascii "Well done!\12\0"</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">.extern _printf</span><br><span class="line">.extern _puts</span><br><span class="line">.extern _time    # C标准库函数：获取系统时间；可以用于设定随机数种子</span><br><span class="line">.extern _srand   # C标准库函数：用于设定随机数种子</span><br><span class="line">.extern _rand    # C标准库函数：生成随机数</span><br><span class="line"></span><br><span class="line">.globl	gen_random_list</span><br><span class="line">.globl	do_swap</span><br><span class="line">.globl	do_bubble_sort</span><br><span class="line">.globl	check_sort</span><br><span class="line">.globl	_main</span><br><span class="line"></span><br><span class="line">#Function-1# 根据时间种子，随机生成由大小写英文字母构成的字符数组</span><br><span class="line">gen_random_list:</span><br><span class="line">	push	ebp</span><br><span class="line">	mov	ebp, esp</span><br><span class="line">	sub	esp, 12</span><br><span class="line"></span><br><span class="line">	mov	BYTE PTR [ebp-1], 0</span><br><span class="line">in_gen_random_list_loop:</span><br><span class="line">	movzx	eax, BYTE PTR _char_list_len</span><br><span class="line">	cmp	BYTE PTR [ebp-1], al</span><br><span class="line">	jnb	end_gen_random_list</span><br><span class="line"></span><br><span class="line">	mov	DWORD PTR [esp], 0</span><br><span class="line">	call	_time</span><br><span class="line">	mov	edx, eax</span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	add	edx, eax</span><br><span class="line">	movzx	eax, BYTE PTR _test_no</span><br><span class="line">	movzx	eax, al</span><br><span class="line">	add	eax, edx</span><br><span class="line">	mov	DWORD PTR [esp], eax</span><br><span class="line">	call	_srand</span><br><span class="line"></span><br><span class="line">	call	_rand</span><br><span class="line">	and	eax, 1</span><br><span class="line">	test	eax, eax</span><br><span class="line">	setne	al</span><br><span class="line">	test	al, al</span><br><span class="line">	je	in_gen_lower_letter</span><br><span class="line"></span><br><span class="line">	call	_rand</span><br><span class="line">	mov	ecx, eax</span><br><span class="line">	mov	edx, 0x4EC4EC4F</span><br><span class="line">	mov	eax, ecx</span><br><span class="line">	imul	edx</span><br><span class="line">	sar	edx, 3</span><br><span class="line">	mov	eax, ecx</span><br><span class="line">	sar	eax, 31  # 算数右移指令；其中，与逻辑右移shr 补 0 不同，sar 补位时，最高位保持不变</span><br><span class="line">	sub	edx, eax</span><br><span class="line">	mov	eax, edx</span><br><span class="line">	imul	eax, eax, 26  # 有符号乘法指令，eax * 26 --所得乘积放入--&gt; eax</span><br><span class="line">	sub	ecx, eax</span><br><span class="line">	mov	eax, ecx</span><br><span class="line">	mov	edx, eax</span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	add	edx, 65</span><br><span class="line">	mov	BYTE PTR _char_list[eax], dl</span><br><span class="line"></span><br><span class="line">	jmp	in_gen_upper_letter</span><br><span class="line"></span><br><span class="line">in_gen_lower_letter:</span><br><span class="line">	call	_rand</span><br><span class="line">	mov	ecx, eax</span><br><span class="line">	mov	edx, 0x4EC4EC4F</span><br><span class="line">	mov	eax, ecx</span><br><span class="line">	imul	edx</span><br><span class="line">	sar	edx, 3   # 算数右移指令；其中，与逻辑右移shr 补 0 不同，sar 补位时，最高位保持不变</span><br><span class="line">	mov	eax, ecx</span><br><span class="line">	sar	eax, 31</span><br><span class="line">	sub	edx, eax</span><br><span class="line">	mov	eax, edx</span><br><span class="line">	imul	eax, eax, 26</span><br><span class="line">	sub	ecx, eax</span><br><span class="line">	mov	eax, ecx</span><br><span class="line">	mov	edx, eax</span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	add	edx, 97</span><br><span class="line">	mov	BYTE PTR _char_list[eax], dl</span><br><span class="line"></span><br><span class="line">in_gen_upper_letter:</span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	add	eax, 1</span><br><span class="line">	mov	BYTE PTR [ebp-1], al</span><br><span class="line">	jmp	in_gen_random_list_loop</span><br><span class="line"></span><br><span class="line">end_gen_random_list:</span><br><span class="line">	movzx	eax, BYTE PTR _char_list_len</span><br><span class="line">	movzx	eax, al</span><br><span class="line">	mov	BYTE PTR _char_list[eax], 0  # 字符数组末尾置零，方便按字符串进行一次性整体打印</span><br><span class="line"></span><br><span class="line">	movzx	eax, BYTE PTR _test_no</span><br><span class="line">	movzx	eax, al</span><br><span class="line"></span><br><span class="line">	mov	DWORD PTR [esp+4], eax</span><br><span class="line">	mov	DWORD PTR [esp], OFFSET FLAT:hint_test_no</span><br><span class="line">	call	_printf</span><br><span class="line"></span><br><span class="line">	mov	DWORD PTR [esp+4], OFFSET FLAT:_char_list</span><br><span class="line">	mov	DWORD PTR [esp], OFFSET FLAT:hint_given_array</span><br><span class="line">	call	_printf</span><br><span class="line"></span><br><span class="line">	leave</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line">#Function-2# 实现交换两个指针各自指向的数据内容</span><br><span class="line">do_swap:                          #*# 问题-2：请理解已给定的do_swap汇编函数功能，写出等价的 C 语言函数代码</span><br><span class="line">                                  #          提示需注意数据类型，如长度、有无符号等</span><br><span class="line">	push	ebp</span><br><span class="line">	mov	ebp, esp</span><br><span class="line">	sub	esp, 4</span><br><span class="line"></span><br><span class="line">	mov	eax, DWORD PTR [ebp+8] </span><br><span class="line">	movzx	eax, BYTE PTR [eax]</span><br><span class="line">	mov	BYTE PTR [ebp-1], al</span><br><span class="line"></span><br><span class="line">	mov	eax, DWORD PTR [ebp+12]</span><br><span class="line">	movzx	edx, BYTE PTR [eax]</span><br><span class="line">	mov	eax, DWORD PTR [ebp+8]</span><br><span class="line">	mov	BYTE PTR [eax], dl</span><br><span class="line"></span><br><span class="line">	mov	eax, DWORD PTR [ebp+12]</span><br><span class="line">	movzx	edx, BYTE PTR [ebp-1]</span><br><span class="line">	mov	BYTE PTR [eax], dl</span><br><span class="line"></span><br><span class="line">	leave</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line">#Function-3# 对排序结果得正确性进行检查</span><br><span class="line">check_sort:</span><br><span class="line">	push	ebp</span><br><span class="line">	mov	ebp, esp</span><br><span class="line">	sub	esp, 12</span><br><span class="line"></span><br><span class="line">	mov	DWORD PTR [esp+4], OFFSET FLAT:_char_list</span><br><span class="line">	mov	DWORD PTR [esp], OFFSET FLAT:hint_sorted_array</span><br><span class="line">	call	_printf</span><br><span class="line"></span><br><span class="line">	mov	BYTE PTR [ebp-1], 0</span><br><span class="line"></span><br><span class="line">in_check_loop:</span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	movzx	edx, BYTE PTR _char_list_len</span><br><span class="line">	movzx	edx, dl</span><br><span class="line">	sub	edx, 1</span><br><span class="line">	cmp	eax, edx</span><br><span class="line">	jge	end_check_sort</span><br><span class="line"></span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	movzx	edx, BYTE PTR _char_list[eax]</span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	add	eax, 1</span><br><span class="line">	movzx	eax, BYTE PTR _char_list[eax]</span><br><span class="line">	cmp	dl, al</span><br><span class="line">	jbe	in_error_check</span><br><span class="line"></span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	movzx	eax, BYTE PTR _char_list[eax]</span><br><span class="line">	cmp	al, 96</span><br><span class="line">	jbe	in_error_marked</span><br><span class="line"></span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	add	eax, 1</span><br><span class="line">	movzx	eax, BYTE PTR _char_list[eax]</span><br><span class="line">	cmp	al, 90</span><br><span class="line">	jbe	continue_in_check_loop</span><br><span class="line"></span><br><span class="line">in_error_marked:</span><br><span class="line">	mov	BYTE PTR _check_flag, 0</span><br><span class="line">	jmp	end_check_sort</span><br><span class="line"></span><br><span class="line">in_error_check:</span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	movzx	eax, BYTE PTR _char_list[eax]</span><br><span class="line">	cmp	al, 90</span><br><span class="line">	ja	continue_in_check_loop</span><br><span class="line"></span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	add	eax, 1</span><br><span class="line">	movzx	eax, BYTE PTR _char_list[eax]</span><br><span class="line">	cmp	al, 96</span><br><span class="line">	jbe	continue_in_check_loop</span><br><span class="line"></span><br><span class="line">	mov	BYTE PTR _check_flag, 0</span><br><span class="line">	jmp	end_check_sort</span><br><span class="line"></span><br><span class="line">continue_in_check_loop:</span><br><span class="line">	movzx	eax, BYTE PTR [ebp-1]</span><br><span class="line">	add	eax, 1</span><br><span class="line">	mov	BYTE PTR [ebp-1], al</span><br><span class="line">	jmp	in_check_loop</span><br><span class="line"></span><br><span class="line">end_check_sort:</span><br><span class="line">	leave</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line">#Function-4# 冒泡排序函数</span><br><span class="line">do_bubble_sort:</span><br><span class="line">    push    ebp</span><br><span class="line">    mov     ebp, esp</span><br><span class="line">    sub     esp, 16</span><br><span class="line"></span><br><span class="line">    ### ------------------------------冒泡排序正文----------------------------开始</span><br><span class="line">    #选择从后往前冒泡</span><br><span class="line">    #使用局部变量区存储计数器，可以避免在调用do_swap的过程中计数器的值被子函数修改</span><br><span class="line">    mov     BYTE PTR [ebp-8], 0  #外层循环计数器,将其存在局部变量区</span><br><span class="line">    movzx   ebx, BYTE PTR _char_list_len #数组长度存入ebx寄存器</span><br><span class="line">outer_loop:</span><br><span class="line">    mov     BYTE PTR [ebp-9], 0 #标志位，记录是否发生了交换</span><br><span class="line">    mov     cl, BYTE PTR [ebp-8]#将外层循环计数器的值调入寄存器中,准备进行比较</span><br><span class="line">    movzx   ecx, cl</span><br><span class="line">    cmp     ecx, ebx #比较最后一个元素下标和循环计数器的值</span><br><span class="line">    jae     end_bubble_sort #如果循环次数已经和数组下标-1相等（即已经排序到最后一个元素）则排序结束</span><br><span class="line"></span><br><span class="line">    mov     BYTE PTR [ebp-4], bl #内层循环计数器</span><br><span class="line">    dec     BYTE PTR [ebp-4] #内层循环计数器，初始值是数组长度-1，表示数组最后一个元素的下标,并且每一轮都-1</span><br><span class="line">    </span><br><span class="line">inner_loop: #内层循环，进行一次的冒泡（交换）</span><br><span class="line">    movzx   esi, BYTE PTR [ebp-4]#将两个计数器装入通用寄存器</span><br><span class="line">    movzx   edi, BYTE PTR [ebp-8]</span><br><span class="line">    cmp     esi, edi #比较循环计数器与最后一个元素的下标值</span><br><span class="line">    jbe     end_inner_loop #如果相等则表示一轮冒泡结束，跳转到退出内层循环</span><br><span class="line">    </span><br><span class="line">    mov     eax, esi #将内层循环计数器的值放入通用寄存器</span><br><span class="line">    mov     edx, eax #将右指针存入edx，即将后面的字符存入edx，此时edx的值是数组的最后一个未排序元素的下标</span><br><span class="line">    dec     eax      #此时eax存的是前一个字符的下标</span><br><span class="line">    mov     edi, eax #edi此时的索引值就是左指针（前一个字符）     </span><br><span class="line"></span><br><span class="line">    movzx   eax, BYTE PTR _char_list[edi] #将前一个字符装入eax</span><br><span class="line">    movzx   edx, BYTE PTR _char_list[esi] #将后一个字符装入edx</span><br><span class="line">    </span><br><span class="line">    #一个更优的写法，先将字符存入局部变量区，需要时再移入寄存器，这样可以防止因寄存器被修改导致字符丢失，不过此处由于是连续使用字符所以也无需这样做</span><br><span class="line">    #mov    DWORD PTR [ebp-10], eax #存储左指针地址</span><br><span class="line">    #mov    DWORD PTR [ebp-12], edx #存储右指针地址</span><br><span class="line">    </span><br><span class="line">    #进行大小写检查，由于大写字母ASCII码从65开始，因此可以在比较的时候将小写字母-58将其接到大写字母前面使得其一定比大写字母小</span><br><span class="line">    cmp     eax, 97 #小写字母ASCII起始值为97</span><br><span class="line">    jae     transfer_a #如果是小写字母就让它-58</span><br><span class="line">    cmp     edx, 97 #接着检查下一个字符是否为小写字符</span><br><span class="line">    jae     transfer_b</span><br><span class="line">    jmp     compare  </span><br><span class="line"></span><br><span class="line">transfer_a: #要按顺序跳转才行</span><br><span class="line">    sub     eax, 58</span><br><span class="line">    cmp     edx, 97 #检查下一个字符是否为小写字符</span><br><span class="line">    jae     transfer_b</span><br><span class="line">    jmp     compare</span><br><span class="line">    </span><br><span class="line">transfer_b:</span><br><span class="line">    sub     edx, 58 #如果是小写字母就让它-58</span><br><span class="line">    </span><br><span class="line">compare:</span><br><span class="line">    cmp     edx, eax #比较前后两个元素的值（ASCII码）</span><br><span class="line">    jae     not_swap #如果前面的元素小于后面的元素值则不交换</span><br><span class="line">    </span><br><span class="line">    lea     eax, BYTE PTR _char_list[edi]  # 计算左指针地址，存入eax寄存器，准备压入函数栈</span><br><span class="line">    push    eax</span><br><span class="line">    inc     edi #edi+1索引到右指针</span><br><span class="line">    lea     eax, BYTE PTR _char_list[edi]  # 计算右指针地址，存入eax寄存器，准备压入函数栈</span><br><span class="line">    push    eax</span><br><span class="line">    </span><br><span class="line">    call    do_swap #调用do_swap，交换前后两个元素</span><br><span class="line">    add     esp, 8 #往函数栈中压入了两个字符，esp栈寄存器+8，由于每次调用函数都会重新设置栈寄存器，所以在调用do_bubble_sort时会自动将esp还原</span><br><span class="line">    mov     BYTE PTR [ebp-9], 1 #标志位设置为1，记录内层发生了交换</span><br><span class="line"></span><br><span class="line">not_swap:</span><br><span class="line">    dec     BYTE PTR [ebp-4] #内层循环计数器-1</span><br><span class="line">    jmp     inner_loop #回到内层循环，进行下一轮的比较</span><br><span class="line"></span><br><span class="line">end_inner_loop:</span><br><span class="line">    cmp     BYTE PTR [ebp-9], 1 #测试标志位，检查是否发生了交换</span><br><span class="line">    jne     end_bubble_sort #如果发生了交换就跳入外层循环，否则说明数组已经有序，直接结束排序</span><br><span class="line">    inc     BYTE PTR [ebp-8] #外层循环计数器+1，表示已经进行完一轮冒泡</span><br><span class="line">    jmp     outer_loop #进行下一轮冒泡</span><br><span class="line"></span><br><span class="line">    ### ------------------------------冒泡排序正文----------------------------结束</span><br><span class="line"></span><br><span class="line">end_bubble_sort:</span><br><span class="line">    leave</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Function-5# 主函数 main</span><br><span class="line">_main:</span><br><span class="line">    mov %ebp, %esp #for correct debugging</span><br><span class="line">	push	ebp</span><br><span class="line">	mov	ebp, esp</span><br><span class="line">	sub	esp, 8</span><br><span class="line"></span><br><span class="line">test_loop:</span><br><span class="line">	movzx	eax, BYTE PTR _test_no</span><br><span class="line">	cmp	al, 100       # 对排序函数进行测试的总次数；提示：调试时可以将这里改小一点，如改为 2</span><br><span class="line">	ja end_test_loop  # 通过判断两个无符号数之间的大小关系，如果 CF &amp; ZF = 0，说明大于，则转移</span><br><span class="line"></span><br><span class="line">	call	gen_random_list</span><br><span class="line">	call	do_bubble_sort</span><br><span class="line">	call	check_sort</span><br><span class="line"></span><br><span class="line">	movzx	eax, BYTE PTR _check_flag                                 </span><br><span class="line">	test	al, al</span><br><span class="line">	jne	continue_test</span><br><span class="line"></span><br><span class="line">	movzx	eax, BYTE PTR _test_no</span><br><span class="line">	movzx	eax, al</span><br><span class="line">	mov	DWORD PTR [esp+4], eax</span><br><span class="line">	mov	DWORD PTR [esp], OFFSET FLAT:hint_test_error_bar</span><br><span class="line">	call	_printf</span><br><span class="line">	mov	DWORD PTR [esp], OFFSET FLAT:hint_test_error</span><br><span class="line">	call	_puts</span><br><span class="line">	jmp	end_test_loop</span><br><span class="line"></span><br><span class="line">continue_test:</span><br><span class="line">	movzx	eax, BYTE PTR _test_no</span><br><span class="line">	add	eax, 1</span><br><span class="line">	mov	BYTE PTR _test_no, al</span><br><span class="line">	jmp	test_loop</span><br><span class="line"></span><br><span class="line">end_test_loop:</span><br><span class="line">	movzx	eax, BYTE PTR _check_flag</span><br><span class="line">	test	al, al</span><br><span class="line">	je	_end_main</span><br><span class="line"></span><br><span class="line">	mov	DWORD PTR [esp], OFFSET FLAT:hint_test_success_bar</span><br><span class="line">	call	_printf</span><br><span class="line"></span><br><span class="line">	mov	DWORD PTR [esp], OFFSET FLAT:hint_test_success</span><br><span class="line">	call	_puts</span><br><span class="line"></span><br><span class="line">_end_main:                                    </span><br><span class="line">	mov	eax, 0</span><br><span class="line"></span><br><span class="line">	leave</span><br><span class="line">	ret</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>汇编逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>用了好久博客了突然碰到一个坑</title>
    <url>/2023/07/12/%E7%94%A8%E4%BA%86%E5%A5%BD%E4%B9%85%E5%8D%9A%E5%AE%A2%E4%BA%86%E7%AA%81%E7%84%B6%E7%A2%B0%E5%88%B0%E4%B8%80%E4%B8%AA%E5%9D%91/</url>
    <content><![CDATA[<p>今晚在部署博客的时突然出现了这样的错误：</p>
<img lazyload src="/images/loading.svg" data-src="/2023/07/12/%E7%94%A8%E4%BA%86%E5%A5%BD%E4%B9%85%E5%8D%9A%E5%AE%A2%E4%BA%86%E7%AA%81%E7%84%B6%E7%A2%B0%E5%88%B0%E4%B8%80%E4%B8%AA%E5%9D%91/image-20230909102159001.png" class title="image-20230909102159001">

<p>网上说的解决方法都是删除.deploy_git文件夹的方法：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">进入站点根目录</span><br><span class="line">cd E:/hexo</span><br><span class="line"> </span><br><span class="line">删除git提交内容文件夹</span><br><span class="line">rm -rf .deploy_git/</span><br><span class="line"> </span><br><span class="line">执行</span><br><span class="line">git config --global core.autocrlf false</span><br><span class="line"> </span><br><span class="line">最后</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></div>

<p>但是我尝试多次仍然无效，甚至重新设置了Git的SSHkey啥的，麻烦死了</p>
<p>最后看到了一个博客，就一行，说了一句是进程阻塞的问题:</p>
<p><a class="link" href="https://www.cnblogs.com/chendeqiang/p/12861744.html">https://www.cnblogs.com/chendeqiang/p/12861744.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>然后我重启电脑，问题解决了….</p>
<p>大无语……😅</p>
<p>2023.9.13</p>
<p>又遇到了这个问题，一周后的今天解决了</p>
<p>这次重启没用了，不是线程占用的问题</p>
<p>重新设置SSH Key好像也不行</p>
<p>然后找到一个教程要我删代理：<a class="link" href="https://www.cnblogs.com/Duan2baka/p/17271142.html">https://www.cnblogs.com/Duan2baka/p/17271142.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>然后就…行了？！而且网站同步速度快了很多！</p>
<p>神奇！</p>
]]></content>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>深夜杂记1</title>
    <url>/2023/07/14/%E6%B7%B1%E5%A4%9C%E6%9D%82%E8%AE%B01/</url>
    <content><![CDATA[<p>最近教务排名更新了，看看自己的成绩单，还算比较满意吧，毕竟跟自己之前比已经进步很大了，咱也不跟别人比</p>
<img lazyload src="/images/loading.svg" data-src="/2023/07/14/%E6%B7%B1%E5%A4%9C%E6%9D%82%E8%AE%B01/image-20230714002943563.png" class title="image-20230714002943563">

<p>现在是20.54%，保研估计是稳了，或许大三可以稍微摆一点？但是一看大三，课好多…还是希望能尽量做的好一点吧，毕竟多拿2000块奖学金也是挺爽的😂</p>
<p>（挺搞笑的，自己的成绩还真是等差数列式变化，大一结束的时候是30%，大二上结束是25%，现在是20%</p>
<p>虽然上个学期很累，糟心事也不少，但是其实也有不少收获，而且从最后成绩来看结果也是不错的</p>
<p>不过我作为一名大心脏选手，上学期的一些事情其实看起来也不算太糟，感觉其实也…没关系</p>
<p>虽然上学期没有深交的新朋友，但是还是新认识了不少有趣的同学的，而且感觉和身边的同学关系也更好了一些，和老朋友的联系也更多了，这样看来其实也很不错呢😊</p>
<p>心理老师给我下的任务还没完成（doge，希望我大三可以完成，哈哈哈哈</p>
<p>不过上学期让我认识到<strong>做自己</strong>才是最重要的，要成为自己的光，带领自己前进，保持独立思考，不要太过在意他人的想法。同时要永远保持爱的动力，It’s LOVE that makes every day fascinating.</p>
<p>这学期点播最多的歌是 <strong>轨迹</strong>（鬼姬）(现在是左下角播放器的第一首)，希望自己下学期可以不要点这首歌哈哈哈</p>
<p>希望我的大三可以收获更多的惊喜~</p>
<p>timeline 2023,green</p>
<!-- timeline 02-16 -->
<p>去学校</p>
<!-- timeline 02-26 -->

<p>成功搭建博客</p>
<!-- timeline 04-29 -->

<p>去天津</p>
<!-- timeline 02-16 -->

<p>第一个北京市级奖项</p>
<!-- timeline 06-21 -->

<p>期末周结束</p>
<!-- timeline 07-01 -->

<p>学期结束！回家！</p>
<!-- endtimeline -->
<p> endtimeline </p>
]]></content>
      <categories>
        <category>Writing</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>算法与程序设计</title>
    <url>/2023/09/23/%E7%AE%97%E6%B3%95%E4%B8%8E%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="递归与分治"><a href="#递归与分治" class="headerlink" title="递归与分治"></a>递归与分治</h1><h2 id="二分查找算法"><a href="#二分查找算法" class="headerlink" title="二分查找算法"></a>二分查找算法</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">template&lt;class Type&gt; </span><br><span class="line"><span class="type">int</span> <span class="title function_">BinarySearch</span><span class="params">(Type a[], <span class="type">const</span> Type&amp; x, <span class="type">int</span> l, <span class="type">int</span> r)</span>{</span><br><span class="line">	<span class="keyword">while</span> (r &gt;= l){ </span><br><span class="line">		<span class="type">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> (x == a[m]) <span class="keyword">return</span> m;</span><br><span class="line">		<span class="keyword">if</span> (x &lt; a[m]) r = m<span class="number">-1</span>; <span class="keyword">else</span> l = m+<span class="number">1</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>算法复杂度分析： 每执行一次算法的while循环， 待搜索数组的大小减少一半。因此， 在最坏情况下，while循环被执行了 O(logn) 次。循环体内运算需要O(1) 时间，因此整个算法在最坏情况下的计算时间复杂性为<strong>O(logn)</strong>  。</p>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>伪代码</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MergeSort</span><span class="params">(Type a[], <span class="type">int</span> left, <span class="type">int</span> right)</span>{</span><br><span class="line">    <span class="keyword">if</span>(left &lt; right){ <span class="comment">//至少两个元素</span></span><br><span class="line">    	<span class="type">int</span> i = (left + right) / <span class="number">2</span>; <span class="comment">//取中点</span></span><br><span class="line">    	MergeSort(a, left, i);</span><br><span class="line">    	MergeSort(a, b, left, i, right); <span class="comment">//合并到数组b</span></span><br><span class="line">    	copy(a, b, left, right); <span class="comment">//复制回数组a</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Merge</span> <span class="params">(Type a[], Type d[], <span class="type">int</span> l, <span class="type">int</span> m, <span class="type">int</span> r)</span>{</span><br><span class="line">	<span class="type">int</span> i=<span class="number">1</span>， j=m+<span class="number">1</span>, k=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (( i &lt;= m ) &amp;&amp; ( j &lt;= r)) {</span><br><span class="line">		<span class="keyword">if</span> ( c[i] &lt;= c[j] ) d[k++] = c[i++];</span><br><span class="line">		<span class="keyword">else</span> d[k++] = c[j++];</span><br><span class="line">		<span class="keyword">if</span> ( i &gt; m) {</span><br><span class="line">			<span class="keyword">for</span> ( <span class="type">int</span> q = j; q &lt;= r; q++ ) d[k++] = c[q];</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			<span class="keyword">for</span> ( <span class="type">int</span> q = i; q &lt;= m; q++)</span><br><span class="line">				d[k++] = c[q]</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="46.55ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 20575.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mrow" transform="translate(3415.6,0)"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"/></g><g data-mml-node="mtable" transform="translate(500,0)"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2041,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g><g data-mml-node="mtd" transform="translate(3319,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="2A7D" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM94 170Q102 172 104 172Q110 171 254 103T535 -30T678 -98Q694 -106 694 -118Q694 -136 676 -138H670L382 -2Q92 135 90 137Q83 142 83 154Q84 164 94 170Z"/></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mtext" transform="translate(2433.6,0)"><path data-c="A0" d=""/></g><g data-mml-node="mn" transform="translate(2683.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(3183.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(3887.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4276.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4876.6,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mn" transform="translate(5376.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(5876.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(6487.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(7488,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(8251,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(8640,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(9240,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(9629,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g><g data-mml-node="mtd" transform="translate(14226,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g><g data-mml-node="mo" transform="translate(17159.6,0) translate(0 250)"/></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="16.78ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 7416.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(3415.6,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(4178.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4567.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(5167.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(5465.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(5950.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(6427.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(7027.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>渐进意义下的最优算法</p>
<p>最坏时间复杂度：O(nlogn) </p>
<p>平均时间复杂度：O(nlogn) </p>
<p>辅助空间：O(n)</p>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">template&lt;class Type&gt;</span><br><span class="line"><span class="type">void</span> <span class="title function_">QuickSort</span> <span class="params">(Type a[], <span class="type">int</span> p, <span class="type">int</span> r)</span>{</span><br><span class="line">	<span class="keyword">if</span> (p&lt;r) {</span><br><span class="line">        <span class="type">int</span> q=Partition(a,p,r);</span><br><span class="line">        QuickSort (a,p,q<span class="number">-1</span>); <span class="comment">//对左半段排序</span></span><br><span class="line">        QuickSort (a,q+<span class="number">1</span>,r); <span class="comment">//对右半段排序</span></span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>最坏情况：发生在划分过程产生的两个区域分别包含 n-1个元素和1个元素的时候。<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="47.053ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 20797.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mrow" transform="translate(3415.6,0)"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"/></g><g data-mml-node="mtable" transform="translate(500,0)"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2041,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g><g data-mml-node="mtd" transform="translate(3319,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="2A7D" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM94 170Q102 172 104 172Q110 171 254 103T535 -30T678 -98Q694 -106 694 -118Q694 -136 676 -138H670L382 -2Q92 135 90 137Q83 142 83 154Q84 164 94 170Z"/></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mtext" transform="translate(2433.6,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(2683.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(3387.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3776.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(4598.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(5599,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(6099,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(6710.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(7710.4,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(8473.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(8862.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(9462.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(9851.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g><g data-mml-node="mtd" transform="translate(14448.4,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g><g data-mml-node="mo" transform="translate(17382,0) translate(0 250)"/></g></g></g></svg></mjx-container><br>最坏时间复杂度：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p>
<p>最好情况：每次划分所取的基准都恰好为中值。<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="46.55ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 20575.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mrow" transform="translate(3415.6,0)"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"/></g><g data-mml-node="mtable" transform="translate(500,0)"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2041,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g><g data-mml-node="mtd" transform="translate(3319,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="2A7D" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM94 170Q102 172 104 172Q110 171 254 103T535 -30T678 -98Q694 -106 694 -118Q694 -136 676 -138H670L382 -2Q92 135 90 137Q83 142 83 154Q84 164 94 170Z"/></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mtext" transform="translate(2433.6,0)"><path data-c="A0" d=""/></g><g data-mml-node="mn" transform="translate(2683.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(3183.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(3887.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4276.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4876.6,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mn" transform="translate(5376.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(5876.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(6487.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(7488,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(8251,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(8640,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(9240,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(9629,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g><g data-mml-node="mtd" transform="translate(14226,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g><g data-mml-node="mo" transform="translate(17159.6,0) translate(0 250)"/></g></g></g></svg></mjx-container><br>最好时间复杂度：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.695ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3401 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(1450,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(1935,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(2412,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3012,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p>
<p>最坏时间复杂度：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p>
<p>平均时间复杂度：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.052ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4001 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1752,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(2050,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2535,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(3012,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3612,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p>
<p>辅助空间：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.801ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 6542 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mi" transform="translate(2141,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">或</text></g><g data-mml-node="mi" transform="translate(3141,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(3904,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4293,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(4591,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(5076,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(5553,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(6153,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p>
<h2 id="线性时间选择"><a href="#线性时间选择" class="headerlink" title="线性时间选择"></a>线性时间选择</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">Type <span class="title function_">Select</span><span class="params">(Type a[], <span class="type">int</span> p, <span class="type">int</span> r, <span class="type">int</span> k)</span> {</span><br><span class="line">    <span class="keyword">if</span> (r - p &lt; <span class="number">75</span>) {</span><br><span class="line">        用某个简单排序算法对数组a[p:r]排序;</span><br><span class="line">        <span class="keyword">return</span> a[p + k - <span class="number">1</span>];</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= (r - p - <span class="number">4</span>) / <span class="number">5</span>; i++)</span><br><span class="line">        将a[p + <span class="number">5</span> * i]至a[p + <span class="number">5</span> * i + <span class="number">4</span>]的第<span class="number">3</span>小元素与a[p + i]交换位置;</span><br><span class="line">    <span class="comment">//找中位数的中位数，r-p-4即上面所说的n-5</span></span><br><span class="line">    Type x = Select(a, p, p + (r - p - <span class="number">4</span>) / <span class="number">5</span>, (r - p - <span class="number">4</span>) / <span class="number">10</span>);</span><br><span class="line">    <span class="type">int</span> i = Partition(a, p, r, x),</span><br><span class="line">            j = i - p + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= j) <span class="keyword">return</span> Select(a, p, i, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Select(a, i + <span class="number">1</span>, r, k - j);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>上述算法将每一组的大小定为 5，并选取75作为是否作递归 调用的分界点。这 2点保证了T(n)的递归式中 2个自变量之和 n/5+3n/4=19n/20=εn，0&lt;ε&lt;1。这是使T(n)=O(n)的关键之 处。当然，除了 5 和75之外，还有其他选择。</p>
<h3 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="54.903ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 24267.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mrow" transform="translate(3415.6,0)"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"/></g><g data-mml-node="mtable" transform="translate(500,0)"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mn" transform="translate(748,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1151.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g><g data-mml-node="mtd" transform="translate(2429.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(600,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">＜</text></g><g data-mml-node="mn" transform="translate(1600,0)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"/></g><g data-mml-node="mtext" transform="translate(2600,0)"><path data-c="A0" d=""/></g><g data-mml-node="msub" transform="translate(2850,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mn" transform="translate(748,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mi" transform="translate(4001.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(4823.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(5824,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(6528,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(6917,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7517,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mn" transform="translate(8017,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/></g><g data-mml-node="mo" transform="translate(8517,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(9128.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(10128.4,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(10832.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(11221.4,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g><g data-mml-node="mi" transform="translate(11721.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(12321.4,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mn" transform="translate(12821.4,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/></g><g data-mml-node="mo" transform="translate(13321.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(13710.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g><g data-mml-node="mtd" transform="translate(17418,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"/></g></g></g></g><g data-mml-node="mo" transform="translate(20851.6,0) translate(0 250)"/></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.571ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 5556.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(3415.6,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(4178.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4567.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(5167.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p>
<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="动态规划算法的基本要素"><a href="#动态规划算法的基本要素" class="headerlink" title="动态规划算法的基本要素"></a>动态规划算法的基本要素</h2><h3 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h3><p>大问题的最优解包含着其子问题的最优解。这种性质称为最优子结构性质。也就是说子问题的最优解构成了大问题的最优解。</p>
<p>在分析问题的最优子结构性质时，所用的方法具有普遍性：首先假设由问题的最优解导出的子问题的解不是最优的，然后再设法说明在这个假设下可构造出比原问题最优解更好的解，从而导致矛盾。</p>
<p>利用问题的最优子结构性质，以自底向上的方式递归地从子问题的最优解逐步构造出整个问题的最优解。最优子结构是问题能用动态规划算法求解的前提。</p>
<p>同一个问题可以有多种方式刻划 它的最优子结构，有些表示方 法的求解速度更快（空间占用小，问题的维度低）</p>
<h3 id="重叠子问题"><a href="#重叠子问题" class="headerlink" title="重叠子问题"></a>重叠子问题</h3><p>递归算法求解问题时，每次产生的子问题并不总是新问题，有些子问题被反复计算多次。这种性质称为<strong>子问题的重叠性质</strong>。</p>
<p>动态规划算法，对每一个子问题只解一次，而后将其解保存在 一个表格中，当再次需要解此子问题时，只是简单地用常数时 间查看一下结果</p>
<p>通常不同的子问题个数随问题的大小呈多项式增长。因此用动态规划算法只需要多项式时间，从而获得较高的解题效率。</p>
<h3 id="备忘录方法"><a href="#备忘录方法" class="headerlink" title="备忘录方法"></a>备忘录方法</h3><p>备忘录方法的控制结构与直接递归方法的控制结构相同，区别 在于备忘录方法为每个解过的子问题建立了备忘录以备需要时 查看，避免了相同子问题的重复求解。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LookupChain</span><span class="params">(<span class="type">int</span> i，<span class="type">int</span> j)</span>{</span><br><span class="line">	<span class="keyword">if</span> (m[i][j] &gt; <span class="number">0</span>) <span class="keyword">return</span> m[i][j];</span><br><span class="line">	<span class="keyword">if</span> (i == j) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> u = LookupChain(i，i) + LookupChain(i+<span class="number">1</span>，j) + p[i<span class="number">-1</span>]*p[i]*p[j];</span><br><span class="line">	s[i][j] = i;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = i+<span class="number">1</span>; k &lt; j; k++) {</span><br><span class="line">		<span class="type">int</span> t = LookupChain(i，k) + LookupChain(k+<span class="number">1</span>，j) + p[i<span class="number">-1</span>]*p[k]*p[j];</span><br><span class="line">		<span class="keyword">if</span> (t &lt; u) { u = t; s[i][j] = k;}</span><br><span class="line">	}</span><br><span class="line">	m[i][j] = u;</span><br><span class="line">	<span class="keyword">return</span> u;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="动态规划基本步骤"><a href="#动态规划基本步骤" class="headerlink" title="动态规划基本步骤"></a>动态规划基本步骤</h2><p>1 找出最优解的性质，并刻划其结构特征（最优子结构性质）。<br>2 递归地定义最优值。<br>3 以自底向上的方式计算出最优值。<br>4 根据计算最优值时得到的信息，构造最优解。</p>
<h2 id="⭐矩阵连乘问题"><a href="#⭐矩阵连乘问题" class="headerlink" title="⭐矩阵连乘问题"></a>⭐矩阵连乘问题</h2><p>将矩阵连乘积$\begin{align}\mathcal{A}<em>{i}\mathcal{A}</em>{i+1}…\mathcal{A}_{j}\end{align}$ 简记为A[i:j] ，这里i≤j</p>
<p>考察计算A[i:j]的最优计算次序。设这个计算次序在矩阵 Ak和Ak+1之间将矩阵链断开，i≤k&lt;j，则其完全加括号方式为：$\begin{align}\Bigl(\mathcal{A}<em>{i}\mathcal{A}</em>{i+1}….\mathcal{A}<em>{k}\Bigr)\Bigl(\mathcal{A}</em>{k+1}\mathcal{A}<em>{k+2}…\mathcal{A}</em>{j}\Bigr)\end{align}$</p>
<p>计算量：A[i:k]的计算量加上A[k+1:j]的计算量，再加上 A[i:k]和A[k+1:j]相乘的计算量</p>
<h3 id="分析最优解结构"><a href="#分析最优解结构" class="headerlink" title="分析最优解结构"></a>分析最优解结构</h3><ul>
<li><p>特征：计算A[i:j]的最优次序所包含的计算矩阵子 链 A[i:k]和A[k+1:j]的次序也是最优的。 </p>
</li>
<li><p>矩阵连乘计算次序问题的最优解包含着其子问题 的最优解。这种性质称为最优子结构性质。问题 的最优子结构性质是该问题可用动态规划算法求 解的显著特征。</p>
</li>
</ul>
<h3 id="建立递归关系"><a href="#建立递归关系" class="headerlink" title="建立递归关系"></a>建立递归关系</h3><p>设计算A[i:j]，1≤i≤j≤n，所需要的最少数乘次数m[i,j]，则原问题的最优值为m[1,n]  </p>
<p>当i=j时，A[i:j]=Ai，因此，m[i,i]=0，i=1,2,…,n </p>
<p>当i&lt;j时，$\begin{align}m[i,j]=m[i,k]+m[k+1,j]+{\cal P}<em>{i-1}{\ P}</em>{k}{\cal P}<em>{j}\end{align}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="6.787ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 3000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">这</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">里</text></g></g></g></svg></mjx-container>A_i<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="9.05ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 4000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">维</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">为</text></g></g></g></svg></mjx-container>\begin{align}P</em>{i-1}\times P_{i}\end{align}$</p>
<p>可以递归地定义m[i:j]为：<br>$$</p>
<p>$$<br>k 的位置只有j-i种可能</p>
<h3 id="计算最优值"><a href="#计算最优值" class="headerlink" title="计算最优值"></a>计算最优值</h3><ul>
<li>对于1≤i≤j≤n不同的有序对(i,j)对应于不同的子问题。因此，不同子问题的个数最多只有</li>
</ul>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.148ex;" xmlns="http://www.w3.org/2000/svg" width="17.694ex" height="5.428ex" role="img" focusable="false" viewbox="0 -1449.5 7820.6 2399"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mrow"><g data-mml-node="TeXAtom" data-mjx-texclass="OPEN"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"/></g></g><g data-mml-node="mfrac" transform="translate(736,0)"><g data-mml-node="mi" transform="translate(0,676)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(50,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="CLOSE" transform="translate(1336,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"/></g></g></g></g><g data-mml-node="mo" transform="translate(2294.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(3294.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(4172.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(5228,0)"><path data-c="398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"/></g><g data-mml-node="mo" transform="translate(6006,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(6395,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" transform="translate(633,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g><g data-mml-node="mo" transform="translate(7431.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></g></g></g></svg></mjx-container></p>
<ul>
<li>由此可见，在递归计算时，许多子问题被重复计算多次。这也是该问题可用动态规划算法求解的又一显著特征。</li>
<li>用动态规划算法解此问题，可依据其递归式以自底向上的方式 进行计算。在计算过程中，保存已解决的子问题答案。每个子问题只计算一次，而在后面需要时只要简单查一下，从而避免大量的重复计算，最终得到多项式时间的算法</li>
</ul>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MatrixChain</span><span class="params">(<span class="type">int</span> *p, <span class="type">int</span> n, <span class="type">int</span> **m, <span class="type">int</span> **s)</span> {</span><br><span class="line">    <span class="comment">//p[]存放矩阵的行和列Ai的行是p[i-1]列是p[i]，n表示n维矩阵,m[i][j]记录数乘次数,s[i][j]用于辅助构造最优解</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) m[i][i] = <span class="number">0</span>; <span class="comment">//一个矩阵数乘次数都是0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">2</span>; r &lt;= n; r++) <span class="comment">//从2个2个乘逐渐增大子问题规模，自底向上</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - r + <span class="number">1</span>; i++) { <span class="comment">//n-r+1是子问题个数</span></span><br><span class="line">            <span class="type">int</span> j = i + r - <span class="number">1</span>; <span class="comment">//子问题的结束矩阵编号</span></span><br><span class="line">            m[i][j] = m[i + <span class="number">1</span>][j] + p[i - <span class="number">1</span>] * p[i] * p[j]; <span class="comment">//数乘运算次数</span></span><br><span class="line">            s[i][j] = i; <span class="comment">//记录在哪里断开的，表示Ai连乘到Aj的问题在i处断开了</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i + <span class="number">1</span>; k &lt; j; k++) { <span class="comment">//计算不同断开方式下的数乘次数</span></span><br><span class="line">                <span class="type">int</span> t = m[i][k] + m[k + <span class="number">1</span>][j] + p[i - <span class="number">1</span>] * p[k] * p[j];</span><br><span class="line">                <span class="keyword">if</span> (t &lt; m[i][j]) { <span class="comment">//如果发现更小的就替换记录信息</span></span><br><span class="line">                    m[i][j] = t;</span><br><span class="line">                    s[i][j] = k;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="复杂度分析-4"><a href="#复杂度分析-4" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>MatrixChain的主要计算量取决于算法中对r,i和k的3重循环。循环体内的计算量为O(1)，而3重循环的总次数为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.451ex" role="img" focusable="false" viewbox="0 -833.2 2577.6 1083.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>。因此算法的计算时间上界为**<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.451ex" role="img" focusable="false" viewbox="0 -833.2 2577.6 1083.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>**。算法所占用的空间显然为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>。</p>
<h3 id="构造最优解"><a href="#构造最优解" class="headerlink" title="构造最优解"></a>构造最优解</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Traceback</span> <span class="params">( <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> **s )</span> <span class="comment">//s是记录断开位置的矩阵</span></span><br><span class="line">{</span><br><span class="line">	<span class="keyword">if</span> ( i == j ) <span class="keyword">return</span>; <span class="comment">//1个矩阵无需断开</span></span><br><span class="line">	Traceback ( i, s[i][j], s); <span class="comment">//从i到s前面一半内部如何继续断开</span></span><br><span class="line">	Traceback ( s[i][j] + <span class="number">1</span>, j, s); <span class="comment">//从s+1到j后面一半内部如何断开</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; “Multiply A “ &lt;&lt; i &lt;&lt; “,” &lt;&lt; s[ i, j ] ; <span class="comment">//输出前面的加括号方式</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; “ and A “ &lt;&lt; ( s[ i, j ] + <span class="number">1</span> ) &lt;&lt; “, “ &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出后面的加括号方式</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="⭐最长公共子序列"><a href="#⭐最长公共子序列" class="headerlink" title="⭐最长公共子序列"></a>⭐最长公共子序列</h2><p>若给定序列X={<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="13.497ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 5965.6 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1008.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1453.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2461.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(2906.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mo" transform="translate(4245.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(4689.8,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container> }，则另一序列  Z={<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="12.199ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 5392.2 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/></g><g data-mml-node="mn" transform="translate(498,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(901.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1346.2,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/></g><g data-mml-node="mn" transform="translate(498,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2247.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(2692.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mo" transform="translate(4031.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(4475.8,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/></g><g data-mml-node="mi" transform="translate(498,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></g></svg></mjx-container>}，是 X的子序列是指存在一个严格递增 下标序列{<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="11.385ex" height="1.934ex" role="img" focusable="false" viewbox="0 -661 5032.2 855"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(378,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(781.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1226.2,0)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(378,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2007.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(2452.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mo" transform="translate(3791.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(4235.8,0)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(378,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></g></svg></mjx-container> }使得对于所有j=1,2,…,k有： <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.81ex;" xmlns="http://www.w3.org/2000/svg" width="7.549ex" height="2.129ex" role="img" focusable="false" viewbox="0 -583 3336.5 941.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/></g><g data-mml-node="mi" transform="translate(498,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g><g data-mml-node="mo" transform="translate(1117.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(2172.9,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(378,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></g></g></svg></mjx-container> 。 例如，序列Z={B，C，D，B}是序列X={A，B，C，B， D，A，B}的子序列，相应的递增下标序列为{2，3，5，7} 。 </p>
<p>给定 2个序列 X 和 Y，当另一序列 Z既是 X的子序列又是 Y的子序列时，称 Z是序列 X 和 Y 的公共子序列 。 </p>
<p>给定2个序列X={<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="13.497ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 5965.6 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1008.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1453.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2461.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(2906.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mo" transform="translate(4245.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(4689.8,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container> }和Y=Y={<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="12.496ex" height="1.464ex" role="img" focusable="false" viewbox="0 -442 5523 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(926.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1371.2,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2297.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(2742.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mo" transform="translate(4081.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(4525.8,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>}，找出X和Y的最长公共子序列</p>
<h3 id="分析最优解结构-1"><a href="#分析最优解结构-1" class="headerlink" title="分析最优解结构"></a>分析最优解结构</h3><p>设序列X={<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="13.497ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 5965.6 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1008.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1453.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2461.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(2906.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mo" transform="translate(4245.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(4689.8,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container> }和Y={<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="12.496ex" height="1.464ex" role="img" focusable="false" viewbox="0 -442 5523 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(926.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1371.2,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2297.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(2742.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mo" transform="translate(4081.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(4525.8,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>}的最长公共子序列为 Z={<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="12.199ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 5392.2 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/></g><g data-mml-node="mn" transform="translate(498,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(901.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1346.2,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/></g><g data-mml-node="mn" transform="translate(498,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2247.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(2692.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mo" transform="translate(4031.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(4475.8,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/></g><g data-mml-node="mi" transform="translate(498,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></g></svg></mjx-container>} ，则<br>(1) 若 x m=y n，则 z k=x m=y n，且 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="4.118ex" height="1.471ex" role="img" focusable="false" viewbox="0 -442 1820.1 650"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/></g><g data-mml-node="TeXAtom" transform="translate(498,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></g></svg></mjx-container> 是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="4.931ex" height="1.471ex" role="img" focusable="false" viewbox="0 -442 2179.5 650"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(878,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1656,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></g></svg></mjx-container> 和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="4.301ex" height="1.471ex" role="img" focusable="false" viewbox="0 -442 1900.9 650"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></g></svg></mjx-container>的最长公共子序列。<br>(2) 若 x m≠y n 且 z k≠x m，则 Z 是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="4.931ex" height="1.471ex" role="img" focusable="false" viewbox="0 -442 2179.5 650"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(878,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1656,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></g></svg></mjx-container> 和 Y的最长公共子序列。<br>(3) 若 x m≠y n 且 z k≠y n，则 Z 是 X 和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="4.301ex" height="1.471ex" role="img" focusable="false" viewbox="0 -442 1900.9 650"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></g></svg></mjx-container>的最长公共子序列。</p>
<p>2个序列的最长公共子序列包含了这 2个序列的前缀的最长公共子序列。因此，最长公共子序列问题具有<strong>最优子结构性质</strong> 。</p>
<h3 id="建立递归关系-1"><a href="#建立递归关系-1" class="headerlink" title="建立递归关系"></a>建立递归关系</h3><p>由最长公共子序列问题的最优子结构性质建立子问题最优值 的递归关系。用c[i][j]记录序列和的最长公共子序列的长度。 其中， <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.613ex" height="1.902ex" role="img" focusable="false" viewbox="0 -683 1155 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>={<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="12.644ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 5588.7 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1008.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1453.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2461.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(2906.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mo" transform="translate(4245.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(4689.8,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container> }；<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="2.161ex" height="2.211ex" role="img" focusable="false" viewbox="0 -683 955.3 977.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"/></g><g data-mml-node="mi" transform="translate(614,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></svg></mjx-container>={<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="12.195ex" height="1.666ex" role="img" focusable="false" viewbox="0 -442 5390.1 736.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(926.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1371.2,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2297.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(2742.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mo" transform="translate(4081.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(4525.8,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></svg></mjx-container> }。当i=0 或j=0时，空序列是 Xi 和 Yj的最长公共子序列。故此时C[i][j]=0。其它情况下， 由最优子结构性质可建立递归关系如下：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.616ex;" xmlns="http://www.w3.org/2000/svg" width="102.4ex" height="2.363ex" role="img" focusable="false" viewbox="0 -772.1 45260.7 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mo" transform="translate(760,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(1038,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1383,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(1661,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(1939,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(2351,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(2906.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mrow" transform="translate(3962.6,0)"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"/></g><g data-mml-node="mtable" transform="translate(500,0)"><g data-mml-node="mtr" transform="translate(0,22.1)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g><g data-mml-node="mtd" transform="translate(1778,0)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(622.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1678.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(2178.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(2623.2,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(3313,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(4368.8,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mtext" transform="translate(4868.8,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(5118.8,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mo" transform="translate(5551.8,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(5829.8,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(6397,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(7397.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(7897.2,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(8175.2,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(8453.2,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(9087.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(10087.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(10587.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(11087.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(12088.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(12588.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g><g data-mml-node="mtd" transform="translate(15644.1,0)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(789.7,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(1479.4,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="mn" transform="translate(2535.2,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(3035.2,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/></g><g data-mml-node="msub" transform="translate(3479.9,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(4656.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(5712.4,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g><g data-mml-node="mtext" transform="translate(6576.7,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(6826.7,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(7704.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(8233.7,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(8805.7,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mo" transform="translate(433,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(711,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1056,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(1334,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(1612,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(2246.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(3246.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(3746.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(4024.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(4469.1,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mo" transform="translate(4902.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(5180.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(5747.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(6747.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(7247.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(7525.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(7803.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(8215.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g><g data-mml-node="mo" transform="translate(17299.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g><g data-mml-node="mtd" transform="translate(34221.4,0)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(789.7,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(1479.4,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="mn" transform="translate(2535.2,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(3035.2,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"/></g><g data-mml-node="msub" transform="translate(3479.9,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(4656.6,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"/></g><g data-mml-node="msub" transform="translate(5712.4,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></g><g data-mml-node="mo" transform="translate(41298.1,0) translate(0 250)"/></g></g></g></svg></mjx-container></p>
<h3 id="计算最优值-1"><a href="#计算最优值-1" class="headerlink" title="计算最优值"></a>计算最优值</h3><p>由于在所考虑的子问题空间中，总共有θ(mn)个不同的子问题， 因此，用动态规划算法自底向上地计算最优值能提高算法的效率。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCSLength</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">char</span> *x, <span class="type">char</span> *y, <span class="type">int</span> **c, <span class="type">int</span> **b)</span> { </span><br><span class="line">    <span class="comment">//c[i][j]记录最优值，b[i][j]记录辅助信息用于构造最优解</span></span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++) c[i][<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">//其中一个序列为空</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) c[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++) <span class="comment">//X序列</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++) { <span class="comment">//Y序列</span></span><br><span class="line">            <span class="keyword">if</span> (x[i] == y[j]) {</span><br><span class="line">                c[i][j] = c[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                b[i][j] = <span class="number">1</span>; <span class="comment">//左上角</span></span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (c[i - <span class="number">1</span>][j] &gt;= c[i][j - <span class="number">1</span>]) {</span><br><span class="line">                c[i][j] = c[i - <span class="number">1</span>][j];</span><br><span class="line">                b[i][j] = <span class="number">2</span>; <span class="comment">//同一列前一行</span></span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                c[i][j] = c[i][j - <span class="number">1</span>];</span><br><span class="line">                b[i][j] = <span class="number">3</span>; <span class="comment">//同一行前一列</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">构造最长公共子序列</span><br><span class="line"><span class="type">void</span> <span class="title function_">LCS</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">char</span> *x, <span class="type">int</span> **b)</span> { <span class="comment">//只需要一个序列就可以，因为是公共子序列</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) <span class="keyword">return</span>; <span class="comment">//有一个序列为空</span></span><br><span class="line">    <span class="keyword">if</span> (b[i][j] == <span class="number">1</span>) { </span><br><span class="line">        LCS(i - <span class="number">1</span>, j - <span class="number">1</span>, x, b);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; x[i]; <span class="comment">//第i个符号就是最长子序列的最后一个符号 ，所以放在递归后面输出</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (b[i][j] == <span class="number">2</span>) LCS(i - <span class="number">1</span>, j, x, b);</span><br><span class="line">    <span class="keyword">else</span> LCS(i, j - <span class="number">1</span>, x, b);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h3><ul>
<li><p>在算法lcsLength 和lcs中，可进一步将数组 b省去。 事实上，数组元素c[i][j]的值仅由c[i-1][j-1]，c[i-1][j] 和 c[i][j-1] 这 3个数组元素的值所确定。对于给定的数组 元素c[i][j]，可以不借助于数组 b而仅借助于 c本身在时 间内确定c[i][j]的值是由c[i-1][j-1]，c[i-1][j] 和c[i][j-1] 中 哪一个值所确定的。 </p>
</li>
<li><p>如果只需要计算最长公共子序列的长度，则算法的空 间需求可大大减少。事实上，在计算c[i][j]时，只用到 数组 c的第i行和第i-1行。因此，用 2行的数组空间就可 以计算出最长公共子序列的长度。进一步的分析还可将空间需求减至O(min(m,n)) 。</p>
</li>
</ul>
<h2 id="凸多边形最优三角剖分"><a href="#凸多边形最优三角剖分" class="headerlink" title="凸多边形最优三角剖分"></a>凸多边形最优三角剖分</h2><p>类似矩阵连乘问题的</p>
<ul>
<li><p>用多边形顶点的逆时针序列表示凸多边形，即P=<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="14.506ex" height="1.473ex" role="img" focusable="false" viewbox="0 -443 6411.7 651"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mo" transform="translate(921.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1366.2,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(2287.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(2732.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mo" transform="translate(4071.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(4515.8,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="TeXAtom" transform="translate(518,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></g></g></svg></mjx-container> 表示具有 n条边的凸多边形。 </p>
</li>
<li><p>若 vi 与 vj是多边形上不相邻的 2个顶点，则线段 vi vj称为多边形的 一条弦。弦将多边形分割成 2个多边形<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.616ex;" xmlns="http://www.w3.org/2000/svg" width="13.709ex" height="2.363ex" role="img" focusable="false" viewbox="0 -772.1 6059.6 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,22.1)"><g data-mml-node="mtd"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(812,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1256.6,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="TeXAtom" transform="translate(518,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mo" transform="translate(2972.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(3416.9,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mo" transform="translate(4755.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(5200.3,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="TeXAtom" transform="translate(518,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></g></g></g></g></g></svg></mjx-container> 和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="12.811ex" height="1.668ex" role="img" focusable="false" viewbox="0 -443 5662.3 737.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g><g data-mml-node="mo" transform="translate(859.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1304,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="TeXAtom" transform="translate(518,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(1190,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mo" transform="translate(3067,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(3511.7,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="msub" transform="translate(4850.3,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></g></svg></mjx-container> 。 </p>
</li>
<li><p>多边形的三角剖分是将多边形分割成互不相交的三角形的弦的 集合 T 。 </p>
</li>
<li><p>给定凸多边形P，以及定义在由多边形的边和弦组成的三角形 上的权函数w。要求确定该凸多边形的三角剖分，使得即该三角 剖分中诸三角形上权之和为最小。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>算法课笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>记录第一次搭建个人博客</title>
    <url>/2023/02/26/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>第一次搭博客，没啥经验，也没有问别人，遇到的一切问题都自己上网查资料解决，算是锻炼了一下自己的自学能力了吧。</p>
<p>不管怎么说总算是搭好了，很有成就感。先说说遇到的一些问题，下次再搭博客的时候就可以少踩很多雷。</p>
<p>按照搭建顺序来说说自己的步骤和当中遇到的问题吧，教程连接贴在下面：</p>
<p>这是主要参考的教程：<a class="link" href="https://www.jianshu.com/p/d78adad4705f">利用Github搭建自己的个人博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>2023.4.14：看到一个更加完整的教程：<a class="link" href="https://cloud.tencent.com/developer/article/2148748">个人博客搭建 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>我真的放弃添加图片了，所以我的博客暂时用来写一些书评影评好了，笔记什么的我还是在本地查看吧o(TヘTo)</strong></p>
<p>2023.3.7 偶然调了一下，改成了相对路径！图片传上去了！！！！！但是不知道怎么调图片的大小，而且好多图片也都还没放到文件夹里，有时间再弄吧</p>
<p>教程：<a class="link" href="https://www.cnblogs.com/bzsheng/p/13802829.html">Hexo博客如何插入图片 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>2023.7.14 趁着帮助别人搭博客的契机把自己的博客功能做全了，现在是所有功能都具备的完全体博客啦！（顺便在这篇博文下面加了一首歌</p>
<h3 id="Day-1-搭建Github个人仓库"><a href="#Day-1-搭建Github个人仓库" class="headerlink" title="Day 1 搭建Github个人仓库"></a>Day 1 搭建Github个人仓库</h3><p>​	一开始这步就已经把我弄的有点难受了，建好了个人仓库BUPT-Serendy.github.io结果点进去是404。我找遍了各种教程，搜了好多问题，试了好多种方法，甚至把自己原来的GitHub号给销了重新注册了一个（虽然原来的号里啥也没有，但是浪费了我一个ID…），最后一看hsp的教程才发现，原来只是没有使用魔法，然后周六就开始找各种魔法，各处打听终于找到了一个还算不错的（一开始系统代理没打开用不了…）。之后也研究了好久的魔法，最后总算是能稳定用了。</p>
<h3 id="Day-2-开始在本地建博客"><a href="#Day-2-开始在本地建博客" class="headerlink" title="Day 2 开始在本地建博客"></a>Day 2 开始在本地建博客</h3><p>安装node.js和Git这些都没啥，问题不大，就是中间安装Git的时候cmd卡住了一下，后面重新装一次就没有问题了。</p>
<p>然后博客文件夹啥的都创建好了之后，第一次在hexo d的时候出现了一个问题，就是一直只有一行：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO Validating config</span><br></pre></td></tr></table></figure></div>

<p>这个奇怪的问题我真的找遍全网资料都没有找到跟我一样的问题，过了大概一个小时我又重新试了一次，这次用的hexo deploy，然后成功了，我就天真地以为是我没有把deploy打出来…其实就是不知道出了什么问题，这时就冒出了那个疑问：它为什么能跑？</p>
<p>不过我也没太纠结，因为后面就再也没失败过了，所以感觉就还行。</p>
<h3 id="Day-3-配置个人主题和添加图片"><a href="#Day-3-配置个人主题和添加图片" class="headerlink" title="Day 3 配置个人主题和添加图片"></a>Day 3 配置个人主题和添加图片</h3><p>昨天晚上不知道为什么莫名其妙就把主题弄上去了，后面new了那个计算机网络的文档之后就炸了，主题又回到原生Hexo了。今天早上又仔细地看了一遍Redefine主题的文档之后才发现原来是自己没有把主题的config文件添加到博客根目录，所以才失败了。</p>
<p>这个问题虽然看起来很简单啊，但是真的卡了我好久好久。</p>
<p><strong>所以以后一定要仔细读官方使用文档！！！</strong></p>
<p>（当然也有可能是我对博客里面的文件的表述啥的都太陌生了所以才看不懂官方文档）</p>
<p><strong>添加图片！！！</strong></p>
<p>这个真的是梦魇，我真的翻了起码有20篇教程了。插件啥的也装了，文件夹什么也都弄好了，但是各种方法都无法让我的图片上传到博客上。做完已经很晚了，所以干脆就不弄了洗洗睡。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实遇到的几个问题都是不知道怎么就出现了，也不知道怎么就解决了，所以感觉还挺神奇的</p>
<p>虽然搭博客搭了很久，但是整个博客真的很好看我很喜欢，做完感觉真的很有满足感~</p>
<p>博客主页背景的意境很美，我就想到了这句词，把它放在了博客主页，出自江南的《踏莎行》。</p>
<p>页底是我最喜欢的《春江花月夜》，与君共勉。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1891711657&auto=1&height=66"></iframe>
]]></content>
      <categories>
        <category>Sketch</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="1-概论"><a href="#1-概论" class="headerlink" title="1 概论"></a>1 概论</h1><h2 id="网络接入方式"><a href="#网络接入方式" class="headerlink" title="网络接入方式"></a>网络接入方式</h2><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230224202753534.png" class>

<h2 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h2><p>处在因特网边缘的部分就是连接在因特网上的所有的主机。这些主机又称为端系统(End  System)。 </p>
<p>端系统中运行的程序之间的通信方式通常可划分为两大类： </p>
<p>客户/服务器(Client/Server, C/S)方式 ：通信由客户 A发起， 向服务器 B 请求服务， 而服务器 B 向客户 A 提供服务。</p>
<p> 对等(Peer-to-Peer , P2P)方式：Peer既是客户，又是服务器</p>
<h2 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h2><p>因特网中最复杂的部分。 </p>
<p>功能：向网络边缘中的大量主机提供连通性， 使边缘部分中的任何一个主机都能够和其他主机 通信(即发送或接收数据) </p>
<p>核心设备：路由器(Router) </p>
<p>路由器是实现<strong>分组交换</strong>(Packet Switching)的关键 构件，其任务是<strong>转发收到的分组</strong>，这是网络核心 部分最重要的功能</p>
<h2 id="电路交换和分组交换"><a href="#电路交换和分组交换" class="headerlink" title="电路交换和分组交换"></a>电路交换和分组交换</h2><p>“交换”(switching)的含义就是转接——把一条电话线转接到另一条电话线，使它们连通起来。 </p>
<p>从通信资源的分配角度来看， “交换”就是按照某种方式动态地分配传输线路的资源。</p>
<h3 id="电话系统（电路交换）"><a href="#电话系统（电路交换）" class="headerlink" title="电话系统（电路交换）"></a>电话系统（电路交换）</h3><p><strong>笨终端</strong>，聪明的<strong>网络</strong> </p>
<p>确保每个网络部件都是可靠的 </p>
<p>​		系统可靠性＝部件可靠性 </p>
<p>​		通过局部冗余实现部件的高可靠性 </p>
<p>​		期望每个部件都能正常工作，部件失败的可能性 很低 </p>
<p>需要人工配置的，高度控制的网络</p>
<h4 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h4><p>电路交换分为三个阶段： <strong>建立连接、通信、释放连接</strong></p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230224203906385.png" class>

<h3 id="分组交换系统"><a href="#分组交换系统" class="headerlink" title="分组交换系统"></a>分组交换系统</h3><p>建立在简单的、不可靠部件上的可靠系统 </p>
<p>自适应的系统 </p>
<p>聪明的<strong>终端</strong>，可以修正传输错误 </p>
<p>分组交换网络抵御故障的能力较强，重新传输 的是出问题的数据包、而不是全部信息；如果数据包遇到计算机发生故障或者线路中断，会 另找其他的传输路径。</p>
<h4 id="主要特点-1"><a href="#主要特点-1" class="headerlink" title="主要特点"></a>主要特点</h4><p>在发送端，先把较长的报文划分成较短的、固定长度的数据段（分组）;</p>
<p>每一个数据段前面添加上首部构成分组; </p>
<p>依次把各分组发送到接收端; </p>
<p>接收端收到分组后剥去首部还原成报文</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230224204422256.png" class>

<p>数据先分成分组后再传输</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230224204437793.png" class>

<p>每个分组单独选路</p>
<h4 id="路由器的处理过程"><a href="#路由器的处理过程" class="headerlink" title="路由器的处理过程"></a>路由器的处理过程</h4><p>在路由器中的输入和输出端口之间没有直接连线（即没有建立物理连接）。</p>
<p>路由器处理分组的过程是：</p>
<p>​	①把收到的分组先放入缓存(暂时存储); </p>
<p>​	②查找转发表，找出到某个目的地址应从哪个 端口转发; </p>
<p>​	③把分组送到适当的端口转发出去</p>
<p><strong>==存储转发==</strong></p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230224204642729.png" class>

<p>主机和路由器的作用不同 </p>
<p>​	主机是为用户进行信息处理的，并向网络发送分组，从网络接收分组 </p>
<p>​	路由器对分组进行<strong>存储转发</strong>，最后把 分组交付目的主机</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230224204758430.png" class>

<h4 id="分组交换的优点"><a href="#分组交换的优点" class="headerlink" title="分组交换的优点"></a>分组交换的优点</h4><p><strong>高效</strong> <strong>动态分配</strong>传输带宽，对通信链路是逐段占用 </p>
<p><strong>灵活</strong> 以<strong>分组</strong>为传送单位和查找路由 </p>
<p><strong>迅速</strong> <strong>不必先建立连接</strong>就能向其他主机 发送分组 </p>
<p><strong>可靠</strong> 保证可靠性的网络协议；分布式的 路由选择协议使网络有很好的<strong>生存性</strong></p>
<h4 id="分组交换带来的问题"><a href="#分组交换带来的问题" class="headerlink" title="分组交换带来的问题"></a>分组交换带来的问题</h4><p>分组在各结点存储转发时需要排队， 并要检查分组首部决定向何处转发， 这就会㐀成一定的<strong>时延</strong> </p>
<p>分组必须携带的首部(里面有必不可少 的控制信息)也㐀成了一定的<strong>开销</strong></p>
<h3 id="分组交换和电路交换的时延特性"><a href="#分组交换和电路交换的时延特性" class="headerlink" title="分组交换和电路交换的时延特性"></a>分组交换和电路交换的时延特性</h3><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230224204939467.png" class>

<p>电路交换时延与数据长度有关</p>
<p>分组交换时延：转发时延（路由器）+传输时延</p>
<h2 id="计算机网络的类型"><a href="#计算机网络的类型" class="headerlink" title="计算机网络的类型"></a>计算机网络的类型</h2><h3 id="WAN（Wide-Area-Network）-也称为远程网"><a href="#WAN（Wide-Area-Network）-也称为远程网" class="headerlink" title="WAN（Wide Area Network）,也称为远程网"></a>WAN（Wide Area Network）,也称为远程网</h3><p>通信子网主要使用分组交换技术</p>
<h3 id="城域网（Metropolitan-Area-Network-MAN"><a href="#城域网（Metropolitan-Area-Network-MAN" class="headerlink" title="城域网（Metropolitan Area Network, MAN)"></a>城域网（Metropolitan Area Network, MAN)</h3><h3 id="局域网-Local-Area-Network，LAN"><a href="#局域网-Local-Area-Network，LAN" class="headerlink" title="局域网(Local Area Network，LAN)"></a>局域网(Local Area Network，LAN)</h3><p>不存在路由选择问题</p>
<h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230304105042449.png" class>

<h3 id="局域网和广域网（WAN和LAN）"><a href="#局域网和广域网（WAN和LAN）" class="headerlink" title="局域网和广域网（WAN和LAN）"></a>局域网和广域网（WAN和LAN）</h3><p><strong>局域网和广域网的侧重点不同：</strong><br>LAN：<strong>共享信道，冲突算法</strong><br>解决网络中随时可能产生的冲突，减少冲突，<br>减少错误<br>WAN：网状拓扑，<strong>路由算法</strong><br>找出一条最佳的路径，从而加快转发㏿度，<br>减少错误</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230304105216611.png" class>

<h3 id="ISP和骨干网"><a href="#ISP和骨干网" class="headerlink" title="ISP和骨干网"></a>ISP和骨干网</h3><p>ISP：网络服务提供商 Internet Service Provider</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230304105314605.png" class>

<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230304105323081.png" class>

<p>把城市之间连接起来的网就叫<strong>骨干网</strong><br><strong>直接和国外连接（即有国际出口）</strong><br>其他有接入功能的ISP通过骨干网连到国外<br>“骨干网”通常是用于描述大型网络结构时经常使用的词语，描述网络结构，而非具体使用的传输方式或协议<br>骨干网一般都是广域网:作用范围几十到几千<br>公里</p>
<h2 id="衡量网络性能的指标"><a href="#衡量网络性能的指标" class="headerlink" title="衡量网络性能的指标"></a>衡量网络性能的指标</h2><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><h4 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h4><p>比特(bit，位)是计算机中数据量的单位，也是信息论中使用的信息量的单位。</p>
<p>速率即<strong>数据率</strong>(data rate)或比特率(bit rate)是连接在计算机网络上的主机<strong>在数字信道上传输数据的速率</strong>，是一个最重要的性能指标。速率的单位是 bps，kbps，Mbps，Gbps 等</p>
<p>速率往往是指额定速率或标称速率</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230304105529979.png" class>

<h4 id="带宽与位宽度"><a href="#带宽与位宽度" class="headerlink" title="带宽与位宽度"></a>带宽与位宽度</h4><p>数字信号流随时间的变化：在时间轴上信 号的宽度随带宽的增大而变窄（位时间）</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230304105604239.png" class>

<h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><h4 id="发送时延"><a href="#发送时延" class="headerlink" title="发送时延"></a>发送时延</h4><p>发送数据时，数据块从节点进入到传输媒体所需要的时间。 </p>
<p>从发送数据块的第一个比特算起，到该数据块的最后一个比特发送完毕所需的时间。<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.172ex;" xmlns="http://www.w3.org/2000/svg" width="30.329ex" height="5.475ex" role="img" focusable="false" viewbox="0 -1460 13405.6 2420"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">发</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">送</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">延</text></g><g data-mml-node="mo" transform="translate(4277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(5333.6,0)"><g data-mml-node="mrow" transform="translate(220,710)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">块</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">长</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mtext" transform="translate(5000,0)"><path data-c="A0" d=""/></g><g data-mml-node="mo" transform="translate(5250,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(5639,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mi" transform="translate(6068,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(6413,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(6774,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(7243,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mrow" transform="translate(235.5,-710)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">信</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">道</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">带</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">宽</text></g><g data-mml-node="mtext" transform="translate(4000,0)"><path data-c="A0" d=""/></g><g data-mml-node="mo" transform="translate(4250,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4639,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mi" transform="translate(5068,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(5413,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(5774,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6243,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(6743,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(7212,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><rect width="7832" height="60" x="120" y="220"/></g></g></g></svg></mjx-container></p>
<h4 id="传播时延"><a href="#传播时延" class="headerlink" title="传播时延"></a>传播时延</h4><p>电磁波在信道中需要传播一定的距离而花费的时间。 </p>
<p>信号传输速率（即发送速率）和信号在信道上的传播速率是完全不同的概念<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.172ex;" xmlns="http://www.w3.org/2000/svg" width="44.454ex" height="5.475ex" role="img" focusable="false" viewbox="0 -1460 19648.6 2420"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">传</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">播</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">延</text></g><g data-mml-node="mo" transform="translate(4277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(5333.6,0)"><g data-mml-node="mrow" transform="translate(4204.5,710)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">信</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">道</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">长</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mtext" transform="translate(4000,0)"><path data-c="A0" d=""/></g><g data-mml-node="mo" transform="translate(4250,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4639,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(5517,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">信</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">号</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">在</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">信</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">道</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">上</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">传</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">播</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">速</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">率</text></g><g data-mml-node="mtext" transform="translate(11000,0)"><path data-c="A0" d=""/></g><g data-mml-node="mo" transform="translate(11250,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(11639,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(12517,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(13017,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(13486,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><rect width="14075" height="60" x="120" y="220"/></g></g></g></svg></mjx-container></p>
<h4 id="处理时延"><a href="#处理时延" class="headerlink" title="处理时延"></a>处理时延</h4><p>交换结点为存储转发而进行一些 必要的处理所花费的时间</p>
<h4 id="排队时延"><a href="#排队时延" class="headerlink" title="排队时延"></a>排队时延</h4><p>结点缓存队列中分组排队所经历的时延 </p>
<p><strong>排队时延的长短往往取决于网络中当时的通信量</strong></p>
<h4 id="数据经历的总时延"><a href="#数据经历的总时延" class="headerlink" title="数据经历的总时延"></a>数据经历的总时延</h4><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="54.301ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 24000.9 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">总</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">延</text></g><g data-mml-node="mo" transform="translate(3277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(4333.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">发</text></g><g data-mml-node="mi" transform="translate(5333.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">送</text></g><g data-mml-node="mi" transform="translate(6333.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(7333.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">延</text></g><g data-mml-node="mo" transform="translate(8555.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(9556,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">传</text></g><g data-mml-node="mi" transform="translate(10556,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">播</text></g><g data-mml-node="mi" transform="translate(11556,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(12556,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">延</text></g><g data-mml-node="mo" transform="translate(13778.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(14778.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">处</text></g><g data-mml-node="mi" transform="translate(15778.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">理</text></g><g data-mml-node="mi" transform="translate(16778.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(17778.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">延</text></g><g data-mml-node="mo" transform="translate(19000.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(20000.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">排</text></g><g data-mml-node="mi" transform="translate(21000.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">队</text></g><g data-mml-node="mi" transform="translate(22000.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(23000.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">延</text></g></g></g></svg></mjx-container></p>
<h4 id="时延的产生"><a href="#时延的产生" class="headerlink" title="时延的产生"></a>时延的产生</h4><p>从结点 A 向结点 B 发送数据，四种时延所产生 的位置</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230304110530843.png" class>

<h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p>吞吐量：每秒能够成功传输的数据量(瞬时、 平均) </p>
<p>吞吐量与带宽的区分：两者的单位都是bps. </p>
<p>英文：吞吐量:throughput 带宽: bandwidth </p>
<p>通信链路的带宽一般是指链路上每秒所能传送 的比特数，以太网的带宽是10Mbps</p>
<p>区分链路上的可用带宽与实际链路中每秒所能 传送的比特数（吞吐量），用“吞吐量”来表示 一个系统的测试性能 </p>
<p>因为实现受各种低效率因素的影响，由一段带 宽为10Mbps的链路连接的一对节点可能只达到 2Mbps的吞吐量。 </p>
<p>这样就意味着，一个主机上的应用能够以 2Mbps的速度向另外的一个主机发送数据。</p>
<p>每个连接的端到端吞吐量： min(Rc, Rs,  R/10) </p>
<p>实际上 Rc 或 Rs 也可 能是瓶颈</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230304110729549.png" class>

<h3 id="因特网钟主机的通信过程"><a href="#因特网钟主机的通信过程" class="headerlink" title="因特网钟主机的通信过程"></a>因特网钟主机的通信过程</h3><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230304110810533.png" class>

<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230304110820782.png" class>

<h2 id="协议和层次体系结构"><a href="#协议和层次体系结构" class="headerlink" title="协议和层次体系结构"></a>协议和层次体系结构</h2><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>协议是通信实体（如网络应用程序）之 间通信所必须遵守的<strong>规则</strong></p>
<p>协议定义了在两个或多个通信实体之间 交换的<strong>报文格式和次序</strong>，以及在报文 传输和/或接收或其他事件方面所采取的 <strong>动作</strong></p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230304110925863.png" class>

<h3 id="协议的组成"><a href="#协议的组成" class="headerlink" title="协议的组成"></a>协议的组成</h3><p>语法：数据与控制信息的结构或格式 </p>
<p>语义：需要发出何种控制信息，完成何种动作以及做出何种响应 </p>
<p>同步：事件实现顺序的详细说明</p>
<h3 id="分层体系结构"><a href="#分层体系结构" class="headerlink" title="分层体系结构"></a>分层体系结构</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>实体、协议、服务和服务访问点<br>        实体(Entity) 表示任何可发送或接收信息的硬件或软件进程。<br>        协议是控制两个对等实体（Peer Entity）进行通信的规则的集合。<br>        在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。<br>        要实现本层协议，还需要使用下层所提供的服务。</p>
<h4 id="协议和服务"><a href="#协议和服务" class="headerlink" title="协议和服务"></a>协议和服务</h4><p>本层服务的实体只能看见服务而无法看见下 面的协议。 </p>
<p>下面的协议对上面的服务用户是<strong>透明的</strong>。 </p>
<p>协议是“<strong>水平的</strong>” ，即协议是控制对等实体之 间通信的规则。 </p>
<p>服务是“<strong>垂直的</strong>” ，即服务是由下层向上层通 过层间接口提供的。 </p>
<p>同一系统相邻两层的实体进行交互的地方， 称为<strong>服务访问点 SAP</strong> (Service Access Point)。</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230304111236496.png" class>

<h3 id="TCP-IP协议栈"><a href="#TCP-IP协议栈" class="headerlink" title="TCP/IP协议栈"></a>TCP/IP协议栈</h3><p><img lazyload src="/images/loading.svg" data-src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230304111332296.png"><img lazyload src="/images/loading.svg" data-src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230304111407318.png"></p>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230304111453990.png" class>

<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230304111510843.png" class>

<p>示例： 我要访问北邮的主页，通信过程是怎样的？</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230304111527369.png" class>

<h4 id="分层体系结构的要点"><a href="#分层体系结构的要点" class="headerlink" title="分层体系结构的要点"></a>分层体系结构的要点</h4><ol>
<li>网络体系结构<strong>分几层</strong>？每层的<strong>功能</strong>是什么？ 有哪些协议？ </li>
<li>不同系统的<strong>对等层实体</strong>遵守<strong>协议</strong>进行通信 </li>
<li>协议的实现需要下层的<strong>服务</strong> </li>
<li>只有最底层是实际通信，其他各层都是虚拟通信，数据流向：U型 </li>
<li>除最底层之外，每层对于上层的数据进行<strong>封装</strong>（打包：增加包头/尾，包头/尾的格式和内容由协议规定）</li>
</ol>
<h1 id="2-应用层"><a href="#2-应用层" class="headerlink" title="2 应用层"></a>2 应用层</h1><h2 id="网络应用概述"><a href="#网络应用概述" class="headerlink" title="网络应用概述"></a>网络应用概述</h2><h3 id="提供网络应用"><a href="#提供网络应用" class="headerlink" title="提供网络应用"></a>提供网络应用</h3><h5 id="编写应用程序"><a href="#编写应用程序" class="headerlink" title="编写应用程序"></a>编写应用程序</h5><p>在不同的端系统上运行<br>通过网络和其他端系统通信<br>遵守特定的协议<br>示例：webserver软件和浏览器软件通信</p>
<h5 id="无需修改网络核心软件"><a href="#无需修改网络核心软件" class="headerlink" title="无需修改网络核心软件"></a>无需修改网络核心软件</h5><p>网络核心设备不运行网络应用程序<br>方便实现快速的应用开发和部署</p>
<h3 id="应用层协议的内容"><a href="#应用层协议的内容" class="headerlink" title="应用层协议的内容"></a>应用层协议的内容</h3><p><strong>消息类型</strong><br>        例如：请求、应答<br><strong>语法（Syntax）</strong><br>        消息中包含哪些字段，每个字段的长度<br><strong>语义 (Semantics)</strong><br>        每个字段信息的含义<br><strong>时序：消息的顺序</strong></p>
<h3 id="应用层协议的特点"><a href="#应用层协议的特点" class="headerlink" title="应用层协议的特点"></a>应用层协议的特点</h3><p>面向用户，支持特定的网络应用 </p>
<p>​		<strong>没有通用的协议，每个应用有专门的协议！</strong><br>​		<strong>相比其他层，协议数量最多、最复杂</strong></p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230309235623312.png" class title="image-20230309235623312">

<h3 id="网络应用的体系结构"><a href="#网络应用的体系结构" class="headerlink" title="网络应用的体系结构"></a>网络应用的体系结构</h3><h4 id="C-S-体系结构"><a href="#C-S-体系结构" class="headerlink" title="C/S 体系结构"></a>C/S 体系结构</h4><p><strong>服务器:</strong><br>提供服务，同时处理多个客户请求<br>一直在线<br>地址(域名)公开，一般不变<br>可能有多个服务器(server farms)<br>一般需要高性能硬件支持</p>
<p> <strong>客户:</strong><br>与服务器通信，使用服务<br>临时连接到网络<br>IP地址可能是动态的<br>客户之间不直接通信</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230309235830786.png" class title="image-20230309235830786">

<h4 id="P2P体系结构"><a href="#P2P体系结构" class="headerlink" title="P2P体系结构"></a>P2P体系结构</h4><p>Peer -to-Peer<br>没有严格的服务器 - 客户机之分 ，Peer<br>没 有 一 直 在 线 的 服 务 器 ， Peer 在 必 要 时 充 当 服 务 器<br>Peer 之 间 直 接 通 信<br>Peer 临 时 连 接 到 网 络 ， 且IP 地 址 可 能 动 态 变 化  <strong>可扩 展 、 成本低 ， 但难 于 管 理 、 有 安 全 隐 患</strong></p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230310000105961.png" class title="image-20230310000105961">

<h5 id="P2P文件下载：Peer之间互相传输文件"><a href="#P2P文件下载：Peer之间互相传输文件" class="headerlink" title="P2P文件下载：Peer之间互相传输文件"></a>P2P文件下载：Peer之间互相传输文件</h5><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230310000128929.png" class title="image-20230310000128929">

<h5 id="P2P-如何查找资源"><a href="#P2P-如何查找资源" class="headerlink" title="P2P: 如何查找资源"></a>P2P: 如何查找资源</h5><p><strong>集中式</strong>：从索引服务器(Index Server)中查找资源，eg. Napster<br><strong>分布式</strong>：洪泛查询(Query Flooding)，eg. Gnutella<br><strong>分层叠加网</strong>，超级节点提供索引服务，<br>eg.KaZaA, freenet,chord</p>
<p>集中式查找：混合P2P</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230310000315006.png" class title="image-20230310000315006">

<p>洪泛式（Flooding）查找</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230310000335907.png" class title="image-20230310000335907">

<p>分层叠加网（Overlay Network）查找</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230310000348333.png" class title="image-20230310000348333">

<h4 id="C-S和P2P混合结构"><a href="#C-S和P2P混合结构" class="headerlink" title="C/S和P2P混合结构"></a>C/S和P2P混合结构</h4><h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><p>C/S模式的主机间进程通信</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230310100609409.png" class title="image-20230310100609409">

<p>不同主机间通信的接口：Sockets</p>
<p><strong>套接字</strong><br>应用进程使用socket来发送/接收消息<br>应用编程接口（API）<br>        位于应用层和传输层 之间<br>        帮助应用访问系统内核（TCP/IP协议软件）<br>        设置相关参数（如最大报文段长度MSS等）</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230310100650516.png" class title="image-20230310100650516">

<p>Internet 上的每台主机都 有一个唯一的IP地址<br>Q: IP地址能唯一标识进程吗? A: 当然不行，一台主机中可能有多个进程在运行</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230310100749036.png" class title="image-20230310100749036">

<h3 id="通信关系与端口号"><a href="#通信关系与端口号" class="headerlink" title="通信关系与端口号"></a>通信关系与端口号</h3><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230310100814098.png" class title="image-20230310100814098">

<p>IP地址与端口号示例</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230310100825046.png" class title="image-20230310100825046">

<h3 id="网络应用对传输服务的要求：衡量指标"><a href="#网络应用对传输服务的要求：衡量指标" class="headerlink" title="网络应用对传输服务的要求：衡量指标"></a>网络应用对传输服务的要求：衡量指标</h3><h5 id="可靠性：数据丢失率"><a href="#可靠性：数据丢失率" class="headerlink" title="可靠性：数据丢失率"></a>可靠性：数据丢失率</h5><p>o 可容忍差错，如话音<br>o 不能容忍差错，如Email</p>
<h5 id="实时性"><a href="#实时性" class="headerlink" title="实时性"></a>实时性</h5><p>o 端到端的时延</p>
<h5 id="吞吐量-Throughput"><a href="#吞吐量-Throughput" class="headerlink" title="吞吐量 (Throughput)"></a>吞吐量 (Throughput)</h5><p>o 端到端的带宽<br>o 音频数据: 5kbps-1Mbps<br>o 视频数据:10kbps-5Mbps</p>
<h5 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h5><p>o 是否加密、是否验证用户身份、能否保证数据一致性</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230310100908004.png" class title="image-20230310100908004">

<h3 id="因特网的传输层服务"><a href="#因特网的传输层服务" class="headerlink" title="因特网的传输层服务"></a>因特网的传输层服务</h3><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230310100927025.png" class title="image-20230310100927025">

<h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230310101006244.png" class title="image-20230310101006244">

<p><strong>IP地址的优点和缺点</strong><br>        IP地址更适合计算机处理，包含足够的路由信息。<br>        IP地址不适合人们记忆<br>        无法通过IP地址猜测主机的用途<br>                如一个主机到底是www服务器还是FTP服务器？<br><strong>如何取长补短——域名系统</strong><br>    优点：<br>        使用方便，易于记忆。<br>         一致性好，不会随IP地址的改变而改变。<br>    采用分层结构的分布式数据库，ᨀ供主机名和IP地址映射的目录服务<br>    允许主机查询分布式DNS数据库的应用层协议</p>
<h3 id="DNS协议要点"><a href="#DNS协议要点" class="headerlink" title="DNS协议要点"></a>DNS协议要点</h3><p>采用C/S模型，Client请求，Server响应<br>客户端程序：resolver(解析器)<br>传输层采用UDP<br>DNS服务器的访问端口号是53<br>DNS是其他应用层协议的支撑协议</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230310101149685.png" class title="image-20230310101149685">

<p>层次化的名字空间</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230310101211372.png" class title="image-20230310101211372">

<h3 id="主机域名的构成"><a href="#主机域名的构成" class="headerlink" title="主机域名的构成"></a>主机域名的构成</h3><p><strong>主机名是由一系列由“.”分开的标签组成：</strong></p>
<p>标签由英文字母和数字组成；<br>每个标签不能超过63个字符；<br>全部的标签不能超过255个字符；<br>书写顺序是从主机开始直到域名树的根域为止。例如：scss.bupt.edu.cn</p>
<p><strong>域名是一个组织在域名空间中的名字</strong></p>
<p>例如，北京邮电大学的域名为bupt.edu.cn。<br>该组织中已注册的主机都以组织的域名为后缀。</p>
<h3 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h3><p>是域名空间中的一部分（子树），从域名管理的角度来划分的，即DNS服务器的管辖范围是“区”<br>        每一个区设置相应的权威服务器，用来保存该区中所有主机的域名到ip地址的映射</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230314230715544.png" class title="image-20230314230715544">

<h3 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h3><p>根据DNS服务器的作用，可分为四类：</p>
<h5 id="根域名服务器（Root-Name-Server）"><a href="#根域名服务器（Root-Name-Server）" class="headerlink" title="根域名服务器（Root Name Server）"></a>根域名服务器（Root Name Server）</h5><p>o 为下级域名服务器提供域名解析服务；<br>        它需要知道全部顶级域名服务器的地址。<br>o 数量很少，由于历史原因，主要分布在北美地区。</p>
<p>全球共有13个(a-m)<br>o 当用户无法在本地完成名字解析时，即访问根名字服务器<br>o 根名字服务器知道所有顶级名字服务器的IP地址<br>n 每个名字服务器均知道其下级名字服务器的地址<br>n 最终能访问到<strong>权威名字服务器</strong>，完成名字解析</p>
<h5 id="顶级域名服务器（Top-level-Name-Server）"><a href="#顶级域名服务器（Top-level-Name-Server）" class="headerlink" title="顶级域名服务器（Top level Name Server）"></a>顶级域名服务器（Top level Name Server）</h5><p>o 负责管理该顶级域名服务器注册的所有二级域名。</p>
<h5 id="权威域名服务器（Authoritative-Name-Server）"><a href="#权威域名服务器（Authoritative-Name-Server）" class="headerlink" title="权威域名服务器（Authoritative Name Server）"></a>权威域名服务器（Authoritative Name Server）</h5><p>o 每台因特网中的主机都应该在所在域的域名服务器中注册，提供注册的域名服务器就是该主机的认证域名服务器。</p>
<p>企业网/校园网的DNS 服务器，提供主机名(如Web 服务器、Email 服务器的域名)与IP地址的权威映射<br>由企业网/校园网自己维护或ISP维护</p>
<h5 id="本地域名服务器（Local-Name-Server）"><a href="#本地域名服务器（Local-Name-Server）" class="headerlink" title="本地域名服务器（Local Name Server）"></a>本地域名服务器（Local Name Server）</h5><p>o 当一个主机发出 DNS 查询请求时，这个查询请求报文就发送给本地域名服务器。</p>
<p>如果本地DNS 服务器找不到对应的映射关系，则将<strong>代理resolver</strong>去请求其他的名字服务器<br>本地DNS 服务器可能是企业网/校园网的DNS 服务器或ISP 的DNS 服务器</p>
<h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230314231446710.png" class title="image-20230314231446710">

<h4 id="迭代查询"><a href="#迭代查询" class="headerlink" title="迭代查询"></a>迭代查询</h4><p><strong>迭代查询过程</strong><br>在无法完成域名解析时，<strong>本地DNS服务器</strong>询问根DNS 服务器<br>根DNS 服务器返回.edu域DNS 服务器的地址<br>本地DNS 服务器询问.edu域DNS 服务器<br>以此类推，最终请求权威DNS 服务器</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230314231602308.png" class title="image-20230314231602308">

<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230314231613315.png" class title="image-20230314231613315">

<h4 id="递归查询"><a href="#递归查询" class="headerlink" title="递归查询"></a>递归查询</h4><p>由被请求的名字服务器代理进行DNS查询<br>因特网中可选采用</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230314231712990.png" class title="image-20230314231712990">

<h3 id="DNS性能改进措施"><a href="#DNS性能改进措施" class="headerlink" title="DNS性能改进措施"></a>DNS性能改进措施</h3><p><strong>主、备用服务器</strong><br>定期把数据复制到备用服务器中，主服务器发生故障时，备用服务器代替工作</p>
<p><strong>当DNS服务器收到一个新的DNS响应，会将域名和地址的映射关系缓存在本地</strong><br>提高后续查找效率<br>缓存的映射数据在一段时间后过期<br>本地DNS服务器通常可以直接访问TLD 服务器，而不必访问根名字服务器</p>
<p> <strong>映射数据更新/通知机制</strong></p>
<h3 id="DNS资源记录"><a href="#DNS资源记录" class="headerlink" title="DNS资源记录"></a>DNS资源记录</h3><p><strong>RR 格式: (name, TTL, class, type, value)</strong></p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318101248472.png" class title="image-20230318101248472">

<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318101255640.png" class title="image-20230318101255640">

<h3 id="DNS协议消息"><a href="#DNS协议消息" class="headerlink" title="DNS协议消息"></a>DNS协议消息</h3><p>DNS协议包含**请求(query)和应答(reply)**两个消息， 其消息格式相同</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318101337756.png" class title="image-20230318101337756">

<p>消息头(12字节) </p>
<p><strong>标识（ID）</strong>: 16位，一对请 求和应答消息使用同样的标识 </p>
<p><strong>标志（Flag）</strong>:<br>消息是<strong>请求</strong>或<strong>应答</strong><br>是否使用递归查询<br>递归查询是否可行<br>应答是否是权威的</p>
<h3 id="DNS的安全性问题"><a href="#DNS的安全性问题" class="headerlink" title="DNS的安全性问题"></a>DNS的安全性问题</h3><p>名字服务器易受攻击，名字数据库被非法主机<br>修改<br>n DNS伪冒(spoofing)<br>n DNS缓存毒化(Cache poisoning)<br>n DOS、缓存溢出(Buffer overrun)、重放(Replay)攻击…</p>
<p>o 改进策略：DNSSEC<br>n RFC 3090<br>n 数字签名、公共密钥<br>        o 对DNS请求/应答消息进行身份认证</p>
<h2 id="WWW应用和HTTP"><a href="#WWW应用和HTTP" class="headerlink" title="WWW应用和HTTP"></a>WWW应用和HTTP</h2><p>❒万维网，WWW, World Wide Web<br>❒ 不是一个网络，而是基于因特网的信息服务系统<br>❒ 分布式超媒体系统(Hyper-media)<br>        超媒体包括文本、图形、图像、音频、视频等多种媒体<br>❒ 以C/S模式工作<br>        客户程序向服务器程序ᨀ出请求<br>        服务器程序向客户程序返回客户需要的万维网文档，即页</p>
<h3 id="WWW应用的客户端：浏览器"><a href="#WWW应用的客户端：浏览器" class="headerlink" title="WWW应用的客户端：浏览器"></a>WWW应用的客户端：浏览器</h3><p>o WWW应用的用户接口<br>o 功能<br>        n 向Web服务器发送请求消息<br>        n 接收Web服务器的应答消息<br>        n 解释网页文档的源代码，将网页呈现给用户<br>        n 通用的客户端，支持Email、文件传输、BBS、电子商务等应用<br>o 不同的浏览器对于同一网页文件的呈现结果不同</p>
<h3 id="WWW应用的服务器端：Web服务器"><a href="#WWW应用的服务器端：Web服务器" class="headerlink" title="WWW应用的服务器端：Web服务器"></a>WWW应用的服务器端：Web服务器</h3><p>o 保存Web网页文档<br>o 接收客户端的请求消息<br>o 返回响应消息：状态信息和网页数据<br>o 可选功能<br>        n 保存访问用户信息<br>        n 对于访问用户进行身份认证<br>        n 对于网页数据进行权限管理<br>        n ……</p>
<h3 id="WWW应用的编址：URL"><a href="#WWW应用的编址：URL" class="headerlink" title="WWW应用的编址：URL"></a>WWW应用的编址：URL</h3><p>统一资源定位符，唯一标识一个资源，对资源进行定位和访问</p>
<p><strong>协议名 :// 主机: 端口号 /文件路径及文件名</strong><br>例如：<a class="link" href="http://www.abc.com:8080/example/example.html">http://www.abc.com:8080/example/example.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>和网页上的链接相关联<br>缺省值：<br>        n 协议名：http<br>        n 端口号：80<br>        n 文件名：index.html</p>
<h3 id="网页类型"><a href="#网页类型" class="headerlink" title="网页类型"></a>网页类型</h3><p><strong>o静态网页（Static web page）</strong><br>        n 以文件形式保存<br>        n 不同的用户、不同时间访问，返回结果均一样</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318102134973.png" class title="image-20230318102134973">

<p><strong>o动态网页（Dynamic web page）</strong><br>        n 收到浏览器请求后，服务器端动态生成网页<br>        n 示例：CGI脚本</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318102145594.png" class title="image-20230318102145594">

<p><strong>o活跃网页（Active web page）</strong><br>        n 收到服务器响应后，客户端动态生成网页<br>        n 示例：Java Applet</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318102153684.png" class title="image-20230318102153684">

<h3 id="HTTP概述"><a href="#HTTP概述" class="headerlink" title="HTTP概述"></a>HTTP概述</h3><p>o WWW的应用层协议<br>o 采用C/S模型<br>        n <strong>客户端浏览器</strong>： 发出HTTP请求，接收HTTP响应，向用户呈现网页<br>        n <strong>Web服务器</strong>: 接收HTTP请求，返回HTTP响应（包含请求的网页数据）<br>o 传输层采用TCP<br>o 无状态（Stateless）协议<br>        n 服务器端不保存以前的访问记录，对于每个请求都是单独处理</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318102246612.png" class title="image-20230318102246612">

<h3 id="HTTP-的操作过程"><a href="#HTTP-的操作过程" class="headerlink" title="HTTP 的操作过程"></a>HTTP 的操作过程</h3><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318102320483.png" class title="image-20230318102320483">

<p>(1) 浏览器分析超链接, 如 <a class="link" href="http://www.abc.com/example.html">http://www.abc.com/example.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>(2) 浏览器使用通过DNS获得服务器(<a class="link" href="http://www.abc.com)的ip地址/">www.abc.com)的IP地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>(3) 浏览器建立到服务器的TCP连接<br>(4) 浏览器发送HTTP 请求： <strong>GET</strong> /example.html HTTP/1.0<br>(5) 服务器发送HTTP响应<br>(6) 释放TCP连接<br>(7) 浏览器显示网页example.html</p>
<h4 id="非持久连接"><a href="#非持久连接" class="headerlink" title="非持久连接"></a>非持久连接</h4><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318102401357.png" class title="image-20230318102401357">

<p><strong>RTT</strong>: Round Trip Time, 往返时间，time for a small packet to travel from client to server and back.(不包含发送时延)</p>
<p><strong>响应时间:</strong><br>1 ×RTT：建立TCP连接<br>1 ×RTT： 发送HTTP请求、返回HTTP响应<br>网页对象文件传输时间<br><strong>响应时间 = 2 ×RTT+文件传输时间</strong></p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318102457278.png" class title="image-20230318102457278">

<h4 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h4><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318102550090.png" class title="image-20230318102550090">

<p><strong>流水线</strong></p>
<p>Client可以连续发出多个请求，而不必等待前一个请求的响应完成</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318102615531.png" class title="image-20230318102615531">

<h3 id="HTTP消息的格式"><a href="#HTTP消息的格式" class="headerlink" title="HTTP消息的格式"></a>HTTP消息的格式</h3><p>HTTP有两类消息：请求（request）,响应（ response ）<br>❒ 消息格式：ASCII ，（易读）</p>
<h4 id="请求消息"><a href="#请求消息" class="headerlink" title="请求消息"></a>请求消息</h4><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318102750825.png" class title="image-20230318102750825">

<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318102631557.png" class title="image-20230318102631557">

<h4 id="响应消息"><a href="#响应消息" class="headerlink" title="响应消息"></a>响应消息</h4><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318102657667.png" class title="image-20230318102657667">

<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318102705506.png" class title="image-20230318102705506">

<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>Web服务器对于访问用户的标识信息，可用于识别用户、记录用户信息和访问情况</p>
<p>Cookie涉及下列内容：</p>
<ol>
<li>在HTTP响应中包含一行set-cookie头信息</li>
<li>在HTTP请求中包含一行cookie头信息</li>
<li>Client主机中保存一个cookie文件，由浏览器管理</li>
<li>Server端的后台数据库</li>
</ol>
<p>示例： o 小王访问淘宝网站 o服务器收到初次访问请 求时，将增加小王的相关信息<br>                唯一的ID  数据库的记录</p>
<p><strong>Cookie: 用于保持访问状态</strong></p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318102956223.png" class title="image-20230318102956223">

<h4 id="Cookie的特性"><a href="#Cookie的特性" class="headerlink" title="Cookie的特性"></a>Cookie的特性</h4><p><strong>Cookie的应用：</strong><br>o 身份认证<br>o 购物车<br>o 个性化的推荐信息<br>o 用户会话状态(Web e-mail)</p>
<h3 id="代理服务器（Proxy-Server）"><a href="#代理服务器（Proxy-Server）" class="headerlink" title="代理服务器（Proxy Server）"></a>代理服务器（Proxy Server）</h3><p><strong>目的</strong>：减轻Web服务器的负担，加快访问速度</p>
<p>在浏览器程序中设置 通过代理访问<br>浏览器将所有HTTP  请求均发送给代理<br>        如果在代理中找到请求的 对象，则由代理返回响应<br>        否则代理将请求转发给 要访问的Web Server， 由该Server 响应<br>        代理缓存来自Web  Server的网页对象</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318103130416.png" class title="image-20230318103130416">

<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318103342113.png" class title="image-20230318103342113">

<p><strong>浏览器Caching： 浏览器缓存访问过的网页，进一步减少网络负载</strong></p>
<h4 id="缓存的更新：条件GET"><a href="#缓存的更新：条件GET" class="headerlink" title="缓存的更新：条件GET"></a>缓存的更新：条件GET</h4><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230318103408051.png" class title="image-20230318103408051">

<h1 id="3-网络层"><a href="#3-网络层" class="headerlink" title="3 网络层"></a>3 网络层</h1><h2 id="网络层概述"><a href="#网络层概述" class="headerlink" title="网络层概述"></a>网络层概述</h2><p>实现了<strong>端到端（主机-主机）</strong>的数据传输</p>
<h3 id="网络层的主要功能"><a href="#网络层的主要功能" class="headerlink" title="网络层的主要功能"></a>网络层的主要功能</h3><p>路由选择<br>        根据数据携带的<strong>目的主机地址</strong>为数据包选择一条的路径，以到达目的主机<br>主机/路由器编址<br>        每个<strong>网络接口</strong>有一个唯一的IP地址<br>网络互联<br>        在不同的网络之间转发数据，向传输层提供统一的数据传输<br>分段/重装<br>        当数据包长度超过输出接口所连接的网络的限制时，应拆分成多个数据包</p>
<h3 id="网络互联"><a href="#网络互联" class="headerlink" title="网络互联"></a>网络互联</h3><p>从网络体系结构的层次观点来考察，网络互联<br>可在四个层次上实现：<br>n 物理层<br>n 数据链路层<br>n 网络层<br>n 网络层以上</p>
<h4 id="物理层：中继器-集线器"><a href="#物理层：中继器-集线器" class="headerlink" title="物理层：中继器/集线器"></a>物理层：中继器/集线器</h4><p>在电缆段之间复制比特流<br>没有地址概念，本质上不是网络互连</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502095241802.png" class title="image-20230502095241802">

<h4 id="数据链路层：网桥-交换机"><a href="#数据链路层：网桥-交换机" class="headerlink" title="数据链路层：网桥/交换机"></a>数据链路层：网桥/交换机</h4><p><strong>LAN互联</strong>：在<strong>网段</strong>(segment)之间转发<strong>数据帧</strong><br>根据数据帧中的信息（<strong>MAC地址</strong>）进行转发</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502095335607.png" class title="image-20230502095335607">

<h4 id="网络层：路由器"><a href="#网络层：路由器" class="headerlink" title="网络层：路由器"></a>网络层：路由器</h4><p><strong>网络层互联</strong>：在<strong>网络之间</strong>转发<strong>分组/包</strong><br>根据分组中的逻辑地址（<strong>IP地址</strong>）进行转发</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502095414128.png" class title="image-20230502095414128">

<h4 id="更高层：网关"><a href="#更高层：网关" class="headerlink" title="更高层：网关"></a>更高层：网关</h4><p>连接<strong>不同体系结构</strong>或协议的网络<br>传输网络、应用网关</p>
<h4 id="网络互联：小结"><a href="#网络互联：小结" class="headerlink" title="网络互联：小结"></a>网络互联：小结</h4><p>o 物理层：使用中继器或集线器在不同的电缆段之间复制位信号，无寻址功能；<br>o 数据链路层：使用网桥或交换机在局域网之间存储转发数据帧，用MAC地址寻址；<br>o 网络层：使用路由器在不同的网络之间存储转发分组，用IP地址寻址；<br>o 传输层及应用层：使用网关提供更高层次的互连，用端口号或其他特定标识寻址。</p>
<h4 id="源主机网络层的主要工作"><a href="#源主机网络层的主要工作" class="headerlink" title="源主机网络层的主要工作"></a>源主机网络层的主要工作</h4><p>将上层数据封装成IP包<br>查路由表选择路由</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502101418717.png" class title="image-20230502101418717">

<h4 id="路由器网络层的主要工作"><a href="#路由器网络层的主要工作" class="headerlink" title="路由器网络层的主要工作"></a>路由器网络层的主要工作</h4><p>查路由表选择路由<br>IP包转发</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502101512098.png" class title="image-20230502101512098">

<h4 id="目的主机网络层的主要工作"><a href="#目的主机网络层的主要工作" class="headerlink" title="目的主机网络层的主要工作"></a>目的主机网络层的主要工作</h4><p>检查目的地址，确认是自己<br>处理IP包头，将数据交给上层</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502101541769.png" class title="image-20230502101541769">

<h3 id="网络层提供的服务"><a href="#网络层提供的服务" class="headerlink" title="网络层提供的服务"></a>网络层提供的服务</h3><p><strong>屏蔽底层网络的差异</strong>，向传输层提供一致的服务</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502101719677.png" class title="image-20230502101719677">

<h4 id="虚电路网络"><a href="#虚电路网络" class="headerlink" title="虚电路网络"></a>虚电路网络</h4><p>虚电路网络提供<strong>面向连接</strong>的服务<br>n 借鉴了电路交换的优点<br>n 发送数据之前，源主机和目的主机之间首先要建立一条虚连接（逻辑连接）<br>n 数据无丢失、重复和失序<br>n 示例：分组交换网X.25、ATM</p>
<h5 id="面向连接"><a href="#面向连接" class="headerlink" title="面向连接"></a>面向连接</h5><p><strong>数据传输过程</strong>分为三阶段：建立虚连接、传输数据、拆除虚连接<br><strong>虚电路表</strong><br>        输入接口、输入VCI（虚电路标识，局部有效）<br>        输出接口、输出VCI（虚电路标识，局部有效）</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502101943674.png" class title="image-20230502101943674">

<p>输入接口和输入VCI唯一标识一条虚电路，后续的数据报只需携带<strong>VCI，无需携带完整的目的地址</strong></p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502102027676.png" class title="image-20230502102027676">

<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502102039907.png" class title="image-20230502102039907">

<p><strong>A 发送给 B 的所有分组都沿着同一条虚电路传送</strong></p>
<h4 id="数据报网络"><a href="#数据报网络" class="headerlink" title="数据报网络"></a>数据报网络</h4><p><strong>无连接</strong><br>路由器对于每个输入的数据包<strong>单独</strong>进行<strong>处理</strong><br>路由表包含了目的地址和输出接口的对应关系<br>每个数据包必须包含<strong>完整的目的地址</strong><br>来自相同源节点和目的节点的两个数据报可能被转发到不同的接口，不保证顺序<br>对网络状况和目的主机状况一无所知，可能出现丢失</p>
<h5 id="数据报网络的好处"><a href="#数据报网络的好处" class="headerlink" title="数据报网络的好处"></a>数据报网络的好处</h5><p>由于传输网络不提供端到端的可靠传输服务，这就使网络中的路由器可以做得比较<strong>简单</strong>，而且<strong>价格低廉</strong>（与电信网的交换机相比较）。<br>如果主机（即端系统）中的进程之间的通信需要是<strong>可靠</strong>的，那么就由网络的<strong>主机中的传输层负责</strong>（包括差错处理、流量控制等）。<br>采用这种设计思路的好处是：网络的造价大大降低，运行方式灵活，能够适应多种应用。</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502102740848.png" class title="image-20230502102740848">

<p><strong>H1 发送给 H2 的分组可能沿着不同路径传送</strong></p>
<p>路由表示例</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502102820289.png" class title="image-20230502102820289">

<h4 id="数据报-vs-虚电路"><a href="#数据报-vs-虚电路" class="headerlink" title="数据报 vs 虚电路"></a>数据报 vs 虚电路</h4><table>
<thead>
<tr>
<th>特点</th>
<th>数据报</th>
<th>虚电路</th>
</tr>
</thead>
<tbody><tr>
<td>是否需要预先建立连接</td>
<td>不需要</td>
<td>需要</td>
</tr>
<tr>
<td>数据包中携带的地址</td>
<td>完整地址</td>
<td>较短的VCI</td>
</tr>
<tr>
<td>资源分配方式</td>
<td>动态分配</td>
<td>预先分配</td>
</tr>
<tr>
<td>路由选择</td>
<td>每个数据包都需要</td>
<td>只是在建立虚电路时</td>
</tr>
<tr>
<td>数据传输的可靠性</td>
<td>不可靠，数据包可能丢失、重复或失序</td>
<td>可靠</td>
</tr>
<tr>
<td>一对主机之间的数据流的传输路径</td>
<td>每个数据包的传输路径可能不同</td>
<td>一个虚连接上的所有数据包沿着同一路径传输</td>
</tr>
<tr>
<td>路由器或链路故障的影响</td>
<td>只影响正在处理的数据包</td>
<td>经过该路由器或链路的所有连接都需要重建</td>
</tr>
<tr>
<td>服务质量（QoS）保障</td>
<td>很难实现</td>
<td>通过在建立VC时申请足够资源，容易实现</td>
</tr>
<tr>
<td>拥塞控制</td>
<td>很难实现</td>
<td>容易实现</td>
</tr>
</tbody></table>
<h2 id="路由选择算法"><a href="#路由选择算法" class="headerlink" title="路由选择算法"></a>路由选择算法</h2><p>根据数据包中携带的<strong>目的地址</strong>，为数据包在网络中选择一条路径，以到达目的主机</p>
<p>路由器查找路由表，完成选路</p>
<p>选路到<strong>下一跳</strong>（Next Hop，或输出接口），而不是完整路由</p>
<p>路由选择与转发<br>        转发：将数据从路由器的输入接口转移到相应的输出接口<br>        路由选择：根据路由表确定应转发到哪个输出接口的过程</p>
<p>确定/更新路由表的算法</p>
<p>理想的路由算法<br>        算法必须是正确的和完整的。<br>        算法在计算上应简单。<br>        算法应能适应通信量和网络拓扑的变化，要有自适应性。<br>        算法应具有稳定性。<br>        算法应是公平的。<br>        算法应是最佳的。</p>
<p>不存在一种绝对的最佳路由算法。</p>
<p>基于图论<br>        节点：路由器<br>        边：链路<br>        权值：链路开销<br>                路径长度<br>                HOP数（跳数）<br>                延迟时间</p>
<p>最短路由<br>        总开销最小的路径</p>
<h4 id="路由选择算法的分类"><a href="#路由选择算法的分类" class="headerlink" title="路由选择算法的分类"></a>路由选择算法的分类</h4><p>静态选路算法（非自适应选路算法）<br>        路由表预先设定（不考虑网络当前状况）<br>        路由表基本不变<br>        一般不能保证是最佳路由</p>
<p>动态选路算法（自适应选路算法）<br>        根据当前网络的拓扑结构和负载，（周期性）动态更新路由表</p>
<h3 id="静态选路算法"><a href="#静态选路算法" class="headerlink" title="静态选路算法"></a>静态选路算法</h3><p>o 固定路由表选路法<br>        根据事先设置的静态路由表，查表选路</p>
<p>o 洪泛法（Flooding）<br>        向除输入接口之外的所有接口转发</p>
<p>o 随机走动选路法<br>        按概率随机选路</p>
<h4 id="固定路由表选路法"><a href="#固定路由表选路法" class="headerlink" title="固定路由表选路法"></a>固定路由表选路法</h4><h5 id="静态路由表的生成：Dijakstra算法——Dijakstra的最短路径算法"><a href="#静态路由表的生成：Dijakstra算法——Dijakstra的最短路径算法" class="headerlink" title="静态路由表的生成：Dijakstra算法——Dijakstra的最短路径算法"></a>静态路由表的生成：Dijakstra算法——Dijakstra的最短路径算法</h5><p>o 求源节点到其他节点的最短路径和最小开销，即以源节点<br>为根的<strong>最短路径树</strong>(Shortest Path Tree, SPF)</p>
<p>o 算法原理<br>        1）定义一个集合N，包含所有最短路径已确定的节点，在初始时，该集合中只包含一个源节点（设为S）<br>        2）如果S和某个节点之间有一条边相连，距离就是该边上的权值；否则，距离值设为无穷大（∞）<br>        3）从集合N外的节点中选择一个和S距离最小的节点（设为T）加入集合<br>        4）重新计算S到其他集合N外的节点的距离，如果经过T的路径更短，则更新距离值<br>        5）重复3-4步，直到所有节点都加入集合N</p>
<p>参考：<a class="link" href="https://www.bilibili.com/video/BV1H4411N7oD?p=93&vd_source=c75b11f1c6d9b809759edcc17586cf0d">https://www.bilibili.com/video/BV1H4411N7oD?p=93&amp;vd_source=c75b11f1c6d9b809759edcc17586cf0d <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="静态选路算法：洪泛法"><a href="#静态选路算法：洪泛法" class="headerlink" title="静态选路算法：洪泛法"></a>静态选路算法：洪泛法</h4><p>不计算路径，有路就走<br>路由器收到数据包后，向除了输入接口之外的所有接口转发</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502105005999.png" class title="image-20230502105005999">

<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502105011133.png" class title="image-20230502105011133">

<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502105016924.png" class title="image-20230502105016924">

<p><strong>特点：</strong></p>
<p>o 一个数据包将产生大量的副本（copy）<br>        n 给网络增加<strong>大量负载</strong></p>
<p>o 至少有一个副本将到达目的主机<br>        n <strong>健壮性强</strong></p>
<p>o 至少有一个副本选择的是<strong>最优路由</strong></p>
<p>o 所有的路由器都会收到副本<br>        n 可用于<strong>传播路由信息</strong></p>
<p>缺点：重复数据包多，浪费带宽<br>优点：可靠性高，路径最短，常用于军事</p>
<h4 id="随机走动选路法"><a href="#随机走动选路法" class="headerlink" title="随机走动选路法"></a>随机走动选路法</h4><p>o 路由表中，一个表项有多条候选路由，路由器收到一个数据包时，按照预定的概率随机地选择其中一条路由<br>o 应用：无线网络</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502105237143.png" class title="image-20230502105237143">

<h3 id="动态选路算法"><a href="#动态选路算法" class="headerlink" title="动态选路算法"></a>动态选路算法</h3><p>自适应算法是动态的、分布式的算法<br>实现分布式算法的三要素： n 测量路由 n 更新路由信息的协议 n 计算路由开销</p>
<h4 id="DVR：距离矢量选路算法-Distance-Vector-Routing"><a href="#DVR：距离矢量选路算法-Distance-Vector-Routing" class="headerlink" title="DVR：距离矢量选路算法 Distance Vector Routing"></a>DVR：距离矢量选路算法 Distance Vector Routing</h4><p>o 距离：两个节点间传输数据的开销<br>o 前提：每个路由器都知道自己<strong>到邻居节点的距离</strong><br>o 动态选路：路由器通过<strong>周期性</strong>地与<strong>邻居节点交换路由信息</strong><br>        n 与谁交换：邻居节点<br>        n 交换什么：路由表中的距离项（目的地、距离）<br>        n 何时交换：周期性交换<br>o 各节点根据路由信息<strong>更新</strong>路由表</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502105516609.png" class title="image-20230502105516609">

<h5 id="无穷计算问题"><a href="#无穷计算问题" class="headerlink" title="无穷计算问题"></a>无穷计算问题</h5><p>好消息传播得快，坏消息传播得慢</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502105544562.png" class title="image-20230502105544562">

<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>o 交换的路径信息量大<br>o 路径信息不一致<br>o <strong>收敛速度慢</strong>（坏消息）<br>o 不适合大型网络</p>
<h4 id="LSR：链路状态选路算法-Link-State-Routing"><a href="#LSR：链路状态选路算法-Link-State-Routing" class="headerlink" title="LSR：链路状态选路算法 Link State Routing"></a>LSR：链路状态选路算法 Link State Routing</h4><p>链路状态：链路连通/中断、链路开销<br>o 又称最短路径优先（SPF）选路<br>        使用Dijkstra算法来计算最短路径<br>o 路由器发现自己和<strong>邻居节点</strong>的<strong>链路状态及开销</strong><br>o 路由器之间通过<strong>交换路由信息</strong>，构造出<strong>全网的拓扑结构</strong>，并计算出到其他节点的<strong>最短路径</strong><br>        与谁交换：网络中的<strong>所有节点</strong><br>        交换什么：一个节点到各<strong>邻居节点的链路开销</strong><br>        何时交换：网络初启或链路状态<strong>变化时</strong></p>
<h5 id="链路状态算法（-L-S-）"><a href="#链路状态算法（-L-S-）" class="headerlink" title="链路状态算法（ L-S ）"></a>链路状态算法（ L-S ）</h5><p>基本思想：<br>o 发现它的邻接节点，并得到其网络地址<br>o 测量它到各邻接节点的延迟或开销<br>o 组装一个分组以告知它刚知道的所有信息<br>o 将这个分组发给所有其他路由器<br>o 计算到每个其他路由器的最短路径</p>
<h5 id="发现邻接节点"><a href="#发现邻接节点" class="headerlink" title="发现邻接节点"></a>发现邻接节点</h5><p>当一个路由器启动后，向每个<strong>点到点</strong>线路发送 HELLO分组（携带自己的网络地址），另一端的路由器发送回来应答，通报其网络地址</p>
<h5 id="测量线路开销"><a href="#测量线路开销" class="headerlink" title="测量线路开销"></a>测量线路开销</h5><p>发送一个ECHO分组要求对方<strong>立即响应</strong>，通过测量RTT，再除以2，发送方就可以得到一个延迟估计值</p>
<p>如果要更精确，可以重复这一过程，取其平均值</p>
<h5 id="构造链路状态包（LSP）"><a href="#构造链路状态包（LSP）" class="headerlink" title="构造链路状态包（LSP）"></a>构造链路状态包（LSP）</h5><p>包含：源节点到其所有邻居节点（路由器）的线路开销测量值（即时延）</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502105948771.png" class title="image-20230502105948771">

<h5 id="发布链路状态分组"><a href="#发布链路状态分组" class="headerlink" title="发布链路状态分组"></a>发布链路状态分组</h5><p>用<strong>洪泛法</strong>向所有节点发布LSP，保证每个节点都能收到。<br>o 存在问题：<br>        n 对于重复的LSP，路由器使用序号判断哪个LSP最新<br>        n 如果序号循环使用，就会发生重复<br>        n 如果一个路由器重启，序号将从0开始重新计数，但这些LSP会被当成过时包<br>        n 如果序号发生错误，则很多LSP将被看成过时包</p>
<h5 id="解决办法：序号-年龄"><a href="#解决办法：序号-年龄" class="headerlink" title="解决办法：序号+年龄"></a>解决办法：序号+年龄</h5><p>使用一个32位<strong>序号</strong>，即使每秒钟发送一个LSP包，137年才会循环一次<br>在每个LSP包中加一<strong>年龄</strong>字段（如初值为60），每秒钟将年龄值减1，为0后该包将被丢弃</p>
<h5 id="计算新路由"><a href="#计算新路由" class="headerlink" title="计算新路由"></a>计算新路由</h5><p> 用Dijkstra算法计算到每个节点的路由</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230502110124599.png" class title="image-20230502110124599">

<h5 id="L-S路由算法的优缺点"><a href="#L-S路由算法的优缺点" class="headerlink" title="L-S路由算法的优缺点"></a>L-S路由算法的优缺点</h5><p>LSR的优点<br>    n <strong>路由信息的一致性好</strong>，坏消息也一样传播得快<br>    n 状态分组的长度较短，仅包含到邻接点的距离、序号和年龄等，与网络规模关系不大，传输所耗用的网络带宽不大，此外，状态分组的扩散，由于年龄参数的设定，不会无限制扩散，所以可适用于大型网络</p>
<p>LSR的缺点<br>    n 每个路由器需要有<strong>较大的存储空间</strong>，用以存储所收到的每一个节点的链路状态分组<br>    n 计算工作量大，每次都必须计算最短路径</p>
<h2 id="因特网的网络层协议"><a href="#因特网的网络层协议" class="headerlink" title="因特网的网络层协议"></a>因特网的网络层协议</h2><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>给每个连接在因特网上的主机（或路由器）的 网络接口分配的全世界范围内<strong>唯一的 32 位</strong>标 识符 </p>
<p>每个连接到网络的接口（如网卡）都有一个IP 地址<br>        笔记本电脑的无线网卡和有线网卡各有一个IP地址</p>
<h4 id="IP地址构成"><a href="#IP地址构成" class="headerlink" title="IP地址构成"></a>IP地址构成</h4><p><strong>网络号</strong>net-id +<strong>主机号</strong>host-id<br>        n 网络号标识主机/路由器所连接到的网络，<br>        n 主机号标识该主机/路由器<br><strong>IP 地址 ::= { &lt;网络号&gt;, &lt;主机号&gt;}</strong></p>
<p>地址划分有两类<br>n 分类编址：<br>        Ø 单播地址分为A、B、C三类<br>        Ø 网络号和主机号所占的比特个数不同<br>n 无类别编址</p>
<h5 id="分类地址"><a href="#分类地址" class="headerlink" title="分类地址"></a>分类地址</h5><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230503140645161.png" class title="image-20230503140645161">

<h5 id="点分十进制记法"><a href="#点分十进制记法" class="headerlink" title="点分十进制记法"></a>点分十进制记法</h5><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230503140725194.png" class title="image-20230503140725194">

<h5 id="各类网络的地址空间大小"><a href="#各类网络的地址空间大小" class="headerlink" title="各类网络的地址空间大小"></a>各类网络的地址空间大小</h5><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230503140808801.png" class title="image-20230503140808801">

<h5 id="IP-地址的一些重要特点"><a href="#IP-地址的一些重要特点" class="headerlink" title="IP 地址的一些重要特点"></a>IP 地址的一些重要特点</h5><p>o IP 地址分网络号和主机号两个等级<br>    n 地址管理机构（全球ICANN、我国CNNIC）在分配IP地址时只分配网络号，而主机号则由得到该网络号的单位自行分配，方便 IP 地址的管理<br>    n 路由器<strong>仅根据目的主机的网络号来转发IP包</strong>（而不考虑目的主机号），减小了路由表中的表项数，从而减小了路由表所占的存储空间，且加快了查找速度<br>o IP地址用于标识一个网络接口<br>    n 一台路由器（主机）连接到两个网络时，具有两个不同的IP地址，其网络号不同</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230503141446172.png" class title="image-20230503141446172">

<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230503141453058.png" class title="image-20230503141453058">

<h5 id="特殊的IP地址"><a href="#特殊的IP地址" class="headerlink" title="特殊的IP地址"></a>特殊的IP地址</h5><img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230503141517265.png" class title="image-20230503141517265">

<h4 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h4><p>o 属于一个<strong>单位内部的事情</strong>，对外仍然是一个网络<br>o 从主机号<strong>借用</strong>高若干位作为<strong>子网号</strong> subnet-id，主机号<br>host-id 相应减少了若干位<br><code>IP地址 ::= {&lt;网络号&gt;, &lt;子网号&gt;, &lt;主机号&gt;}</code><br>o 从外网发给本网某个主机的IP包，仍然根据其<strong>目的网络地址</strong>，先找到连接本网的路由器；路由器收到 IP包后，再按<strong>目的网络地址</strong>转发到目的子网。<br>    n 最后交付给目的主机</p>
<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230503141709747.png" class title="image-20230503141709747">

<img lazyload src="/images/loading.svg" data-src="/2023/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230503141718301.png" class title="image-20230503141718301">

<h4 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h4><p>o 从一个 IP 包的包头<strong>无法判断</strong>源主机或目的主机所在网络的网络地址<br>o 使用<strong>子网掩码</strong>(subnet mask)可以找出 IP 地址中的网络号部分<br>o 子网掩码：特殊IP地址，网络号（包括子网号）部分为全1，主机号部分为全0<br>        n 功能：获得网络地址<br>        n 方法：将网内的任一个IP地址与子网掩码进行“按位与”操作，即得到该网络的地址</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理笔记</title>
    <url>/2024/01/10/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="2-词法分析"><a href="#2-词法分析" class="headerlink" title="2 词法分析"></a>2 词法分析</h1><h2 id="词法单元，正则表达式书写，有穷自动机构造"><a href="#词法单元，正则表达式书写，有穷自动机构造" class="headerlink" title="词法单元，正则表达式书写，有穷自动机构造"></a><font color="green">词法单元，正则表达式书写，有穷自动机构造</font></h2><h2 id="标记Token"><a href="#标记Token" class="headerlink" title="标记Token"></a>标记Token</h2><p>标记是一对 &lt;标记名，属性值&gt;</p>
<p>A &#x3D; B * 2：<br>&lt;id, pointer to symbol-table entry for A&gt;<br><assign_op><br>&lt;id, pointer to symbol-table entry for B&gt; <mult_op> &lt;number, integer value 2&gt;</mult_op></assign_op></p>
<p>• 词法分析器无法继续的情况：没有一个词块模式与剩余输入的任何前缀相匹配，Example: int <strong>3a</strong> &#x3D; a * 3</p>
<h2 id="字符串相关术语"><a href="#字符串相关术语" class="headerlink" title="字符串相关术语"></a>字符串相关术语</h2><p>• 字母表（Alphabet）：任何有限的符号集合<br>    ■ 符号示例：字母、数字和标点符号<br>    ■ 字母示例：{1，0}，ASCII，Unicode<br>• 字母表上的字符串（串）是从字母表中抽取的符号的有限序列字符串 s 的长度（用 |s| 表示）是指有多少个<br>• 符号在 s 中的出现次数（即基数）<br>    ■ 空串（Empty string）：长度为 0 的字符串，ε</p>
<p>▪ 字符串 s 的前缀（前缀）：从 s 的末尾去掉 0 个或多个符号后得到的任何字符串<br>▪ 适当的前缀（真前缀）：不是空且不为整个字符串<br>▪ 后缀（Suffix）：从 s 开头去掉 0 个或更多符号后得到的字符串<br>▪ 正后缀（真后缀）：不是空且不为字符串本身</p>
<p>子串：从 s 中去掉任何前缀和后缀后得到的任何字符串<br>真子串：不为空且不等于字符串<br>子序列：从 s 中删除 0 个或多个不一定连续的符号后形成的字符串</p>


<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li><p>ε是一个RE，L(ε) &#x3D; {ε}</p>
</li>
<li><p>如果 a∈∑，则a是一个RE，L(a) &#x3D; {a}</p>
</li>
<li><p>假设 r和 s都是 RE，表示的语言分别是 L(r)和L(s)，则</p>
<ul>
<li>r|s 是一个RE，L( r|s ) &#x3D; L(r)∪L(s) </li>
<li>rs是一个RE，L( rs ) &#x3D; L(r) L(s) </li>
<li>r*是一个RE，L( r* )&#x3D; (L(r))* </li>
<li>(r) 是一个RE，L( (r) ) &#x3D; L(r)</li>
</ul>
</li>
</ul>
<p>运算的优先级：<font color="red">*<strong>、连接、|</strong></font></p>
<p>根据规则，regexps 通常包含不必要的括号对。如果我们采用约定俗成的规则，就可以省去一些括号：<br>优先级：闭合* &gt; 连接 &gt; 联合 | |<br>关联性：所有三个运算符都是左关联运算，即从左侧开始分组运算，例如，<br>a | b | c 将被解释为 (a | b) | c<br>• 例如：(a) | ((b)*(c)) &#x3D; a | b*c</p>
<p>举例说明：假设 Σ &#x3D; {a, b}<br>a|b 表示语言 {a, b}<br>(a|b)(a|b) 表示 {aa, ab, ba, bb}<br>▪ a* 表示{空，, a, aa, aaa, …}。<br>▪ (a|b)* 表示由 0 个或多个 a 或 b 组成的所有字符串的集合：{空，a, b, aa, ab, ba, bb, aaa, …}。<br>▪ a|a* b 表示字符串 a 和所有由 0 个或多个 a 组成并以 b 结尾的字<br>符串：{a, b, ab, aab, aaab, …}。</p>
<h3 id="RE的代数定律"><a href="#RE的代数定律" class="headerlink" title="RE的代数定律"></a>RE的代数定律</h3><table>
<thead>
<tr>
<th>定律</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>r｜s &#x3D; s｜r</td>
<td>｜是可以交换的</td>
</tr>
<tr>
<td>r｜（ s｜t）&#x3D;（ r｜s ） ｜ t</td>
<td>｜是可结合的</td>
</tr>
<tr>
<td>r（ s t ）&#x3D;（r s ） t</td>
<td>连接是可结合的</td>
</tr>
<tr>
<td>r（ s｜t ）&#x3D; rs｜rt ;（ s｜t ）r&#x3D; s r｜tr</td>
<td>连接对｜是可分配的</td>
</tr>
<tr>
<td>εr &#x3D; rε &#x3D; r</td>
<td>ε 是连接的单位元</td>
</tr>
<tr>
<td>r* &#x3D; （r｜ε）*</td>
<td>闭包中一定包含 ε</td>
</tr>
<tr>
<td>r **&#x3D;r *</td>
<td>*具有幂等性</td>
</tr>
</tbody></table>
<h2 id="正则定义"><a href="#正则定义" class="headerlink" title="正则定义"></a>正则定义</h2><p>正则定义是具有如下形式的定义序列：<br>            d1→r1<br>            d2→r2<br>             …<br>            dn→rn</p>
<p>​     其中：</p>
<ul>
<li>每个di都是一个新符号，它们都不在字母表 Σ中，而且各不相同</li>
<li>每个ri是字母表 Σ∪{d1 ,d2 , … ,di-1}上的正则表达式</li>
</ul>
<h2 id="有穷自动机"><a href="#有穷自动机" class="headerlink" title="有穷自动机"></a>有穷自动机</h2><h3 id="FA的表示"><a href="#FA的表示" class="headerlink" title="FA的表示"></a>FA的表示</h3><ul>
<li><strong>转换图</strong> (Transition Graph)<ul>
<li>结点：FA的状态<ul>
<li>初始状态（开始状态）：只有一个，由start箭头指向</li>
<li>终止状态（接收状态）：可以有多个，用双圈表示</li>
</ul>
</li>
<li>带标记的有向边：如果对于输入a，存在一个从状态p到状 态q的转换，就在p、q之间画一条有向边，并标记上a</li>
</ul>
</li>
</ul>


<p>给定输入串x，如果存在一个对应于串x的从<strong>初始状态</strong>到某个<strong>终止状态</strong>的转换序列，则称串x被该FA接收</p>
<p>由一个有穷自动机M接收的所有串构成的集合称为是该<strong>FA定义（或接收）的语言，记为L(M)</strong></p>
<p>上图的自动机：L(M) &#x3D;所有以abb结尾的字母表{a, b}上的串的集合</p>
<h3 id="最长子串匹配原则-Longest-String-Matching-Principle"><a href="#最长子串匹配原则-Longest-String-Matching-Principle" class="headerlink" title="最长子串匹配原则(Longest String Matching Principle)"></a>最长子串匹配原则(Longest String Matching Principle)</h3><p>当输入串的多个前缀与一个或多个模式匹配时，总是选择<strong>最长的前缀</strong>进行匹配</p>
<h2 id="有穷自动机的分类"><a href="#有穷自动机的分类" class="headerlink" title="有穷自动机的分类"></a>有穷自动机的分类</h2><p>确定的FA (Deterministic finite automata, DFA)<br>非确定的FA (Nondeterministic finite automata, NFA)</p>
<h3 id="DFA：确定的有穷自动机"><a href="#DFA：确定的有穷自动机" class="headerlink" title="DFA：确定的有穷自动机"></a>DFA：确定的有穷自动机</h3><p>M &#x3D; ( S，Σ ，δ，s0，F )</p>
<p>S：有穷状态集<br>Σ：输入字母表，即输入符号集合。假设ε不是 Σ中的元素<br>δ：将S×Σ映射到S的转换函数。 ∀s∈S, a∈Σ, δ(s,a)表示从状态s出发，沿着标记为a的边所能到达的状态。<br>s0：开始状态 (或初始状态)，s0∈ S<br>F：接收状态（或终止状态）集合，F⊆ S</p>


<h3 id="NFA：非确定的有穷自动机"><a href="#NFA：非确定的有穷自动机" class="headerlink" title="NFA：非确定的有穷自动机"></a>NFA：非确定的有穷自动机</h3><p>M &#x3D; ( S，Σ ，δ，s0，F )<br>S：有穷状态集<br>Σ：输入符号集合，即输入字母表。假设ε 不是Σ中的元素<br>δ：将S×Σ映射到<strong>2^S^</strong>的转换函数。∀s∈S, a∈Σ, δ(s,a)表示从状态s出发，沿着标记为a的边所能到达的状态<strong>集合</strong><br>s0：开始状态 (或初始状态)，s0∈ S<br>F：接收状态（或终止状态）集合，F⊆ S</p>




<p><font color="red">正则文法 ⇔ 正则表达式 ⇔ FA</font></p>
<h3 id="带有“ε-边”的-NFA"><a href="#带有“ε-边”的-NFA" class="headerlink" title="带有“ε-边”的 NFA"></a>带有“ε-边”的 NFA</h3><p>M &#x3D; ( S，Σ ，δ，s0，F )<br>S：有穷状态集<br>Σ：输入符号集合，即输入字母表。假设ε不是Σ中的元素<br>δ：将S×(Σ<strong>∪{ε}</strong>)映射到2^S^的转换函数。∀s∈S, a∈Σ<strong>∪{ε}</strong>, δ(s,a)表示从状态s出发，沿着标记为a的边所能到达的状态集合<br>s0：开始状态 (或初始状态)，s0∈ S<br>F：接收状态（或终止状态）集合，F⊆ S</p>


<p><strong>带有和不带有“ε-边”的 NFA 是等价的</strong></p>
<h2 id="从正则表达式到有穷自动机"><a href="#从正则表达式到有穷自动机" class="headerlink" title="从正则表达式到有穷自动机"></a>从正则表达式到有穷自动机</h2><h3 id="根据RE构造NFA"><a href="#根据RE构造NFA" class="headerlink" title="根据RE构造NFA"></a>根据RE构造NFA</h3>



<h3 id="汤普森构造法"><a href="#汤普森构造法" class="headerlink" title="汤普森构造法"></a>汤普森构造法</h3><p><img lazyload src="/images/loading.svg" data-src="/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231204215132666.png" alt="image-20231204215132666"><img lazyload src="/images/loading.svg" data-src="/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231130164816761.png" alt="image-20231130164816761"><img lazyload src="/images/loading.svg" data-src="/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231130164838503.png" alt="image-20231130164838503"><img lazyload src="/images/loading.svg" data-src="/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231130164856288.png" alt="image-20231130164856288"><img lazyload src="/images/loading.svg" data-src="/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231130164920117.png" alt="image-20231130164920117"><img lazyload src="/images/loading.svg" data-src="/%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231130164935733.png" alt="image-20231130164935733"></p>
<h3 id="从NFA到DFA——子集构造法"><a href="#从NFA到DFA——子集构造法" class="headerlink" title="从NFA到DFA——子集构造法"></a>从NFA到DFA——子集构造法</h3><p><strong>省流：合并相同状态，然后构建一个新的自动机</strong></p>
<p>▪ 见解：构建的 DFA 的每个状态都对应一组 NFA 状态<br>• 在读取输入 a a12 …an 之后，DFA 所处的状态与 NFA 从起始状态按照标有 a a12 …a 的路径可以到达的状态集相对应。<br>▪ 算法 “并行 “模拟 NFA 在给定输入字符串上可能做出的所有动作</p>
<p>• DFA 状态 # 有可能是 NFA 状态 # 的指数级（最坏情况）每个 DFA 状态对应一个 NFA 状态子集<br>• 然而，对于真实语言来说，NFA 和 DFA 的状态数大致相同，不会出现指数行为。</p>
<p>• 算法中使用的运算：<br>    ▪ 𝜖-closure(s)：仅在𝜖-transitions 上可从 NFA 状态 s 到达的 NFA 状态集合<br>    ▪ 𝜖-closure(T)：仅在𝜖-transitions 上可从集合 T 中的某个 NFA 状态 s 到达的 NFA 状态的集合<br>move（T，a）：输入符号 a 可以从 T 中的某个状态 s 过渡到的 NFA 状态集合</p>
<p>Example：</p>
<p>A: 𝜖-closure(0) &#x3D; {0, 1, 2, 4, 7}<br>B: Dtran[A, a] &#x3D; 𝜖-closure({3, 8}) &#x3D; {1, 2, 3, 4, 6, 7, 8}<br>C: Dtran[A, b] &#x3D; 𝜖-closure({5}) &#x3D; {1, 2, 4, 5, 6, 7}<br>D: Dtran[B, b] &#x3D; 𝜖-closure({5, 9}) &#x3D; {1, 2, 4, 5, 6, 7, 9}<br>…</p>


<h2 id="有穷自动机的构造步骤"><a href="#有穷自动机的构造步骤" class="headerlink" title="有穷自动机的构造步骤"></a>有穷自动机的构造步骤</h2><p> <a href="%E4%BD%9C%E4%B8%9A%5Cassignment2%5Cassignment2.pdf">assignment2.pdf</a>  <a href="%E4%BD%9C%E4%B8%9A%5Cassignment2%5C2021211999_assignment2.pdf">2021211999_assignment2.pdf</a> </p>
<p>**(a|b)<em>a(a|b)(a|b)</em>*</p>
<h3 id="NFA"><a href="#NFA" class="headerlink" title="NFA"></a>NFA</h3>



<h3 id="DFA"><a href="#DFA" class="headerlink" title="DFA"></a>DFA</h3>

<h1 id="3-语法分析"><a href="#3-语法分析" class="headerlink" title="3 语法分析"></a>3 语法分析</h1><h2 id="自顶向下语法分析：构造语法分析树，构造FIRST和FOLLOW集合，进行LL-1-递归下降分析，设计预测分析程序"><a href="#自顶向下语法分析：构造语法分析树，构造FIRST和FOLLOW集合，进行LL-1-递归下降分析，设计预测分析程序" class="headerlink" title="自顶向下语法分析：构造语法分析树，构造FIRST和FOLLOW集合，进行LL(1)递归下降分析，设计预测分析程序"></a><font color="green">自顶向下语法分析：构造语法分析树，构造FIRST和FOLLOW集合，进行LL(1)递归下降分析，设计预测分析程序</font></h2><h2 id="自底向上语法分析：LR-0-，SLR，LR-1-，LALR"><a href="#自底向上语法分析：LR-0-，SLR，LR-1-，LALR" class="headerlink" title="自底向上语法分析：LR(0)，SLR，LR(1)，LALR"></a><font color="green">自底向上语法分析：LR(0)，SLR，LR(1)，LALR</font></h2><h2 id="推导和语法分析树"><a href="#推导和语法分析树" class="headerlink" title="推导和语法分析树"></a>推导和语法分析树</h2><p>从开始符号开始，使用产生式重写非终结符，直到只剩下终结符为止</p>
<p>⇒ 意思是“一步到位”<br>⇒ ∗ 意思是“以零个或多个步骤推导” 𝛼 ⇒∗ 𝛼 适用于任何字符串𝛼<br>⇒ ‘’&#x2F; ⇒ + 意思是“以一个或多个步骤推导”</p>
<h3 id="最左推导"><a href="#最左推导" class="headerlink" title="最左推导"></a>最左推导</h3><p>在最左推导中，总是选择每个句型中最左边的非终结符来替换</p>
<img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231012001200688.png" alt="image-20231012001200688" style="zoom: 33%;">

<p>最右推导就是从右边开始</p>
<p>术语<br>• 如果S⇒ ∗ α, 其中S是语法G的开始符号，我们说α是G文法的句型<br>   · 文法的句型可以同时包含终结符号和非终结符号，并且可以为空<br>   · 示例𝐸 ⇒ −𝐸 ⇒ −(𝐸)⇒ −(𝐸+𝐸) ⇒ −(𝐢𝐝+𝐸) ⇒ −(𝐢𝐝 + 𝐢𝐝)  这里所有的语法符号串都是文法的句型<br>• 一个G的句子是一个没有非终结符的文法句型<br>   · 在上面的例子中，只有最后一个字符串−(𝐢𝐝 + 𝐢𝐝)是一个句子<br>•语法产生的语言是它的一组句子</p>
<h3 id="语法分析树"><a href="#语法分析树" class="headerlink" title="语法分析树"></a>语法分析树</h3><p>语法分析树是一种推导的图形表示，它过滤掉了产生式应用的顺序<br>  · 根结点是文法的开始符号<br>  · 每个叶子结点由终结符或𝜖标记<br>  · 每个内部结点由非终结符标记<br>  · 每个内部结点代表产生式的应用<br>    · 内部节点用产生式的头部中的非终结符进行标记；<br>    · 子节点由产生式主体中的符号从左到右进行标记</p>
<p>构造示例：</p>


<p>如果一个语法为某个句子生成了多个语法分析树，则它具有<strong>二义性</strong></p>
<h2 id="语法设计"><a href="#语法设计" class="headerlink" title="语法设计"></a>语法设计</h2><h3 id="CFG与正则表达式比较"><a href="#CFG与正则表达式比较" class="headerlink" title="CFG与正则表达式比较"></a>CFG与正则表达式比较</h3><p>CFG比正则表达式更具表达能力<br>  · 可以用正则表达式描述的每个构造都可以用语法描述，但反之不成立<br>  · 每个正则语言都是上下文无关的语言，但反之不成立<br>示例：𝐿 &#x3D;{𝑎𝑛𝑏𝑛 | 𝑛&gt; 0}<br>语言L可以用CFG：𝑆 → 𝑎𝑆𝑏 | 𝑎𝑏 来描述<br>L不能用正则表达式来描述。换句话说，我们不能构造一个DFA来接受L</p>
<h3 id="消除二义性"><a href="#消除二义性" class="headerlink" title="消除二义性"></a>消除二义性</h3><p>接近原则：用最接近的未匹配的then匹配else</p>
<h3 id="消除左递归"><a href="#消除左递归" class="headerlink" title="消除左递归"></a>消除左递归</h3><p>如果语法中存在一个非终结符A，使得某个字符𝛼有相关的产生式𝐴 ⇒+ 𝐴𝛼 ，则该语法为左递归语法</p>
<p>消除左递归就是把他变成右递归</p>
<p>简单语法：𝐴 → 𝐴𝛼 | 𝛽 它生成以符号𝛽开头的句子，后面跟零个或更多的𝛼’s</p>
<p>将语法替换为：</p>
<p>𝐴 → 𝛽A’<br>A’ → 𝛼A’ | 𝜖</p>
<p>消除立即左递归</p>
<p>𝐴 → 𝐴𝛼1|…|𝐴𝛼𝑚|𝛽1|… | 𝛽𝑛</p>
<p>将语法替换为：</p>
<p>𝐴 →𝛽1A’ | … |𝛽nA’ </p>
<p>A’ → 𝛼1A’ | … | 𝛼mA’  |𝜖1</p>




<h3 id="提取左公因子"><a href="#提取左公因子" class="headerlink" title="提取左公因子"></a>提取左公因子</h3>



<h3 id="自顶向下语法分析树构建"><a href="#自顶向下语法分析树构建" class="headerlink" title="自顶向下语法分析树构建"></a>自顶向下语法分析树构建</h3>

<h2 id="FIRST集合和FOLLOW集合"><a href="#FIRST集合和FOLLOW集合" class="headerlink" title="FIRST集合和FOLLOW集合"></a>FIRST集合和FOLLOW集合</h2><h3 id="FIRST集合"><a href="#FIRST集合" class="headerlink" title="FIRST集合"></a>FIRST集合</h3><p>FIRST集合，能够在开头出现的<strong>终结符</strong>构成的集合，如<strong>S</strong>-&gt;aA|bA  FIRST(S)&#x3D;{a,b}</p>
<p>令G是一个不含左递归的文法，对G的所有非终结符的每个候选α定义它的终结首符集FIRST($\alpha$)为：<br>𝐹𝐼𝑅𝑆𝑇(𝛼)&#x3D;{𝑎│𝛼⇒∗ 𝑎…, 𝑎∈$𝑉_𝑇$ }<br>特别是，若𝛼⇒∗ 𝜀，则规定𝜀∈𝐹𝐼𝑅𝑆𝑇(𝛼)。</p>
<h3 id="FOLLOW集合"><a href="#FOLLOW集合" class="headerlink" title="FOLLOW集合"></a>FOLLOW集合</h3><p>FOLLOW集合，能够跟在非终结符后面的终结符构成的集合，即把终结符换成𝜀后后面还能出现终结符，如S-&gt;…<strong>A</strong>a|…<strong>A</strong>b|𝜀 FOLLOW(A)&#x3D;{a,b}</p>
<p>假定S是文法G的开始符号，对于G的任何非终结符A，我们定义A的FOLLOW集合<br>𝐹𝑂𝐿𝐿𝑂𝑊(𝐴)&#x3D;{𝑎│𝑆⇒∗…𝐴𝑎…, 𝑎∈$𝑉_𝑇$ }<br>特别是，若𝑆⇒∗…𝐴，则规定#∈𝐹𝑂𝐿𝐿𝑂𝑊(𝐴)</p>
<h2 id="LL-1-文法"><a href="#LL-1-文法" class="headerlink" title="LL(1)文法"></a>LL(1)文法</h2><ol>
<li><strong>文法不含左递归</strong></li>
<li><strong>对于文法中每一个非终结符A的各个产生式的候选首符集两两不相交。即，若</strong></li>
</ol>
<p>$$<br>\begin{align}\mathbf{A}{\stackrel{}{\to}}\alpha_{1}|\alpha_{2}|\ldots|\alpha_{n}\end{align}<br>$$</p>
<p>  <strong>则 $FIRST(α_i)∩FIRST(α_j)&#x3D;φ (i≠j)$</strong></p>
<ol start="3">
<li><strong>对文法中的每个非终结符A，若它存在某个候选首符集包含𝜀，则$FIRST(A)∩FOLLOW(A)&#x3D;φ$，i&#x3D;1,2,…,n</strong></li>
</ol>
<p>如果一个文法G满足以上条件，则称该文法G为LL(1)文法。</p>
<p>PPT上的定义：</p>
<p>​	语法𝑮 是LL(1)当且仅当对于任意两个不同的产生式𝐴 → 𝛼 | 𝛽, 以下条件成立：</p>
<p>​	1.不存在终结符𝑎 使得𝛼 和𝛽 都可以推导以𝑎开头的字符串</p>
<p>​	2.𝛼 和𝛽 中最多只有一个可以推导空字符串</p>
<p>​	3.如果𝛽 ⇒* 𝜖, 那么𝛼 不能推导出任何以FOLLOW(𝐴)中某个终结符开头的字符串，反之亦然</p>
<h3 id="FIRST集合的构造"><a href="#FIRST集合的构造" class="headerlink" title="FIRST集合的构造"></a>FIRST集合的构造</h3><h4 id="构造每个文法符号的FIRST集合"><a href="#构造每个文法符号的FIRST集合" class="headerlink" title="构造每个文法符号的FIRST集合"></a><font color="red">构造<u>每个文法符号</u>的FIRST集合</font></h4><p><strong>对每一X∈$V_T$∪$V_N$，连续使用下面的规则，直至每个集合FIRST不再增大为止：</strong></p>
<ol>
<li>（终结符）<strong>若X∈$V_T$，则FIRST(X)＝{X}。</strong></li>
<li>（终结符开头）<strong>若X∈$V_N$，且有产生式X→a…，则把a加入到FIRST(X)中；若X→𝜀也是一条产生式，则把𝜀也加到FIRST(X)中。</strong></li>
<li>（非终结符开头）</li>
</ol>
<ul>
<li><p><strong>若X→Y…是一个产生式且Y∈$V_N$，则把FIRST(Y)中的所有非𝜀-元素都加到FIRST(X)中；</strong></p>
</li>
<li><p><strong>若X→$Y_1Y_2…Y_{i-1}Y_i…Y_k$是一个产生式，$Y_1，…，Y_{i-1}$都是非终结符，</strong></p>
<ul>
<li><strong>对于任何j，1≤j≤i-1，FIRST($Y_j$)都含有𝜀(即$Y_1…Y_{i-1}$⇒∗𝜀)， 则把FIRST($Y_i$)中的所有非𝜀-元素都加到FIRST(X)中</strong>（也就是说，如果有一个非终结符前面的非终结符的FIRST集合不含𝜀，那么后面的非终结符不需要再验证加入FIRST集合了，如T-&gt;FT’，F不含𝜀，则T’不需要看了）</li>
<li><strong>若所有的FIRST($Y_j$)均含有𝜀（或者𝜀本身就是一个产生式），j＝1，2，…，k，则把𝜀加到FIRST(X)中。</strong></li>
</ul>
</li>
</ul>
<p>示例：<a class="link" href="https://www.bilibili.com/video/BV1dJ411D7w6/?p=72&spm_id_from=pageDriver&vd_source=c75b11f1c6d9b809759edcc17586cf0d">FIRST集合的构造示例 2:05 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="FOLLOW集合的构造"><a href="#FOLLOW集合的构造" class="headerlink" title="FOLLOW集合的构造"></a>FOLLOW集合的构造</h3><h4 id="构造每个非终结符的的FOLLOW集合"><a href="#构造每个非终结符的的FOLLOW集合" class="headerlink" title="构造每个非终结符的的FOLLOW集合"></a><font color="red">构造<u>每个非终结符的</u>的FOLLOW集合</font></h4><p><strong>对于文法G的每个<font color="red">非终结符</font>A构造FOLLOW(A)的办法是，连续使用下面的规则，直至每个FOLLOW不再增大为止（注意一个产生式可以对应多种模式）：</strong></p>
<ol>
<li><strong>对于文法的开始符号S，置$于FOLLOW(S)中；</strong></li>
<li>(FIRST($\beta$)的可以FOLLOW(B))<strong>若A→$\alpha B\beta$是一个产生式，则把FIRST($\beta$)\{𝜀}加至FOLLOW(<font color="red">B</font>)中；</strong></li>
<li>(FOLLOW(A)的可以FOLLOW(B))<strong>若A→$\alpha$B是一个产生式，或A→$\alpha B\beta$是一个产生式而($\beta$⇒∗𝜀 (即𝜀∈FIRST($\beta$)，最右边的FIRST有𝜀的还FOLLOW(A)可以FOLLOW(中间))，则把<u>FOLLOW(A)</u>加至FOLLOW(<font color="red">B</font>)中</strong></li>
</ol>
<p>示例：<a class="link" href="https://www.bilibili.com/video/BV1dJ411D7w6/?p=72&spm_id_from=pageDriver&vd_source=c75b11f1c6d9b809759edcc17586cf0d">FOLLOW集合的构造示例 10:14 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>


<h2 id="LL-1-分析法"><a href="#LL-1-分析法" class="headerlink" title="LL(1)分析法"></a>LL(1)分析法</h2><p>假设要用非终结符A进行匹配，面临的输入符号为a，A的所有产生式为$\begin{align}\mathbf{A}{\stackrel{}{\to}}\alpha_{1}|\alpha_{2}|\ldots|\alpha_{n}\end{align}$</p>
<ol>
<li>若a∈FIRST($α_i$)，则指派$α_i$执行匹配任务；</li>
<li>若a不属于任何一个候选首符集，则：<br>(1) 若𝜀属于某个FIRST($α_i$)且 a∈FOLLOW(A)， 则让A与𝜀自动匹配。<br>(2) 否则，a的出现是一种语法错误。</li>
</ol>
<h2 id="递归下降分析器"><a href="#递归下降分析器" class="headerlink" title="递归下降分析器"></a>递归下降分析器</h2><p>分析程序由一组子程序组成， 对每一语法单位(非终结符)构造一个相应的子程序，识别对应的语法单位<br>通过子程序间的相互调用实现对输入串的识别，例如，A → B c D<br>文法的定义通常是递归的，通常具有递归结构</p>
<p>定义全局过程和变量</p>
<ul>
<li>ADVANCE，把输入串指示器IP指向下一个输入符号，即读入一个单词符号</li>
<li>SYM，IP当前所指的输入符号</li>
<li>ERROR，出错处理子程序</li>
</ul>
<p>A→TE’ | BC | 𝜀    对应的递归下降子程序为</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">PROCEDURE  A；</span><br><span class="line">BEGIN</span><br><span class="line">	IF  SYM ∈ FIRST(TE’) THEN</span><br><span class="line">           BEGIN  T；E<span class="number">&#x27;</span> END</span><br><span class="line">	ELSE IF  SYM ∈ FIRST(BC) THEN</span><br><span class="line">		     BEGIN  B; C  END</span><br><span class="line">    ELSE IF  SYM ∉ FOLLOW(A) THEN</span><br><span class="line">        ERROR</span><br><span class="line">END；</span><br></pre></td></tr></table></figure></div>

<p>E’→+TE’ | 𝜀   简化的形式</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">PROCEDURE  E<span class="number">&#x27;</span>；</span><br><span class="line">IF SYM=‘+’ THEN</span><br><span class="line">BEGIN	</span><br><span class="line">	ADVANCE；</span><br><span class="line">          T；E<span class="number">&#x27;</span>	</span><br><span class="line">END</span><br></pre></td></tr></table></figure></div>

<h2 id="扩充的巴克斯范式"><a href="#扩充的巴克斯范式" class="headerlink" title="扩充的巴克斯范式"></a>扩充的巴克斯范式</h2><p>在元符号“→”或“::&#x3D;”和“|”的基础上，扩充几个元语言符号：<br>用花括号{α}表示闭包运算α*。<br>用表示$\begin{align}{\alpha}<em>{0}^{n}\end{align}$可任意重复0次至n次。<br>用方括号[α]表示$\begin{align}{\alpha}</em>{0}^{1}\end{align}$，即表示α的出现可有可无(等价于α|𝜀)。</p>
<h2 id="预测分析"><a href="#预测分析" class="headerlink" title="预测分析"></a>预测分析</h2><h3 id="预测分析程序构成"><a href="#预测分析程序构成" class="headerlink" title="预测分析程序构成"></a>预测分析程序构成</h3><p>总控程序，根据现行栈顶符号和当前输入符号，执行动作<br>分析表 M[A，a]矩阵，A ∈ VN ，a ∈ VT 是终结符或‘$’<br>分析栈 STACK  用于存放文法符号</p>


<h3 id="预测分析过程"><a href="#预测分析过程" class="headerlink" title="预测分析过程"></a>预测分析过程</h3><p>总控程序根据当前栈顶符号X和输入符号a，执行下列三动作之一：</p>
<ol>
<li>若X＝a＝‘$’，则宣布分析成功，停止分析。</li>
<li>若X＝a ≠‘$’，则把X从STACK栈顶逐出，让a指向下一个输入符号。</li>
<li>若X是一个非终结符，则查看分析表M。<br>若M[X，a]中存放着关于X的一个产生式，把X逐出STACK栈顶，把产生式的右部符号串按<strong>反序</strong>一一推进STACK栈(若右部符号为𝜀，则意味不推什么东西进栈)。<br>若M[X，a]中存放着“出错标志”，则调用出错诊察程序ERROR。</li>
</ol>
<h3 id="总控程序实现"><a href="#总控程序实现" class="headerlink" title="总控程序实现"></a>总控程序实现</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">  BEGIN</span><br><span class="line">   首先把‘＃’然后把文法开始符号推进STACK栈；</span><br><span class="line">   把第一个输入符号读进a；</span><br><span class="line">   FLAG:=TRUE;</span><br><span class="line">   WHILE  FLAG  DO</span><br><span class="line">	BEGIN</span><br><span class="line">       把STACK栈顶符号上托出去并放在X中；</span><br><span class="line">       IF X∈VT THEN</span><br><span class="line">	        IF X= a  THEN 把下一输入符号读进a</span><br><span class="line">	                       ELSE   ERROR</span><br><span class="line">       ELSE IF X=‘#’ THEN</span><br><span class="line">	         IF X=a THEN FLAG:=FALSE </span><br><span class="line">                         ELSE ERROR</span><br><span class="line">       ELSE IF M[X,a]=&#123;X→X1X2…Xk&#125;THEN</span><br><span class="line">         	把Xk,Xk<span class="number">-1</span>,…,X1一一推进STACK栈</span><br><span class="line">	        <span class="comment">/* 若X1X2…Xk=𝜀，不推什么进栈 */</span></span><br><span class="line">       ELSE ERROR</span><br><span class="line">    END OF WHILE;</span><br><span class="line">STOP <span class="comment">/*分析成功，过程完毕*/</span></span><br><span class="line">END</span><br></pre></td></tr></table></figure></div>

<p>分析示例：[[9.1.3]–预测分析示例](<a class="link" href="https://www.bilibili.com/video/BV1dJ411D7w6?p=82&vd_source=c75b11f1c6d9b809759edcc17586cf0d">https://www.bilibili.com/video/BV1dJ411D7w6?p=82&amp;vd_source=c75b11f1c6d9b809759edcc17586cf0d <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</p>


<h3 id="分析表构造算法"><a href="#分析表构造算法" class="headerlink" title="分析表构造算法"></a>分析表构造算法</h3><p>构造G的分析表M[A，a]， 确定每个产生式A→$\alpha$在表中的位置</p>
<ol>
<li>对文法G的每个产生式A→$\alpha$执行第2步和第3步；</li>
<li>对<strong>每个终结符</strong>a ∈FIRST($\alpha$)，把A→$\alpha$加至M[A，a]中；</li>
<li>若𝜀∈FIRST($\alpha$)，则对任何b∈FOLLOW(A)把A→$\alpha$加至M[A，b]中。（如T-&gt;TE’如果T的FIRST集合中没有𝜀，则不需要继续考虑E’）</li>
<li>把所有无定义的M[A，a]标上“出错标志”。</li>
</ol>
<p>构造示例：<a class="link" href="https://www.bilibili.com/video/BV1dJ411D7w6?p=84&spm_id_from=pageDriver&vd_source=c75b11f1c6d9b809759edcc17586cf0d">[9.2.2]–构造预测分析表示例 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>






<h2 id="自下而上（自底向上）分析的基本思想"><a href="#自下而上（自底向上）分析的基本思想" class="headerlink" title="自下而上（自底向上）分析的基本思想"></a>自下而上（自底向上）分析的基本思想</h2><p>采用“<strong>移进－归约</strong>”思想进行自下而上分析</p>
<h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>用一个寄存符号的先进后出栈，把输入符号一个一个地移进到栈里，当栈顶形成某个产生式的候选式时，即把栈顶的这一部分替换成(归约为)该产生式的左部符号。</p>
<h2 id="短语"><a href="#短语" class="headerlink" title="短语"></a>短语</h2><p>定义：令G是一个文法，S是文法的开始符号，假定$\alpha\beta\delta$是文法G的一个句型，如果有<br>                S⇒∗αAδ 且 “A” ⇒+β<br>   则β称是句型$\alpha\beta\delta$相对于非终结符A的短语。<br>如果有A⇒β,则称β是句型$\alpha\beta\delta$相对于规则A→β的<strong>直接短语</strong>。</p>
<p>在一个句型对应的语法树中<br>以某非终结符为根的<strong>两代以上的子树的所有末端结点从左到右排列</strong>就是相对于该非终结符的一个<strong>短语</strong><br>如果子树只有两代，则该短语就是<strong>直接短语</strong></p>
<h2 id="算符文法"><a href="#算符文法" class="headerlink" title="算符文法"></a>算符文法</h2><p>一个文法，如果它的任一产生式的右部都不含两个相继(并列)的非终结符，即不含…QR…形式的产生式右部，则我们称该文法为算符文法。</p>
<p>约定：<br>a、b代表任意终结符<br>P、Q、R代表任意非终结符<br>‘…’代表由终结符和非终结符组成的任意序列，包括空字</p>
<h2 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h2><p>一个句型的<strong>最左直接短语</strong>称为该句型的<strong>句柄</strong></p>
<p><strong>最左两代子树</strong>末端就是句柄</p>


<h2 id="规范规约"><a href="#规范规约" class="headerlink" title="规范规约"></a>规范规约</h2><p>定义：假定$\alpha$是文法G的一个句子，我们称序列 $\alpha_n$， $\alpha_{n-1}$，… ，$\alpha_0$  是$\alpha$的一个规范归约，如果此序列满足：<br>    1.  $\alpha_n$&#x3D; $\alpha$<br>        2.  $\alpha_0$为文法的开始符号，即$\alpha_0$&#x3D;S<br>            3.  对任何i，0 ≤ i ≤ n， $\alpha_{i-1}$是从$\alpha_i$经把句柄替换成为相应产生式左部符号而得到的</p>
<h2 id="LR分析器"><a href="#LR分析器" class="headerlink" title="LR分析器"></a>LR分析器</h2><p>LR分析方法：把”历史”及”展望”综合抽象成状态；由栈顶的状态和现行的输入符号唯一确定每一步工作</p>


<h3 id="LR分析表"><a href="#LR分析表" class="headerlink" title="LR分析表"></a>LR分析表</h3><p>LR分析器的核心是一张分析表<br>ACTION[s，a]：当状态s面临输入符号a时，应采取什么动作.<br>GOTO[s，X]：状态s面对文法符号X时，下一状态是什么</p>
<h3 id="LR分析过程"><a href="#LR分析过程" class="headerlink" title="LR分析过程"></a><font color="red">LR分析过程</font></h3><p>​		($s_0 s_1 … s_m $, #$X_1 … X_m$ ，$a_ia_{i+1} … a_n$#)</p>
<p>分析器根据ACTION$(s_m , a_i)$确定下一步动作</p>
<ol>
<li>若ACTION(sm , ai)为移进，且s为下一状态，则格局变为:<br>    ($s_0 s_1 … s_ms $, #$X_1 … X_ma_i$ ，$a_ia_{i+1} … a_n$#)</li>
<li>若ACTION$(s_m , a_i)$为按A-&gt;$\beta$归约，格局变为:<br>    ($s_0 s_1 … s_ms $, #$X_1 … X_mA$ ，$a_ia_{i+1} … a_n$#)<br>此处, s&#x3D;GOTO($s_{m-r}$, A), r为$\beta$的长度, $\beta$&#x3D; $X_{m-r+1}… X_m$</li>
<li>若ACTION$(s_m , a_i)$为“接受”，则格局变化过程终止，宣布分析成功。</li>
<li>若ACTION$(s_m , a_i)$为“报错”，则格局变化过程终止，报告错误。</li>
</ol>
<p>分析示例：<a class="link" href="https://www.bilibili.com/video/BV1dJ411D7w6/?p=108&spm_id_from=pageDriver&vd_source=c75b11f1c6d9b809759edcc17586cf0d">[11.2.3]–LR文法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>


<h2 id="LR文法"><a href="#LR文法" class="headerlink" title="LR文法"></a>LR文法</h2><p>定义：对于一个文法，如果能够构造一张分析表，使得它的每个入口均是唯一确定的，则这个文法就称为LR文法。<br>定义：一个文法，如果能用一个每步顶多向前检查k个输入符号的LR分析器进行分析，则这个文法就称为LR(k)文法.</p>
<p>LR文法不是二义的，二义文法肯定不会是LR的<br>LR文法⊂无二义文法</p>
<h3 id="增广文法"><a href="#增广文法" class="headerlink" title="增广文法"></a>增广文法</h3><p>如果G 是一个以S为开始符号的文法，则G的增广文法 G’ 就 是在G中加上新开始符号S’ 和产生式S’ → S而得到的文法</p>
<p>引入这个新的开始产生式的目的是使得文法开始符号仅出现 在一个产生式的左边，从而使得分析器只有一个接受状态</p>
<h3 id="LR语法分析器的优势"><a href="#LR语法分析器的优势" class="headerlink" title="LR语法分析器的优势"></a>LR语法分析器的优势</h3><p>LR语法分析器的优势<br>· 表驱动（类似于非递归LL语法分析器）、强大<br>   · 尽管手工构建LR语法分析器工作量太大，但也有一些语法分析器生成器可以自动构建语法分析表<br>   · 相比之下，LL语法分析器往往更容易手工编写，但功能较弱（处理的语法较少）<br>· LR语法分析技术是已知的最通用的非回溯移入-归约语法分析方法<br>· LR语法分析器可以被构造为识别几乎所有可以为其编写CFG的编程语言结构<br>· LR语法比LL语法可以描述更多的语言</p>
<h2 id="LR-0-分析表构造算法"><a href="#LR-0-分析表构造算法" class="headerlink" title="LR(0)分析表构造算法"></a>LR(0)分析表构造算法</h2><p><font color="red">这里不需要看那么多形式化定义，只要会构造就行</font></p>


<h3 id="CLOSURE-函数"><a href="#CLOSURE-函数" class="headerlink" title="CLOSURE( )函数"></a>CLOSURE( )函数</h3><h4 id="项集闭包"><a href="#项集闭包" class="headerlink" title="项集闭包"></a>项集闭包</h4><p>如果𝐼 是文法𝐺的一组项集, 那么CLOSURE(𝐼)就是按照下面两条规则构造的项集：</p>
<pre><code>  1. 一开始，将𝐼中的各个项加入到CLOSURE(𝐼)
  2. 如果𝐴 → 𝛼 · 𝐵𝛽在CLOSURE(𝐼)中，𝐵 → 𝛾是一个产生式，并且𝐵 → ·𝛾不在CLOSURE(𝐼)中，那么将𝐵 → ·𝛾加入CLOSURE(𝐼)中。不断应用这条规则，直到没有新项可以加入到
     直观地讲：𝐴 → 𝛼 · 𝐵𝛽 表示我们希望看到从一个能够从𝐵𝛽推导得到的子串。这个子串的某个前缀可以从B推导得到。因此，我们将所有𝐵-产生式加入到项集。
</code></pre>
<h4 id="计算给定项目集I的闭包"><a href="#计算给定项目集I的闭包" class="headerlink" title="计算给定项目集I的闭包"></a>计算给定项目集I的闭包</h4><p>$$<br>\begin{align}\mathrm{CLOSURE}(I)&#x3D;I\cup{B\to\cdot,\gamma\mid A\to\alpha\cdot B\beta\in\mathrm{CLOSURE}(I),,B\to\gamma\in P}\end{align}<br>$$</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SetOfltems <span class="title function_">CLOSURE</span> <span class="params">( I )</span> &#123;</span><br><span class="line">		J = I；</span><br><span class="line">		repeat</span><br><span class="line">			<span class="keyword">for</span> ( J中的每个项A → α·Bβ ) </span><br><span class="line">				<span class="keyword">for</span> ( G的每个产生式B → γ ) </span><br><span class="line">					<span class="keyword">if</span> ( 项B → · γ不在J中 ) </span><br><span class="line">						将B → · γ加入J中；</span><br><span class="line">		until 在某一轮中没有新的项被加入到J中；</span><br><span class="line">		<span class="keyword">return</span> J；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="GOTO-函数"><a href="#GOTO-函数" class="headerlink" title="GOTO ( )函数"></a>GOTO ( )函数</h3><p>𝐆𝐎𝐓𝐎(𝑰, 𝑿) 其中𝑰是一个项集而𝑿是一个文法符号，被定义为𝑰中所有形如的项所对应的项的集合的闭包。</p>
<p>返回项目集I对应于文法符号X的后继项目集闭包<br>$$<br>\begin{align}\mathrm(I,X){&#x3D;C L O S U R E({A\to\alpha X·\beta{\mid}{A\to\alpha\cdot X\beta{\in}I}}})\end{align}<br>$$</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">SetOfltems <span class="title function_">GOTO</span> <span class="params">( I，X )</span> &#123;</span><br><span class="line">	将J 初始化为空集；</span><br><span class="line">	<span class="keyword">for</span> ( I 中的每个项A → α·Xβ ) </span><br><span class="line">		将项 A → αX·β 加入到集合J 中；</span><br><span class="line">	<span class="keyword">return</span> CLOSURE ( J )；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="构造LR-0-自动机的状态集"><a href="#构造LR-0-自动机的状态集" class="headerlink" title="构造LR(0)自动机的状态集"></a>构造LR(0)自动机的状态集</h3><p>规范LR(0) 项集族(Canonical LR(0) Collection)<br>$$<br>\begin{align}C&#x3D;{I_{0}}\cup{I|\exists J\in C,X\in V_{N}\cup V_{T},I&#x3D;G O T O(J,X);}\end{align}<br>$$</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">items</span><span class="params">( G<span class="string">&#x27; ) &#123;</span></span></span><br><span class="line"><span class="string"><span class="params">	C＝&#123; CLOSURE (&#123;[ S&#x27;</span>→ ·S ] &#125; )</span> &#125;；</span><br><span class="line">	repeat</span><br><span class="line">	<span class="title function_">for</span> <span class="params">(C中的每个项集 I )</span></span><br><span class="line">		<span class="title function_">for</span><span class="params">(每个文法符号X )</span></span><br><span class="line">			<span class="title function_">if</span> <span class="params">( GOTO ( I，X )非空且不在C中)</span></span><br><span class="line">				将<span class="title function_">GOTO</span> <span class="params">( I，X )</span>加入C中；</span><br><span class="line">	until在某一轮中没有新的项集被加入到C中；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="LR-0-分析表构造算法-1"><a href="#LR-0-分析表构造算法-1" class="headerlink" title="LR(0)分析表构造算法"></a>LR(0)分析表构造算法</h3>

<h3 id="移进-规约冲突"><a href="#移进-规约冲突" class="headerlink" title="移进-规约冲突"></a>移进-规约冲突</h3>

<h3 id="归约-归约冲突"><a href="#归约-归约冲突" class="headerlink" title="归约-归约冲突"></a>归约-归约冲突</h3>

<h2 id="SLR分析"><a href="#SLR分析" class="headerlink" title="SLR分析"></a>SLR分析</h2><p>如果集合${a_1, a_2, …, a_m}$和FOLLOW(B1)， FOLLOW(B2)，…，FOLLOW(Bn)两两不相交，则项目集I中的冲突可以按以下原则解决：</p>
<p>​	设a是下一个输入符号：</p>
<ul>
<li>若a∈${a_1, a_2, …, a_m}$，则移进a</li>
<li>若a∈FOLLOW($B_i$)，则用产生式$B_i→γ_i$ 归约</li>
<li>此外，报错</li>
</ul>
<h3 id="SLR分析表构造算法"><a href="#SLR分析表构造算法" class="headerlink" title="SLR分析表构造算法"></a>SLR分析表构造算法</h3>

<h2 id="LR-1-分析"><a href="#LR-1-分析" class="headerlink" title="LR(1)分析"></a>LR(1)分析</h2><p>将一般形式为 [A→α·β, a]的项称为 LR(1) 项，其中A→αβ 是 一个产生式，a 是一个<strong>终结符</strong>(这里将$视为一个特殊的终结符) 它表示在当前状态下，A后面必须紧跟的终结符，称为该项的展望符(lookahead)</p>
<ul>
<li>LR(1) 中的1指的是项的第二个分量的长度</li>
<li>在形如[A→α·β, a]且β ≠ ε的项中，展望符a没有任何作用</li>
<li>但是一个形如[A→α·, a]的项在只有在下一个输入符号等于a时才可以按照A→α 进行归约<ul>
<li>这样的a的集合总是FOLLOW(A)的子集，而且它通常是一个真子集</li>
</ul>
</li>
</ul>


<h3 id="LR-1-分析表构造算法"><a href="#LR-1-分析表构造算法" class="headerlink" title="LR(1)分析表构造算法"></a>LR(1)分析表构造算法</h3>

<h2 id="LALR分析法"><a href="#LALR分析法" class="headerlink" title="LALR分析法"></a>LALR分析法</h2><ul>
<li><p>寻找具有相同核心的LR (1) 项集，并将这些项集合并为一个项集。 所谓项集的核心就是其第一分量的集合</p>
</li>
<li><p>然后根据合并后得到的项集族构造语法分析表</p>
</li>
<li><p>如果分析表中没有语法分析动作冲突，给定的文法就称为LALR (1) 文法，就可以根据该分析表进行语法分析</p>
</li>
</ul>


<p>合并同心项集时产生归约-归约冲突</p>
<p>合并同心项集后，虽然不产生冲突，但可能会推迟错误的发现</p>
<h3 id="LALR-1-的特点"><a href="#LALR-1-的特点" class="headerlink" title="LALR(1)的特点"></a>LALR(1)的特点</h3><ul>
<li>形式上与LR(1)相同</li>
<li>大小上与LR(0)&#x2F;SLR相当</li>
<li>分析能力介于SLR和LR(1)二者之间 SLR&lt;LALR(1)&lt;LR(1)</li>
<li>合并后的展望符集合仍为FOLLOW集的子集</li>
</ul>
<h2 id="LR语法分析器对比"><a href="#LR语法分析器对比" class="headerlink" title="LR语法分析器对比"></a>LR语法分析器对比</h2><p>•The languages (grammars) that can be handled</p>
<p>CLR &gt; LALR &gt; SLR</p>
<p>•# states in the parsing table</p>
<p>CLR &gt; LALR &#x3D; SLR</p>
<p>•Driver programs</p>
<p>SLR &#x3D; CLR &#x3D; LALR</p>
<h2 id="错误恢复？"><a href="#错误恢复？" class="headerlink" title="错误恢复？"></a>错误恢复？</h2><h1 id="4-语法制导翻译"><a href="#4-语法制导翻译" class="headerlink" title="4 语法制导翻译"></a>4 语法制导翻译</h1><h2 id="语法制导定义SDD"><a href="#语法制导定义SDD" class="headerlink" title="语法制导定义SDD"></a>语法制导定义SDD</h2><p>语法制导定义SDD是对CFG的推广<br>    将每个文法符号和一个语义属性集合相关联<br>    将每个产生式和一组语义规则相关联，用来计算该产生式中各文法符号的属性值<br>文法符号的属性<br>    综合属性 (synthesized attribute)<br>    继承属性 (inherited attribute)</p>
<h3 id="注释解析树"><a href="#注释解析树" class="headerlink" title="注释解析树"></a>注释解析树</h3><p>语法树与解析树<br>在语法树中，内部节点代表编程结构，而在解析树中，内部节点代表非终结符。<br>解析树也称为具体语法树，其底层语法称为语言的具体语法</p>
<p>9-5+2的注释解析树</p>


<h3 id="综合属性"><a href="#综合属性" class="headerlink" title="综合属性"></a>综合属性</h3><p>在分析树结点 N上的非终结符A的综合属性只能通过 <strong>N的子结点</strong>或 <strong>N本身的属性值</strong>来定义</p>


<p><strong>例：val是E的综合属性</strong></p>
<p>终结符可以具有综合属性。终结符的综合属性值是由词法分析器提供的词法值，因此在SDD中没有计算终结符属性值的语义规则</p>
<h3 id="继承属性"><a href="#继承属性" class="headerlink" title="继承属性"></a>继承属性</h3><p>在分析树结点N上的非终结符A的继承属性只能通过<strong>N的父结点、N的兄弟结点或N本身的属性值</strong>来定义</p>


<p>例：in是L的继承属性</p>
<p>终结符没有继承属性。终结符从词法分析器处获得的属性值被归为综合属性值</p>




<h3 id="属性文法"><a href="#属性文法" class="headerlink" title="属性文法"></a>属性文法</h3><p>一个没有副作用的SDD有时也称为属性文法<br>属性文法的规则仅仅通过其它属性值和常量来定义一个属性值<br>例</p>


<h2 id="SDD的求值顺序"><a href="#SDD的求值顺序" class="headerlink" title="SDD的求值顺序"></a>SDD的求值顺序</h2><p>SDD为CFG中的文法符号设置语义属性。对于给定的输入串x，应用语义规则计算分析树中各结点对应的属性值</p>
<p>语义规则建立了属性之间的依赖关系，在对语法分析树节点的一个属性求值之前，必须首先求出这个属性值所依赖的所有属性值</p>
<h3 id="依赖图"><a href="#依赖图" class="headerlink" title="依赖图"></a>依赖图</h3><p>依赖图是一个描述了分析树中结点属性间依赖关系的有向图<br>分析树中每个标号为X的结点的每个属性a都对应着依赖图中的一个结点<br>如果属性X.a的值依赖于属性Y.b的值，则依赖图中有一条从Y.b的结点指向X.a的结点的有向边</p>


<h3 id="属性值的计算顺序"><a href="#属性值的计算顺序" class="headerlink" title="属性值的计算顺序"></a>属性值的计算顺序</h3><p><a class="link" href="https://www.bilibili.com/video/BV1dL4y1H7T8?p=37&vd_source=c75b11f1c6d9b809759edcc17586cf0d">5-3 SSD的求值顺序_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>可行的求值顺序是满足下列条件的结点序列N1, N2, … , Nk ：如果依赖图中有一条从结点Ni到 Nj 的边(Ni→Nj),  那么i &lt; j（即：在节点序列中，Ni 排在Nj 前面）<br>这样的排序将一个有向图变成了一个线性排序，这个排序称为这个图的拓扑排序(topological sort)</p>


<p>对于只具有综合属性的SDD ，可以按照任何自底向上的顺序计算它们的值<br>对于同时具有继承属性和综合属性的SDD，不能保证存在一个顺序来对各个节点上的属性进行求值</p>


<h3 id="S-属性定义"><a href="#S-属性定义" class="headerlink" title="S-属性定义"></a>S-属性定义</h3><p>仅仅使用综合属性的SDD称为<strong>S属性的SDD，或S-属性定义、S-SDD</strong></p>


<p>如果一个SDD是S属性的，可以按照语法分析树节点的任何自底向上顺序来计算它的各个属性值<br>S-属性定义可以在自底向上的语法分析过程中实现</p>
<h3 id="L-属性定义"><a href="#L-属性定义" class="headerlink" title="L-属性定义"></a>L-属性定义</h3><p>L-属性定义(也称为L属性的SDD或L-SDD)的直观含义：在一个产生式所关联的各属性之间，依赖图的边可以从左到右，但不能从右到左(因此称为L属性的，L是Left的首字母)</p>
<h3 id="L-SDD的正式定义"><a href="#L-SDD的正式定义" class="headerlink" title="L-SDD的正式定义"></a>L-SDD的正式定义</h3><p>一个SDD是L-属性定义，当且仅当它的每个属性要么是一个综合属性，要么是满足如下条件的继承属性：假设存在一个产生式$A→X_1X_2…X_n$，其右部符号$X_i$ (1≤ i ≤ n)的继承属性仅依赖于下列属性：</p>
<ul>
<li>A的继承属性</li>
<li>产生式中$X_i$左边的符号 $X_1, X_2, … , X_{i-1}$ 的属性</li>
<li>$X_i$本身的属性，但$X_i$的全部属性不能在依赖图中形成环路</li>
</ul>
<p>每个S-属性定义都是L-属性定义</p>


<h2 id="语法制导翻译方案SDT"><a href="#语法制导翻译方案SDT" class="headerlink" title="语法制导翻译方案SDT"></a>语法制导翻译方案SDT</h2><p>语法制导翻译方案(SDT)是在产生式右部中嵌入了程序片段(称为语义动作)的CFG</p>
<p>SDT可以看作是SDD的具体实施方案<br>本节主要关注如何使用SDT来实现两类重要的SDD，因为在这两种情况下，SDT可在语法分析过程中实现<br>基本文法可以使用<strong>LR分析</strong>技术，且SDD是S属性的<br>基本文法可以使用<strong>LL分析</strong>技术，且SDD是L属性的</p>
<p>底层语法是LR，而SDD是S属性的：<br>LR语法：这是一种可以用自底向上的方式进行解析的语法。LR解析器从左到右读取输入，但决策是基于右侧的上下文进行的。它使用一个堆栈来存储已经读取的符号，并在适当的时候进行规约。<br>S属性的SDD：这意味着所有属性都是合成属性，它们只从子节点传递给父节点，没有从父节点传递给子节点的继承属性。这对于自底向上的LR解析是非常合适的，因为我们从叶子节点开始构建并向上移动，因此只需要合成属性即可。</p>
<p>底层语法是LL，而SDD是L属性的：<br>LL语法：这是一种可以用自顶向下的方式进行解析的语法。LL解析器从左到右读取输入，并基于左侧的上下文来进行决策。它通常使用递归下降的方法，直接从起始符号开始，并尝试应用各种产生式。<br>L属性的SDD：这种SDD除了合成属性外，还包括继承属性，但这些继承属性只能依赖于它左边的兄弟节点或其父节点的属性。由于LL解析是自顶向下的，所以可以在解析过程中计算这些继承属性。</p>
<h3 id="SDD和SDT"><a href="#SDD和SDT" class="headerlink" title="SDD和SDT"></a>SDD和SDT</h3><p><strong>SDD（Syntax Directed Definition）：</strong></p>
<ol>
<li>SDD定义了与语法产生式关联的属性和规则。它为每个语法产生式指定一个或多个属性计算或语义动作。</li>
<li>SDD关注于如何为语法树中的节点计算属性值，但不一定涉及产生中间代码或目标代码的具体操作。</li>
<li>它可以有合成属性和继承属性，因此可以描述为S属性的（只有合成属性）或L属性的（允许继承属性但有限制）。</li>
</ol>
<p><strong>SDT（Syntax Directed Translation）：</strong></p>
<ol>
<li>SDT是SDD的一个特例，它专门用于生成中间代码或目标代码。换句话说，SDT的目的是翻译，它定义了与语法产生式关联的动作，这些动作通常在解析时执行。</li>
<li>当解析器在处理产生式时，与该产生式关联的SDT动作被执行，从而生成代码或进行其他翻译工作。</li>
<li>动作可以嵌入到产生式中，例如，在YACC或Bison这样的工具中，可以直接在语法规则中插入C代码作为动作。</li>
</ol>
<p><strong>总结差异：</strong><br>SDD更为通用，关注于为语法树的节点计算属性。这些属性可以用于多种目的，如类型检查、变量绑定等。<br>SDT特化于翻译任务，即将源代码转换为中间代码或目标代码。它通常涉及在解析过程中执行特定的动作。<br>尽管有这些区别，但在实际应用中，SDD和SDT的界限可能会模糊，因为编译器的语义分析和翻译阶段通常是交织在一起的</p>
<h3 id="将S-SDD转换为SDT"><a href="#将S-SDD转换为SDT" class="headerlink" title="将S-SDD转换为SDT"></a>将S-SDD转换为SDT</h3><p>将一个S-SDD转换为SDT的方法：将每个语义动作都放在产生式的最后</p>


<h3 id="S-属性定义的SDT实现——归约发生时执行语义动作"><a href="#S-属性定义的SDT实现——归约发生时执行语义动作" class="headerlink" title="S-属性定义的SDT实现——归约发生时执行语义动作"></a>S-属性定义的SDT实现——归约发生时执行语义动作</h3><p>如果一个S-SDD的基本文法可以使用LR分析技术，那么它的SDT可以在LR语法分析过程中实现</p>
<p>当<strong>归约发生时</strong>执行相应的语义动作</p>
<h4 id="扩展的LR语法分析栈"><a href="#扩展的LR语法分析栈" class="headerlink" title="扩展的LR语法分析栈"></a>扩展的LR语法分析栈</h4><p>在分析栈中使用一个附加的域来存放<strong>综合属性</strong>值</p>


<p>若支持多个属性：<br>    使栈记录变得足够大<br>    在栈记录中存放指针</p>
<h4 id="将语义动作中的抽象定义式改写成具体可执行的栈操作"><a href="#将语义动作中的抽象定义式改写成具体可执行的栈操作" class="headerlink" title="将语义动作中的抽象定义式改写成具体可执行的栈操作"></a>将语义动作中的抽象定义式改写成具体可执行的栈操作</h4>

<p>示例：<a class="link" href="https://www.bilibili.com/video/BV1dL4y1H7T8?p=39&spm_id_from=pageDriver&vd_source=c75b11f1c6d9b809759edcc17586cf0d">5-5语法制导翻译方案_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="在非递归的预测分析过程中进行翻译"><a href="#在非递归的预测分析过程中进行翻译" class="headerlink" title="在非递归的预测分析过程中进行翻译"></a>在非递归的预测分析过程中进行翻译</h2><h3 id="扩展语法分析栈"><a href="#扩展语法分析栈" class="headerlink" title="扩展语法分析栈"></a>扩展语法分析栈</h3>

<p>例：<a class="link" href="https://www.bilibili.com/video/BV1dL4y1H7T8/?p=40&spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=c75b11f1c6d9b809759edcc17586cf0d">5-6在非递归的预测分析过程中进行翻译_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>


<h4 id="分析栈中的每一个记录都对应着一段执行代码"><a href="#分析栈中的每一个记录都对应着一段执行代码" class="headerlink" title="分析栈中的每一个记录都对应着一段执行代码"></a>分析栈中的每一个记录都对应着一段执行代码</h4><p>综合记录出栈时，要将综合属性值复制给后面特定的语义动作<br>变量展开时（即变量本身的记录出栈时），如果其含有继承属性，则要将继承属性值复制给后面特定的语义动作</p>


<h2 id="在递归的预测分析过程中进行翻译"><a href="#在递归的预测分析过程中进行翻译" class="headerlink" title="在递归的预测分析过程中进行翻译"></a>在递归的预测分析过程中进行翻译</h2><ul>
<li><p>为每个非终结符A构造一个函数，A的每个继承属性对应该函数的一个形参，函数的返回值是A的综合属性值。对出现在A产生式中的每个文法符号的每个属性都设置一个局部变量</p>
</li>
<li><p>非终结符A的代码根据当前的输入决定使用哪个产生式</p>
</li>
<li><p>与每个产生式有关的代码执行如下动作：从左到右考虑产生式右部的词法单元、非终结符及语义动作   </p>
<ul>
<li>对于带有综合属性x的词法单元 X，把x的值保存在局部变量X.x中；然后产生一个匹配 X的调用，并继续输入</li>
<li>对于非终结符B，产生一个右部带有函数调用的赋值语句c :&#x3D; B(b1 , b2 , …, bk)，其中， b1 , b2 , …, bk是代表B的继承属性的变量，c是代表B的综合属性的变量</li>
<li>对于每个动作，将其代码复制到语法分析器，并把对属性的引用改为对相应变量的引用</li>
</ul>
</li>
</ul>


<h2 id="L-属性定义的自底向上翻译"><a href="#L-属性定义的自底向上翻译" class="headerlink" title="L-属性定义的自底向上翻译"></a>L-属性定义的自底向上翻译</h2><p>给定一个以LL文法为基础的L-SDD，可以修改这个文法，并在LR语法分析过程中计算这个新文法之上的SDD</p>


<p>例：<a class="link" href="https://www.bilibili.com/video/BV1dL4y1H7T8?p=42&spm_id_from=pageDriver&vd_source=c75b11f1c6d9b809759edcc17586cf0d">5-8L属性定义的自底向上翻译_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="将语义动作改写为可执行的栈操作"><a href="#将语义动作改写为可执行的栈操作" class="headerlink" title="将语义动作改写为可执行的栈操作"></a>将语义动作改写为可执行的栈操作</h3><ol>
<li>T→F M T′ {stack[top-2]. val &#x3D; stack[top].syn; top &#x3D; top-2;}<br>M→ ε {stack[top+1]. T′inh &#x3D; stack[top].val; top &#x3D; top+1;} 	</li>
<li>T′→*F N T1′ {stack[top-3]. syn &#x3D; stack[top].syn; top &#x3D; top-3;}<br>N → ε {stack[top+1]. T′inh &#x3D; stack[top-2]. T΄inh × stack[top].val; top &#x3D; top+1;} </li>
<li>T′→ε{stack[top+1].syn &#x3D; stack[top]. T′inh; top &#x3D; top+1;}</li>
<li>F →digit {stack[top].val &#x3D; stack[top]. lexval;}</li>
</ol>
<p>给定一个以LL文法为基础的L-属性定义，可以修改这个文法，并在LR语法分析过程中计算这个新文法之上的SDD</p>
<ul>
<li>首先构造SDT，在各个非终结符之前放置语义动作来计算它的继承属性， 并在产生式后端放置语义动作计算综合属性</li>
<li>对每个内嵌的语义动作，向文法中引入一个标记非终结符来替换它。每个这样的位置都有一个不同的标记，并且对于任意一个标记M都有一个产生式M→ε</li>
<li>如果标记非终结符M在某个产生式A→α{a}β中替换了语义动作a，对a进行修改得到a’ ，并且将a’关联到M→ε 上。动作a’<ul>
<li>(a) 将动作a需要的A或α中符号的任何属性作为M的继承属性进行复制</li>
<li>(b) 按照a中的方法计算各个属性，但是将计算得到的这些属性作为M的综合属性</li>
</ul>
</li>
</ul>
<h1 id="5-中间代码生成"><a href="#5-中间代码生成" class="headerlink" title="5 中间代码生成"></a>5 中间代码生成</h1><h2 id="生成各种语句的中间代码（三地址代码）"><a href="#生成各种语句的中间代码（三地址代码）" class="headerlink" title="生成各种语句的中间代码（三地址代码）"></a><font color="green">生成各种语句的中间代码（三地址代码）</font></h2><h2 id="中间代码表示"><a href="#中间代码表示" class="headerlink" title="中间代码表示"></a>中间代码表示</h2><h3 id="抽象语法树和有向无环图"><a href="#抽象语法树和有向无环图" class="headerlink" title="抽象语法树和有向无环图"></a>抽象语法树和有向无环图</h3><p> a:&#x3D;b*(-c)+b*(-c)的图表示法 </p>


<p>DAG 可以用构造语法树的 SDD 来构造<br>区别：在构建 DAG 时，只有当且仅当没有现存的相同节点时，才会创建新节点</p>




<h3 id="三地址代码"><a href="#三地址代码" class="headerlink" title="三地址代码"></a>三地址代码</h3><p>在三地址代码中，指令右侧最多只有一个运算符<br>指令的形式通常是 𝑥 &#x3D; 𝑦 𝑜𝑝 𝑧</p>
<p>运算符（或地址）可以是：<br>    源程序中的名称<br>    常量：编译器必须处理多种类型的常量<br>    编译器生成的临时名称</p>
<p>赋值指令：<br>    𝑥 &#x3D; 𝑦 op 𝑧，其中 op 是二进制算术&#x2F;逻辑运算<br>    𝑥 &#x3D; op 𝑦，其中 op 是一元运算<br>复制(赋值)指令： 𝑥 &#x3D; 𝑦<br>无条件跳转指令：goto 𝐿，其中 𝐿 是跳转目标的标记<br>有条件跳转指令：<br>    if 𝑥 goto 𝐿<br>    if Flase  𝑥 goto 𝐿<br>    if 𝑥 relop 𝑦 goto 𝐿<br>程序调用和返回：<br>    param 𝑥1<br>    …<br>    param 𝑥𝑛<br>    call 𝑝, 𝑛 (procedure call)<br>    y &#x3D; call p, n (function call)<br>    return y<br>索引赋值指令： 𝑥 &#x3D; 𝑦[𝑖] 	𝑥[𝑖] &#x3D; 𝑦   这里，𝑦[𝑖] 表示位置 𝑖 存储单元中超出位置 𝑦 的值。这里，𝑦[𝑖] 表示位置 𝑖存储元中超出位置 𝑦 的值。<br>地址和指针赋值指令：𝑥 &#x3D; &amp;𝑦 ，𝑥 &#x3D;∗ 𝑦， ∗ 𝑥 &#x3D; 𝑦</p>
<p>例：<br>Source code: <code>do i = i + 1; while (a[i] &lt; v);</code></p>


<h3 id="四元式"><a href="#四元式" class="headerlink" title="四元式"></a>四元式</h3><p>一个四元式（或 “四元组”）有四个字段<br>一般形式： op arg1 arg2 result<br>op 包含运算符的内部代码<br>arg1、arg2、result 是地址（操作数）</p>
<p>一元运算符（如 x &#x3D; 减 y 或 x &#x3D; y）不使用 arg2<br>参数运算符既不使用 arg2 也不使用 result<br>条件&#x2F;非条件跳转将目标标签放在 result 中</p>
<p>例：<br>Assignment statement: 𝑎 &#x3D; 𝑏 ∗ −𝑐 + 𝑏 ∗ −𝑐</p>


<h3 id="三元组"><a href="#三元组" class="headerlink" title="三元组"></a>三元组</h3><p>三元组只有三个字段：<em>op</em>, <em>arg</em>1, <em>arg</em>2。<br>我们用操作 x op y 的位置来表示操作结果，而无需生成临时名称（这是对四元组的优化）</p>


<p>在优化编译器中，指令经常被移动<br>四地址表达式的优势：使用 t1 和 t3 的指令不受影响</p>
<h3 id="间接三元式"><a href="#间接三元式" class="headerlink" title="间接三元式"></a>间接三元式</h3><p>间接三元组由一个指向三元组的指针列表（下面的指令数组）</p>


<p>优化可以通过重新排序指令列表来移动指令（无需修改三元组）<br>交换后，列表中的第一条和第二条指令仍然指向正确的指令</p>


<h2 id="类型表达式"><a href="#类型表达式" class="headerlink" title="类型表达式"></a>类型表达式</h2><p>基本类型是类型表达式<br>可以为类型表达式命名，类型名也是类型表达式<br>将类型构造符(type constructor)作用于类型表达式可以构成新的类型表达式</p>
<ul>
<li>数组构造符array </li>
<li>指针构造符pointer </li>
<li>笛卡尔乘积构造符×</li>
<li>函数构造符→</li>
<li>记录构造符record</li>
</ul>
<p>如果 𝑠和 𝑡是类型表达式，那么它们的笛卡尔乘积 𝑠 × 𝑡 就是一个类型表达式（例如，表示函数参数等类型的元组）。</p>
<h2 id="声明语句的翻译"><a href="#声明语句的翻译" class="headerlink" title="声明语句的翻译"></a>声明语句的翻译</h2><h3 id="变量声明语句的SDT"><a href="#变量声明语句的SDT" class="headerlink" title="变量声明语句的SDT"></a>变量声明语句的SDT</h3><p>非终端 𝐷生成声明序列<br>𝑇 生成基本类型、数组类型或记录类型，记录类型是记录字段的声明序列，由大括号包围<br>𝐵 生成基本类型之一：int 和 float<br>𝐶 生成一个或多个整数的序列，每个整数都由大括号包围</p>


<p>对于声明语句，语义分析的主要任务就是收集标识符的类型等属性信息，并为每一个名字分配一个相对地址<br>    从类型表达式可以知道该类型在运行时刻所需的存储单元数量称为<strong>类型的宽度</strong>(width)<br>    在编译时刻，可以使用类型的宽度为每一个名字分配一个相对地址<br>名字的类型和相对地址信息保存在相应的符号表记录中</p>
<p>① P →{ offset &#x3D; 0 } D<br>② D → T id;{ enter( id.lexeme, T.type, offset );<br>            offset &#x3D; offset + T.width; }D<br>③ D → ε<br>④ T → B   { t &#x3D;B.type; w&#x3D;B.width;}<br>          C   { T.type &#x3D; C.type; T.width &#x3D; C.width; }<br>⑤ T → ↑T1{ T.type &#x3D; pointer( T1.type); T.width &#x3D; 4; }<br>⑥ B → int { B.type &#x3D; int; B.width &#x3D; 4; }<br>⑦ B → real{ B.type &#x3D; real; B.width &#x3D; 8; }<br>⑧ C → ε  { C.type&#x3D;t; C.width&#x3D;w; }<br>⑨ C → [num]C1 { C.type &#x3D; array( num.val, C1.type);<br>           C.width &#x3D; num.val * C1.width; }</p>
<table>
<thead>
<tr>
<th><strong>符号</strong></th>
<th><strong>综合属性</strong></th>
</tr>
</thead>
<tbody><tr>
<td>B</td>
<td>type, width</td>
</tr>
<tr>
<td>C</td>
<td>type, width</td>
</tr>
<tr>
<td>T</td>
<td>type, width</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>变量</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>offset</td>
<td>下一个可用的相对地址</td>
</tr>
<tr>
<td>t, w</td>
<td>将类型和宽度信息从语法分析树中的B结点传递到对应于产生式C →ε的结点</td>
</tr>
</tbody></table>


<p>例：<a class="link" href="https://www.bilibili.com/video/BV1dL4y1H7T8?p=44&spm_id_from=pageDriver&vd_source=c75b11f1c6d9b809759edcc17586cf0d">6-2声明语句的翻译_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>在LL语法分析过程中，将语法动作当作节点{a}，分析到{a}时执行相应的语义动作</p>




<h2 id="简单赋值语句的翻译"><a href="#简单赋值语句的翻译" class="headerlink" title="简单赋值语句的翻译"></a>简单赋值语句的翻译</h2><h3 id="赋值语句翻译的任务"><a href="#赋值语句翻译的任务" class="headerlink" title="赋值语句翻译的任务"></a>赋值语句翻译的任务</h3><h4 id="赋值语句的基本文法"><a href="#赋值语句的基本文法" class="headerlink" title="赋值语句的基本文法"></a><strong>赋值语句的基本文法</strong></h4><p>  ① S → id &#x3D; E；<br>  ② E → E1 + E2<br>  ③ E → E1 * E2<br>  ④ E → —E1 	<br>  ⑤ E → (E1)<br>  ⑥ E → id </p>
<h4 id="赋值语句生成三地址代码的S-属性文法"><a href="#赋值语句生成三地址代码的S-属性文法" class="headerlink" title="赋值语句生成三地址代码的S-属性文法"></a>赋值语句生成三地址代码的S-属性文法</h4><table>
<thead>
<tr>
<th>产生式</th>
<th>语义规则</th>
</tr>
</thead>
<tbody><tr>
<td>S → id:&#x3D;E</td>
<td>S.code :&#x3D; E.code || gen(id.place ‘:&#x3D;’ E.place)</td>
</tr>
<tr>
<td>E → E1+E2</td>
<td>E.place :&#x3D; newtemp; <br> E.code :&#x3D; E1.code || E2.code || gen(E.place ‘:&#x3D;’ E1.place ‘+’ E2.place)</td>
</tr>
<tr>
<td>E → E1*E2</td>
<td>E.place :&#x3D; newtemp; <br> E.code :&#x3D; E1.code || E2.code || gen(E.place ‘:&#x3D;’ E1.place ‘*’ E2.place)</td>
</tr>
<tr>
<td>E → -E1</td>
<td>E.place :&#x3D; newtemp; <br> E.code :&#x3D; E1.code || gen(E.place ‘:&#x3D;’ ‘uminus’ E1.place)</td>
</tr>
<tr>
<td>E → (E1)</td>
<td>E.place :&#x3D; E1.place; <br> E.code :&#x3D; E1.code</td>
</tr>
<tr>
<td>E → id</td>
<td>E.place :&#x3D; id.place; <br> E.code :&#x3D; ‘ ’</td>
</tr>
</tbody></table>
<p><strong>赋值语句翻译的主要任务</strong><br>生成对表达式求值的三地址码</p>
<p>例<br>    源程序片段：<br>        x &#x3D; ( a + b ) * c ;<br>    三地址码：<br>        t1 &#x3D; a + b<br>        t2 &#x3D; t1 * c<br>        x  &#x3D; t2 </p>


<p><strong>增量翻译</strong> (Incremental Translation)</p>


<p>例：<a class="link" href="https://www.bilibili.com/video/BV1dL4y1H7T8?p=45&vd_source=c75b11f1c6d9b809759edcc17586cf0d">6-3简单赋值语句的翻译_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>


<p>语义动作都在产生式末尾的，在LR分析过程中进行语义动作翻译</p>
<h2 id="数组引用的翻译"><a href="#数组引用的翻译" class="headerlink" title="数组引用的翻译"></a>数组引用的翻译</h2><h3 id="数组元素寻址-Addressing-Array-Elements"><a href="#数组元素寻址-Addressing-Array-Elements" class="headerlink" title="数组元素寻址 (Addressing Array Elements )"></a>数组元素寻址 (Addressing Array Elements )</h3><p>赋值语句的基本文法<br>    S → id &#x3D; E; | L &#x3D; E;<br>    E → E1 + E2 | —E1   | (E1) | id | L<br>    L → id [E] | L1 [E]</p>
<p>将数组引用翻译成三地址码时要解决的主要问题是确定数组元素的存放地址，也就是数组元素的寻址</p>






<p>例：<a class="link" href="https://www.bilibili.com/video/BV1dL4y1H7T8?p=46&vd_source=c75b11f1c6d9b809759edcc17586cf0d">6-4数组引用的翻译_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>


<h2 id="布尔表达式SDT"><a href="#布尔表达式SDT" class="headerlink" title="布尔表达式SDT"></a>布尔表达式SDT</h2><p><a class="link" href="https://www.bilibili.com/video/BV1dJ411D7w6/?p=163&spm_id_from=pageDriver&vd_source=c75b11f1c6d9b809759edcc17586cf0d">[18.3.3]–根据属性文法翻译布尔表达式_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="文法"><a href="#文法" class="headerlink" title="文法"></a>文法</h3><p> E → E or E | E and E | not E | (E) | i rop i | i</p>
<h3 id="产生布尔表达式三地址代码的属性文法"><a href="#产生布尔表达式三地址代码的属性文法" class="headerlink" title="产生布尔表达式三地址代码的属性文法"></a>产生布尔表达式三地址代码的属性文法</h3><table>
<thead>
<tr>
<th>产生式</th>
<th>语义规则</th>
</tr>
</thead>
<tbody><tr>
<td>E → E1 or E2</td>
<td>E1.true :&#x3D; E.true; <br> E1.false :&#x3D; newlabel; <br> E2.true :&#x3D; E.true; <br> E2.false :&#x3D; E.false; <br> E.code :&#x3D; E1.code || gen(E1.false ‘:’) || E2.code</td>
</tr>
</tbody></table>




<table>
<thead>
<tr>
<th>产生式</th>
<th>语义规则</th>
</tr>
</thead>
<tbody><tr>
<td>E → E1 and E2</td>
<td>E1.true :&#x3D; newlabel; <br> E1.false :&#x3D; E.false; <br> E2.true :&#x3D; E.true; <br> E2.false :&#x3D; E.false; <br> E.code :&#x3D; E1.code || gen(E1.true ‘:’) || E2.code</td>
</tr>
</tbody></table>






<table>
<thead>
<tr>
<th>产生式</th>
<th>语义规则</th>
</tr>
</thead>
<tbody><tr>
<td>E → not E1</td>
<td>E1.true :&#x3D; E.false; <br> E1.false :&#x3D; E.true; <br> E.code :&#x3D; E1.code</td>
</tr>
<tr>
<td>E → (E1)</td>
<td>E1.true :&#x3D; E.true; <br> E1.false :&#x3D; E.false; <br> E.code :&#x3D; E1.code</td>
</tr>
<tr>
<td>E → id1 relop id2</td>
<td>E.code :&#x3D; gen(‘if ’ id1.place relop.op id2.place ‘goto’ E.true) || gen(‘goto’  E.false)</td>
</tr>
<tr>
<td>E → true</td>
<td>E.code :&#x3D; gen(‘goto’  E.true)</td>
</tr>
<tr>
<td>E → false</td>
<td>E.code :&#x3D; gen(‘goto’  E.false)</td>
</tr>
</tbody></table>
<p>示例：<a class="link" href="https://www.bilibili.com/video/BV1dJ411D7w6?p=166&vd_source=c75b11f1c6d9b809759edcc17586cf0d">[18.3.6]–布尔表达式的翻译示例_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="控制流语句"><a href="#控制流语句" class="headerlink" title="控制流语句"></a>控制流语句</h2><p><a class="link" href="https://www.bilibili.com/video/BV1dJ411D7w6?p=169&vd_source=c75b11f1c6d9b809759edcc17586cf0d">[19.2.1]–if语句的属性文法_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://www.bilibili.com/video/BV1dJ411D7w6?p=170&vd_source=c75b11f1c6d9b809759edcc17586cf0d">[19.2.2]–while语句的属性文法_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://www.bilibili.com/video/BV1dJ411D7w6?p=171&spm_id_from=pageDriver&vd_source=c75b11f1c6d9b809759edcc17586cf0d">[19.3.1]–控制语句的属性计算示例_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="常用的控制语句"><a href="#常用的控制语句" class="headerlink" title="常用的控制语句"></a>常用的控制语句</h3><p>S → if E then S1</p>
<p>S → if E then S1 else S2</p>
<p>S → while E do S1</p>
<p>其中E为布尔表达式</p>
<h4 id="S-→-if-E-then-S1"><a href="#S-→-if-E-then-S1" class="headerlink" title="S → if E then S1"></a>S → if E then S1</h4><table>
<thead>
<tr>
<th>产生式</th>
<th>语义规则</th>
</tr>
</thead>
<tbody><tr>
<td>S → if E then S1</td>
<td>E.true :&#x3D; newlabel; <br> E.false :&#x3D; S.next; <br> S1.next :&#x3D; S.next; <br> S.code :&#x3D; E.code || gen(E.true ‘:’) || S1.code</td>
</tr>
</tbody></table>


<h4 id="S→if-E-then-S1-else-S2"><a href="#S→if-E-then-S1-else-S2" class="headerlink" title="S→if E then S1 else S2"></a>S→if E then S1 else S2</h4><table>
<thead>
<tr>
<th>产生式</th>
<th>语义规则</th>
</tr>
</thead>
<tbody><tr>
<td>S → if E then S1 else S2</td>
<td>E.true :&#x3D; newlabel; <br> E.false :&#x3D; newlabel; <br> S1.next :&#x3D; S.next; <br> S2.next :&#x3D; S.next; <br> S.code :&#x3D; E.code <br>               || gen(E.true ‘:’) || S1.code <br>               || gen(‘goto’  S.next) <br>               || gen(E.false ‘:’) || S2.code</td>
</tr>
</tbody></table>


<h4 id="S→while-E-do-S1"><a href="#S→while-E-do-S1" class="headerlink" title="S→while E do S1"></a>S→while E do S1</h4><table>
<thead>
<tr>
<th>产生式</th>
<th>语义规则</th>
</tr>
</thead>
<tbody><tr>
<td>S → while E do S1</td>
<td>S.begin :&#x3D; newlabel; <br> E.true :&#x3D; newlabel; <br> E.false :&#x3D; S.next; <br> S1.next :&#x3D; S.begin; <br>S.code :&#x3D; gen(S.begin ‘:’) || E.code <br>               || gen(E.true ‘:’) || S1.code <br>               || gen(‘goto’  S.begin)</td>
</tr>
</tbody></table>


<h1 id="6-运行时刻环境"><a href="#6-运行时刻环境" class="headerlink" title="6 运行时刻环境"></a>6 运行时刻环境</h1><h2 id="运行存储分配概述"><a href="#运行存储分配概述" class="headerlink" title="运行存储分配概述"></a>运行存储分配概述</h2><h3 id="运行存储分配策略"><a href="#运行存储分配策略" class="headerlink" title="运行存储分配策略"></a>运行存储分配策略</h3><p>编译器在工作过程中，必须为源程序中出现的一些数据对象分配运行时的存储空间<br>对于那些在编译时刻就可以确定大小的数据对象，可以在编译时刻就为它们分配存储空间，这样的分配策略称为静态存储分配<br>反之，如果不能在编译时完全确定数据对象的大小，就要采用动态存储分配的策略。即在编译时仅产生各种必要的信息，而在运行时刻，再动态地分配数据对象的存储空间</p>
<p>栈式存储分配<br>堆式存储分配</p>
<p>静态和动态分别对应编译时刻和运行时刻</p>


<h3 id="活动记录"><a href="#活动记录" class="headerlink" title="活动记录"></a>活动记录</h3><p>使用过程(或函数、方法)作为用户自定义动作的单元的语言，其编译器通常<strong>以过程为单位分配存储空间</strong><br>过程体的每次执行称为该过程的一个<strong>活动</strong>(activation)<br>过程每执行一次，就为它分配一块连续存储区，用来管理过程一次执行所需的信息，这块连续存储区称为<strong>活动记录</strong>( activation record )</p>
<h3 id="活动记录的一般形式"><a href="#活动记录的一般形式" class="headerlink" title="活动记录的一般形式"></a>活动记录的一般形式</h3>

<h2 id="栈式存储分配"><a href="#栈式存储分配" class="headerlink" title="栈式存储分配"></a>栈式存储分配</h2><p>有些语言使用过程、函数或方法作为用户自定义动作的单元，几乎所有针对这些语言的编译器都把它们的(至少一部分的)运行时刻存储以栈的形式进行管理，称为栈式存储分配<br>当一个过程被调用时，该过程的活动记录被压入栈；当过程结束时，该活动记录被弹出栈<br>这种安排不仅允许活跃时段不交叠的多个过程调用之间共享空间，而且允许以如下方式为一个过程编译代码：它的非局部变量的相对地址总是固定的，和过程调用序列无关</p>
<h3 id="活动树"><a href="#活动树" class="headerlink" title="活动树"></a>活动树</h3><p>用来描述程序运行期间控制进入和离开各个活动的情况的树称为活动树<br>树中的每个结点对应于一个活动。根结点是启动程序执行的main过程的活动<br>在表示过程p的某个活动的结点上，其子结点对应于被p的这次活动调用的各个过程的活动。按照这些活动被调用的顺序，自左向右地显示它们。<strong>一个子结点必须在其右兄弟结点的活动开始之前结束</strong></p>


<h3 id="设计活动记录的一些原则"><a href="#设计活动记录的一些原则" class="headerlink" title="设计活动记录的一些原则"></a>设计活动记录的一些原则</h3><p>在调用者和被调用者之间传递的值一般被放在被调用者的活动记录的开始位置，这样它们可以尽可能地靠近调用者的活动记录<br>固定长度的项被放置在中间位置<br>控制连、访问链、机器状态字<br>在早期不知道大小的项被放置在活动记录的尾部<br>栈顶指针寄存器top_sp指向活动记录中局部数据开始的位置，以该位置作为基地址</p>
<img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20240103154109222.png" alt="image-20240103154109222" style="zoom: 33%;">

<h2 id="调用序列和返回序列"><a href="#调用序列和返回序列" class="headerlink" title="调用序列和返回序列"></a>调用序列和返回序列</h2><p>过程调用和过程返回都需要执行一些代码来管理活动记录栈，保存或恢复机器状态等<br>    调用序列<br>        实现过程调用的代码段。为一个活动记录在栈中分配空间，并在此记录的字段中填写信息<br>    返回序列<br>        恢复机器状态，使得调用过程能够在调用结束之后继续执行<br>    一个调用代码序列中的代码通常被分割到调用过程（调用者）和被调用过程（被调用者）中。返回序列也是如此</p>
<p> 调用者计算实际参数的值<br> 调用者将返回地址（程序计数器的值）放到被调用者的机器状态字段中。将原来的top-sp值放到被调用者的控制链中。然后，增加top-sp的值，使其指向被调用者局部数据开始的位置<br> 被调用者保存寄存器值和其它状态信息<br> 被调用者初始化其局部数据并开始执行<br> 被调用者将返回值放到与参数相邻的位置<br> 使用机器状态字段中的信息，被调用者恢复top-sp和其它寄存器，然后跳转到由调用者放在机器状态字段中的返回地址<br> 尽管top-sp已经被减小，但调用者仍然知道返回值相对于当前top-sp值的位置。因此，调用者可以使用那个返回值</p>
<img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20240103154310467.png" alt="image-20240103154310467" style="zoom:50%;">

<h2 id="堆式存储分配"><a href="#堆式存储分配" class="headerlink" title="堆式存储分配"></a>堆式存储分配</h2><p>堆式存储分配是把连续存储区域分成块，当活动记录或其它对象需要时就分配<br>块的释放可以按任意次序进行，所以经过一段时间后，对可能包含交错的正在使用和已经释放的区域</p>
<p>这章接下来看课本（</p>
<h1 id="7-代码生成"><a href="#7-代码生成" class="headerlink" title="7 代码生成"></a>7 代码生成</h1><h2 id="代码生成器的主要任务"><a href="#代码生成器的主要任务" class="headerlink" title="代码生成器的主要任务"></a>代码生成器的主要任务</h2><h3 id="指令选择"><a href="#指令选择" class="headerlink" title="指令选择"></a>指令选择</h3><p>选择适当的目标机指令来实现中间表示(IR)语句<br>例：<br>    三地址语句：x &#x3D; y + z<br>目标代码<br>    <code>LD  R0，y</code>		&#x2F;* 把y的值加载到寄存器R0中 *&#x2F;<br>    <code>ADD R0，R0 ，z</code>	&#x2F;* z加到R0上 *&#x2F;<br>    <code>ST x ，R0</code> 	&#x2F;* 把R0的值保存到x中 *&#x2F;</p>
<h3 id="寄存器分配和指派"><a href="#寄存器分配和指派" class="headerlink" title="寄存器分配和指派"></a>寄存器分配和指派</h3><p>把哪个值放在哪个寄存器中</p>
<h3 id="指令排序"><a href="#指令排序" class="headerlink" title="指令排序"></a>指令排序</h3><p>按照什么顺序来安排指令的执行</p>
<h2 id="一个简单的目标机模型"><a href="#一个简单的目标机模型" class="headerlink" title="一个简单的目标机模型"></a>一个简单的目标机模型</h2><h3 id="三地址机器模型"><a href="#三地址机器模型" class="headerlink" title="三地址机器模型"></a>三地址机器模型</h3><p>​	加载、保存、运算、跳转等操作<br>​	内存按字节寻址<br>​	n个通用寄存器R0, R1, …, Rn-1<br>​	假设所有的运算分量都是整数<br>​	指令之间可能有一个标号</p>
<h3 id="目标机器主要指令"><a href="#目标机器主要指令" class="headerlink" title="目标机器主要指令"></a>目标机器主要指令</h3><p>加载指令		<code>LD  dst, addr</code><br>    <code>LD  r,  x</code><br>    <code>LD  r1,  r2</code><br>保存指令	     	<code>ST   x,  r</code><br>运算指令	    	<code>OP  dst,  src1,  src2 </code><br>无条件跳转指令	<code>BR  L</code><br>条件跳转指令	<code>Bcond  r,  L</code><br>    例: <code>BLTZ  r,  L</code></p>
<table>
<thead>
<tr>
<th><strong>Type</strong></th>
<th><strong>Form</strong></th>
<th><strong>Effect</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Load</td>
<td>LD 𝑑𝑠𝑡, 𝑎𝑑𝑑𝑟</td>
<td>load the value in location 𝑎𝑑𝑑𝑟 into location 𝑑𝑠𝑡, where 𝑑𝑠𝑡 is often a register</td>
</tr>
<tr>
<td>Store</td>
<td>ST  𝑥, 𝑟</td>
<td>store the value in register 𝑟 into the location 𝑥</td>
</tr>
<tr>
<td>Computation</td>
<td>𝑂𝑃 𝑑𝑠𝑡, 𝑠𝑟𝑐1, 𝑠𝑟𝑐2</td>
<td>apply the operation 𝑂𝑃 to the values in locations  𝑠𝑟𝑐1  and 𝑠𝑟𝑐2, and place the result in location 𝑑𝑠𝑡</td>
</tr>
<tr>
<td>Unconditional jumps</td>
<td>BR 𝐿</td>
<td>jump to the machine instruction with label 𝐿</td>
</tr>
<tr>
<td>Conditional jumps</td>
<td>B𝑐𝑜𝑛𝑑 𝑟, 𝐿</td>
<td>jump to label 𝐿 if the value in register 𝑟 pass the test  B𝑐𝑜𝑛𝑑, e.g., less than zero</td>
</tr>
</tbody></table>
<h3 id="寻址模式"><a href="#寻址模式" class="headerlink" title="寻址模式"></a>寻址模式</h3><p><strong>变量名a</strong><br>a的内存地址<br>例：LD  R1 ,  a<br>R1 &#x3D; contents ( a )</p>
<p><strong>a(r)</strong><br>取 a 的 地址 值并将寄存器 R 中的值添加到该值中<br>a是一个变量，r是一个寄存器<br>例：LD  R1 ,  a(R2)<br>R1 &#x3D; contents ( a + contents(R2) )</p>
<p><strong>c(r)</strong><br>c是一个整数<br>例：LD  R1 , 100 (R2)<br>R1 &#x3D; contents (contents(R2) + 100 ) </p>
<p>*<strong>r</strong><br>在寄存器r的内容所表示的位置上存放的内存位置<br>例：LD  R1 , * R2<br>R1 &#x3D; conents (contents (contents (R2) ) ) </p>
<p>*<strong>c(r)</strong><br>在寄存器r中内容加上c后所表示的位置上存放的内存位置<br>例：LD  R1 , *100(R2)<br>R1 &#x3D; conents (contents (contents(R2) + 100 ) ) </p>
<p><strong>#c</strong><br>立即寻址模式<br>例：LD  R1 ,  #100<br>R1 &#x3D; 100</p>
<p>x &#x3D; y - z<br><img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231212201559646.png" alt="image-20231212201559646" style="zoom:33%;"></p>
<p>𝑏	&#x3D; 𝑎[𝑖]<br><img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231212201620764.png" alt="image-20231212201620764" style="zoom:33%;"></p>
<p>𝑎[𝑗]	&#x3D; 𝑐<br><img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231212201656773.png" alt="image-20231212201656773" style="zoom:33%;"></p>
<p>𝑥 &#x3D;∗ 𝑝<br><img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231212201747914.png" alt="image-20231212201747914" style="zoom:33%;"></p>
<p>∗ 𝑝 &#x3D; 𝑦<br><img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231212201808836.png" alt="image-20231212201808836" style="zoom:33%;"></p>
<p>if 𝑥 &lt; 𝑦 goto L<br><img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231212201822148.png" alt="image-20231212201822148" style="zoom:33%;"><br>M是标号为L的三地址指令所产生的目标代码中的第一个指令的标号</p>
<h2 id="过程调用和返回的目标代码"><a href="#过程调用和返回的目标代码" class="headerlink" title="过程调用和返回的目标代码"></a>过程调用和返回的目标代码</h2><h3 id="静态存储分配"><a href="#静态存储分配" class="headerlink" title="静态存储分配"></a>静态存储分配</h3><p>三地址语句<br>call callee<br>目标代码<br><code>ST callee.staticArea, #here + 20 </code>（callee的<strong>活动记录</strong>在<strong>静态区</strong>中的起始位置）<br><code>BR callee.codeArea</code> （callee的<strong>目标代码</strong>在<strong>代码区</strong>中的起始位置）</p>
<p>三地址语句<br>return<br>目标代码<br><code>BR *callee.staticArea</code></p>
<h3 id="栈式存储分配-1"><a href="#栈式存储分配-1" class="headerlink" title="栈式存储分配"></a>栈式存储分配</h3><p>三地址语句<br>call callee<br>目标代码<br><code>ADD SP, SP, #caller.recordsize</code><br><code>ST 0(SP), #here + 16 </code><br><code>BR callee.codeArea</code></p>
<p>三地址语句<br>return<br>目标代码<br>被调用过程<br><code>BR *0(SP)</code><br>调用过程<br><code>SUB SP, SP, #caller.recordsize</code></p>
<h2 id="基本块和流图"><a href="#基本块和流图" class="headerlink" title="基本块和流图"></a>基本块和流图</h2><h3 id="基本块"><a href="#基本块" class="headerlink" title="基本块"></a>基本块</h3><p>基本块是满足下列条件的最大的连续三地址指令序列<br>    控制流只能从基本块的第一个指令进入该块。也就是说，没有跳转到基本块中间或末尾指令的转移指令<br>    除了基本块的最后一个指令，控制流在离开基本块之前不会跳转或者停机</p>
<h3 id="基本块划分算法"><a href="#基本块划分算法" class="headerlink" title="基本块划分算法"></a>基本块划分算法</h3><p>输入： 三地址指令序列<br>输出： 输入序列对应的基本块列表，其中每个指令恰好被分配给一个基本块</p>
<p>方法：<br>首先，确定指令序列中哪些指令是首指令(leaders)，即某个基本块的第一个指令</p>
<ol>
<li>指令序列的第一个三地址指令是一个首指令</li>
<li>任意一个条件或无条件转移指令的目标指令是一个首指令</li>
<li>紧跟在一个条件或无条件转移指令之后的指令是一个首指令</li>
</ol>
<p>然后，每个首指令对应的基本块包括了从它自己开始，直到下一个首指令(不含)或者指令序列结尾之间的所有指令</p>
<img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231212202737956.png" alt="image-20231212202737956" style="zoom:33%;">

<h3 id="流图-Flow-Graphs"><a href="#流图-Flow-Graphs" class="headerlink" title="流图(Flow Graphs)"></a>流图(Flow Graphs)</h3><p>流图的结点是一些基本块<br>从基本块B到基本块C之间有一条边当且仅当基本块C的第一个指令可能紧跟在B的最后一条指令之后执行<br>此时称B是C的前驱(predecessor) ，C是B的后继(successor)<br>有两种方式可以确认这样的边：<br>        有一个从B的结尾跳转到C的开头的条件或无条件跳转语句<br>        按照原来的三地址语句序列中的顺序，C紧跟在之B后，且B的结尾不存在无条件跳转语句</p>
<img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231212203034702.png" alt="image-20231212203034702" style="zoom:33%;">

<img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231212203104624.png" alt="image-20231212203104624" style="zoom:33%;">

<h3 id="基本块的DAG（有向无环图）表示"><a href="#基本块的DAG（有向无环图）表示" class="headerlink" title="基本块的DAG（有向无环图）表示"></a>基本块的DAG（有向无环图）表示</h3><p>例<br>    a &#x3D; b + c<br>    b &#x3D; a - d<br>    c &#x3D; b + c<br>    d &#x3D; a - d<br>基本块中的每个语句s都对应一个内部结点N </p>
<ul>
<li>结点N的标号是s中的运算符；同时还有一个定值变量表被关联到N ，表示s是在此基本块内最晚对表中变量进行定值的语句</li>
<li>N的子结点是基本块中在s之前、最后一个对s所使用的运算分量进行定值的语句对应的结点。如果s的某个运算分量在基本块内没有在s之前被定值，则这个运算分量对应的子结点就是代表该运算分量初始值的叶结点(为区别起见，叶节点的定值变量表中的变量加上下脚标0)</li>
<li>在为语句x&#x3D;y+z构造结点N的时候，如果x已经在某结点M的定值变量表中，则从M的定值变量表中删除变量x</li>
</ul>
<img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231212203259496.png" alt="image-20231212203259496" style="zoom: 50%;">

<h3 id="DAG的构造"><a href="#DAG的构造" class="headerlink" title="DAG的构造"></a>DAG的构造</h3><img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231212203609689.png" alt="image-20231212203609689" style="zoom:50%;">

<img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231212203631722.png" alt="image-20231212203631722" style="zoom:50%;">

<img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231212203642452.png" alt="image-20231212203642452" style="zoom:50%;">

<img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231212203656820.png" alt="image-20231212203656820" style="zoom:50%;">

<p>从一个DAG上删除所有没有附加活跃变量（活跃变量是指其值可能会在以后被使用的变量）的根结点(即没有父结点的结点) 。重复应用这样的处理过程就可以从DAG中消除所有对应于无用代码的结点<br>例<br>a &#x3D; b + c<br>b &#x3D; b - d<br>c &#x3D; c + d<br>e &#x3D; b + c</p>
<img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231212203747417.png" alt="image-20231212203747417" style="zoom:50%;">

<img lazyload src="/images/loading.svg" data-src="%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/image-20231212203859651.png" alt="image-20231212203859651" style="zoom:33%;">

<h2 id="寄存器的选择"><a href="#寄存器的选择" class="headerlink" title="寄存器的选择"></a>寄存器的选择</h2><h3 id="三地址语句的目标代码生成"><a href="#三地址语句的目标代码生成" class="headerlink" title="三地址语句的目标代码生成"></a>三地址语句的目标代码生成</h3><p>对每个形如x &#x3D; y op z的三地址指令I，执行如下动作<br>调用函数getreg( I )来为x、y、z选择寄存器，把这些寄存器称为Rx、Ry、Rz<br>如果 Ry中存放的不是 y ，则生成指令<code>LD Ry, y′</code>。y′是存放y的内存位置之一<br>类似的，如果 Rz中存放的不是z，生成指令<code>LD Rz, z</code><br>生成目标指令<code>OP Rx, Ry, Rz</code></p>
<h3 id="寄存器描述符和地址描述符"><a href="#寄存器描述符和地址描述符" class="headerlink" title="寄存器描述符和地址描述符"></a>寄存器描述符和地址描述符</h3><p>寄存器描述符 ( register descriptor )<br>    记录每个寄存器当前存放的是哪些变量的值<br>地址描述符 ( address descriptor )<br>    记录运行时每个名字的当前值存放在哪个或哪些位置<br>    该位置可能是寄存器、栈单元、内存地址或者是它们的某个集合<br>    这些信息可以存放在该变量名对应的符号表条目中</p>
<h3 id="基本块的收尾处理"><a href="#基本块的收尾处理" class="headerlink" title="基本块的收尾处理"></a>基本块的收尾处理</h3><p>对于一个在基本块的出口处可能活跃的变量x ,  如果它的地址描述符表明它的值没有存放在x的内存位置上,  则生成指令<code>ST x, R</code> ( R是在基本块结尾处存放 x值的寄存器 )</p>
<h3 id="管理寄存器和地址描述符"><a href="#管理寄存器和地址描述符" class="headerlink" title="管理寄存器和地址描述符"></a>管理寄存器和地址描述符</h3><p>当代码生成算法生成加载、保存和其他指令时，它必须同时更新寄存器和地址描述符<br>对于指令<code>LD R, x</code><br>    修改 R的寄存器描述符，使之只包含x<br>    修改x的地址描述符，把 R 作为新增位置加入到x的位置集合中<br>    从任何不同于x的地址描述符中删除 R</p>
<p>当代码生成算法生成加载、保存和其他指令时，它必须同时更新寄存器和地址描述符<br>    对于指令<code>LD R, x</code><br>    对于指令<code>OP Rx, Ry, Rz</code><br>        修改 <strong>Rx的寄存器描述符</strong>，使之只包含 x<br>        从任何不同于Rx的寄存器描述符中删除 x<br>        修改<strong>x的地址描述符</strong>，使之只包含位置 Rx<br>        从任何<strong>不同于x的地址描述符</strong>中删除 Rx</p>
<p>当代码生成算法生成加载、保存和其他指令时，它必须同时更新寄存器和地址描述符<br>对于指令<code>LD R, x</code><br>对于指令<code>OP Rx, Ry, Rz</code><br>对于指令<code>ST x, R</code><br>修改<strong>x的地址描述符</strong>，使之包含自己的内存位置</p>
<p>当代码生成算法生成加载、保存和其他指令时，它必须同时更新寄存器和地址描述符<br>对于指令<code>LD R, x</code><br>对于指令<code>OP Rx, Ry, Rz</code><br>对于指令<code>ST x, R</code><br>对于复制语句x&#x3D;y，如果需要生成加载指令<code>LD Ry, y′ </code>则<br>     修改 Ry的寄存器描述符，使之只包含 y<br>     修改 y的地址描述符，把Ry作为新增位置加入到 y的位置集合中<br>     从任何不同于y的变量的地址描述符中删除Ry<br>     <strong>修改 Ry的寄存器描述符，使之也包含x</strong><br>     <strong>修改 x的地址描述符，使之只包含 Ry</strong></p>
<p>示例：<a class="link" href="https://www.bilibili.com/video/BV1dL4y1H7T8?p=79&vd_source=c75b11f1c6d9b809759edcc17586cf0d">9-4寄存器的选择_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">t = a - b</span><br><span class="line">u = a - c</span><br><span class="line">v = t + u</span><br><span class="line">a = d</span><br><span class="line">d = v + u</span><br></pre></td></tr></table></figure></div>



<img lazyload src="/images/loading.svg" data-src="E:/%25E5%25A4%25A7%25E4%25B8%2589%25E4%25B8%258A(%25E3%2581%25A3%2520%25C2%25B0%25D0%2594%2520%25C2%25B0;)%25E3%2581%25A3/%25E7%25BC%2596%25E8%25AF%2591%25E5%258E%259F%25E7%2590%2586%25E4%25B8%258E%25E6%258A%2580%25E6%259C%25AF(%25E2%2595%25AC%25E2%2596%2594%25E7%259A%25BF%25E2%2596%2594)%25E2%2595%25AF/%25E7%25AC%2594%25E8%25AE%25B0%25E5%259B%25BE%25E7%2589%2587/image-20231216165331872.png" alt="image-20231216165331872" style="zoom:50%;">

<img lazyload src="/images/loading.svg" data-src="E:/%25E5%25A4%25A7%25E4%25B8%2589%25E4%25B8%258A(%25E3%2581%25A3%2520%25C2%25B0%25D0%2594%2520%25C2%25B0;)%25E3%2581%25A3/%25E7%25BC%2596%25E8%25AF%2591%25E5%258E%259F%25E7%2590%2586%25E4%25B8%258E%25E6%258A%2580%25E6%259C%25AF(%25E2%2595%25AC%25E2%2596%2594%25E7%259A%25BF%25E2%2596%2594)%25E2%2595%25AF/%25E7%25AC%2594%25E8%25AE%25B0%25E5%259B%25BE%25E7%2589%2587/image-20231216175431125.png" alt="image-20231216175431125" style="zoom: 50%;">

<h2 id="寄存器选择函数getReg的设计"><a href="#寄存器选择函数getReg的设计" class="headerlink" title="寄存器选择函数getReg的设计"></a>寄存器选择函数getReg的设计</h2><h3 id="寄存器选择函数getReg"><a href="#寄存器选择函数getReg" class="headerlink" title="寄存器选择函数getReg"></a>寄存器选择函数getReg</h3><img lazyload src="/images/loading.svg" data-src="E:/%25E5%25A4%25A7%25E4%25B8%2589%25E4%25B8%258A(%25E3%2581%25A3%2520%25C2%25B0%25D0%2594%2520%25C2%25B0;)%25E3%2581%25A3/%25E7%25BC%2596%25E8%25AF%2591%25E5%258E%259F%25E7%2590%2586%25E4%25B8%258E%25E6%258A%2580%25E6%259C%25AF(%25E2%2595%25AC%25E2%2596%2594%25E7%259A%25BF%25E2%2596%2594)%25E2%2595%25AF/%25E7%25AC%2594%25E8%25AE%25B0%25E5%259B%25BE%25E7%2589%2587/image-20231216165717485.png" alt="image-20231216165717485" style="zoom: 33%;">

<h3 id="计算R的“费用”"><a href="#计算R的“费用”" class="headerlink" title="计算R的“费用”"></a>计算R的“费用”</h3><img lazyload src="/images/loading.svg" data-src="E:/%25E5%25A4%25A7%25E4%25B8%2589%25E4%25B8%258A(%25E3%2581%25A3%2520%25C2%25B0%25D0%2594%2520%25C2%25B0;)%25E3%2581%25A3/%25E7%25BC%2596%25E8%25AF%2591%25E5%258E%259F%25E7%2590%2586%25E4%25B8%258E%25E6%258A%2580%25E6%259C%25AF(%25E2%2595%25AC%25E2%2596%2594%25E7%259A%25BF%25E2%2596%2594)%25E2%2595%25AF/%25E7%25AC%2594%25E8%25AE%25B0%25E5%259B%25BE%25E7%2589%2587/image-20231216165831926.png" alt="image-20231216165831926" style="zoom: 33%;">

<h3 id="寄存器Rx的选择"><a href="#寄存器Rx的选择" class="headerlink" title="寄存器Rx的选择"></a>寄存器Rx的选择</h3><p>选择方法与Ry类似，区别之处在于：</p>
<ul>
<li>因为x的一个新值正在被计算，因此<strong>只存放了x的值</strong>的寄存器对Rx来说总是可接受的，即使 x就是 y或 z之一(因为我们的机器指令允许一个指令中的两个寄存器相同)</li>
<li>如果 y在指令I之后<strong>不再使用</strong>，且(在必要时加载 y之后) Ry<strong>仅仅保存了y的值</strong>，那么， Ry同时也可以用作Rx 。对z和Rz也有类似选择</li>
</ul>
<p>当I是复制指令x&#x3D;y时，选择好Ry后，令Rx &#x3D;Ry</p>
<h2 id="窥孔优化"><a href="#窥孔优化" class="headerlink" title="窥孔优化"></a>窥孔优化</h2><p>窥孔(peephole)是程序上的一个小的滑动窗口<br>窥孔优化是指在优化的时候，检查目标指令的一个滑动窗口(即窥孔) ，并且只要有可能就在窥孔内用更快或更短的指令来替换窗口中的指令序列<br>也可以在<strong>中间代码生成</strong>之后直接应用窥孔优化来提高中间表示形式的质量</p>
<h3 id="冗余指令删除"><a href="#冗余指令删除" class="headerlink" title="冗余指令删除"></a>冗余指令删除</h3><h4 id="消除冗余的加载和保存指令"><a href="#消除冗余的加载和保存指令" class="headerlink" title="消除冗余的加载和保存指令"></a>消除冗余的加载和保存指令</h4><img lazyload src="/images/loading.svg" data-src="E:/%25E5%25A4%25A7%25E4%25B8%2589%25E4%25B8%258A(%25E3%2581%25A3%2520%25C2%25B0%25D0%2594%2520%25C2%25B0;)%25E3%2581%25A3/%25E7%25BC%2596%25E8%25AF%2591%25E5%258E%259F%25E7%2590%2586%25E4%25B8%258E%25E6%258A%2580%25E6%259C%25AF(%25E2%2595%25AC%25E2%2596%2594%25E7%259A%25BF%25E2%2596%2594)%25E2%2595%25AF/%25E7%25AC%2594%25E8%25AE%25B0%25E5%259B%25BE%25E7%2589%2587/image-20231216170954406.png" alt="image-20231216170954406" style="zoom:33%;">

<h4 id="消除不可达代码"><a href="#消除不可达代码" class="headerlink" title="消除不可达代码"></a>消除不可达代码</h4><p>一个紧跟在无条件跳转之后的不带标号的指令可以被删除</p>
<img lazyload src="/images/loading.svg" data-src="E:/%25E5%25A4%25A7%25E4%25B8%2589%25E4%25B8%258A(%25E3%2581%25A3%2520%25C2%25B0%25D0%2594%2520%25C2%25B0;)%25E3%2581%25A3/%25E7%25BC%2596%25E8%25AF%2591%25E5%258E%259F%25E7%2590%2586%25E4%25B8%258E%25E6%258A%2580%25E6%259C%25AF(%25E2%2595%25AC%25E2%2596%2594%25E7%259A%25BF%25E2%2596%2594)%25E2%2595%25AF/%25E7%25AC%2594%25E8%25AE%25B0%25E5%259B%25BE%25E7%2589%2587/image-20231216170556298.png" alt="image-20231216170556298" style="zoom: 33%;">

<h3 id="控制流优化"><a href="#控制流优化" class="headerlink" title="控制流优化"></a>控制流优化</h3><p>在代码中出现跳转到跳转指令的指令时，某些条件下可以使用一个跳转指令来代替</p>
<img lazyload src="/images/loading.svg" data-src="E:/%25E5%25A4%25A7%25E4%25B8%2589%25E4%25B8%258A(%25E3%2581%25A3%2520%25C2%25B0%25D0%2594%2520%25C2%25B0;)%25E3%2581%25A3/%25E7%25BC%2596%25E8%25AF%2591%25E5%258E%259F%25E7%2590%2586%25E4%25B8%258E%25E6%258A%2580%25E6%259C%25AF(%25E2%2595%25AC%25E2%2596%2594%25E7%259A%25BF%25E2%2596%2594)%25E2%2595%25AF/%25E7%25AC%2594%25E8%25AE%25B0%25E5%259B%25BE%25E7%2589%2587/image-20231216170639208.png" alt="image-20231216170639208" style="zoom:33%;">

<h3 id="代数优化"><a href="#代数优化" class="headerlink" title="代数优化"></a>代数优化</h3><p>代数恒等式<br>    消除窥孔中类似于x&#x3D;x+0或x&#x3D;x*1的运算指令</p>
<p>强度削弱<br>    对于乘数(除数)是2的幂的定点数乘法(除法) ，用移位运算实现代价比较低<br>    除数为常量的浮点数除法可以通过乘数为该常量倒数的乘法来求近似值</p>
<h3 id="特殊指令的使用"><a href="#特殊指令的使用" class="headerlink" title="特殊指令的使用"></a>特殊指令的使用</h3><p>充分利用目标系统的某些高效的特殊指令来提高代码效率<br>例如：INC指令可以用来替代加1的操作</p>
<h1 id="Chapter-8"><a href="#Chapter-8" class="headerlink" title="Chapter 8"></a>Chapter 8</h1><p>看课本吧整不完了</p>
]]></content>
      <tags>
        <tag>Notes</tag>
      </tags>
  </entry>
</search>
